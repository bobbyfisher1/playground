/*
 * generated by Xtext 2.13.0
 */
grammar InternalEis;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.eis.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.eis.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.eis.services.EisGrammarAccess;

}

@parser::members {

 	private EisGrammarAccess grammarAccess;

    public InternalEisParser(TokenStream input, EisGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected EisGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getEisEisTypeParserRuleCall_0());
			}
			lv_eis_0_0=ruleEisType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"eis",
					lv_eis_0_0,
					"org.example.eis.Eis.EisType");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleEisType
entryRuleEisType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEisTypeRule()); }
	iv_ruleEisType=ruleEisType
	{ $current=$iv_ruleEisType.current; }
	EOF;

// Rule EisType
ruleEisType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEisTypeAccess().getTiaProjectNameParserRuleCall_0());
		}
		this_TiaProjectName_0=ruleTiaProjectName
		{
			$current = $this_TiaProjectName_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEisTypeAccess().getPLCNameParserRuleCall_1());
		}
		this_PLCName_1=rulePLCName
		{
			$current = $this_PLCName_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTiaProjectName
entryRuleTiaProjectName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTiaProjectNameRule()); }
	iv_ruleTiaProjectName=ruleTiaProjectName
	{ $current=$iv_ruleTiaProjectName.current; }
	EOF;

// Rule TiaProjectName
ruleTiaProjectName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='project'
		{
			newLeafNode(otherlv_0, grammarAccess.getTiaProjectNameAccess().getProjectKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getTiaProjectNameAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTiaProjectNameAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTiaProjectNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getTiaProjectNameAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRulePLCName
entryRulePLCName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPLCNameRule()); }
	iv_rulePLCName=rulePLCName
	{ $current=$iv_rulePLCName.current; }
	EOF;

// Rule PLCName
rulePLCName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='plcname'
		{
			newLeafNode(otherlv_0, grammarAccess.getPLCNameAccess().getPlcnameKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getPLCNameAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPLCNameAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPLCNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getPLCNameAccess().getSemicolonKeyword_3());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
