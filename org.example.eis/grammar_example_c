project = name;
plcname = name;
author  = name;

testcase BlockName{					//testCase IDs can be counted automatically (starting at 0) and omitted
	testActive = boolean;
	blockType = (FC | FB);
	description = string;	

	define{ 
		(input+ & inout? & output+)[] 			//the question of quantity and order remains
	}		

	teststep(int plcCycle, string description){
		(input+ & inout? & output+)[]	
	}
}
	
	
//example-of-the-define-section-------------------------------------------------------------

	define{
		input[ 
			udt Steuerwort(typeSteuerwort){
				bool Start, Stop, Modus; 							//undefined boolean types can be preset to false
				
				udt Manuell(typeManuellSteuerwort){
					bool Links, Rechts;
				}
			
				udt Auto(typeAutoSteuerwort){
					dint SollPos;									//undefined numerical types can be preset to 0
					bool Execute;
				}
			}
			
			bool Freigabe;			
		]
		
		inout[	
			udt InterfaceHMI(typeHMImotorInterface){				
				udt Steuerwort(typeSteuerwort){									
					bool Start, Stop, Modus; 
									
					udt Manuell(typeManuellSteuerwort){
						bool Links, Rechts;
					}
				
					udt Auto(typeAutoSteuerwort){
						dint SollPos;
						bool Execute;
					}
				}
				
				udt Statuswort(typeStatuswort){
					bool ready, busy;
					dint istPos;				
				}									
			}
			
			int Rechte;
			
			//From Kevin
			variant Zeiger(int); -> In der XML: Variant@Int
		]
		
		output[
			udt Statuswort(typeStatuswort){
				bool ready, busy;
				dint istPos +/- dint;				//Default range can set here in the define section. '0' if not specified. 
													//Only '+/-' can be specified, not just '+' or '-' alone.
													//Only for numerical types, of course. 
			}
			
			bool Motorlinks, Motorrechts;		
		]
	}
	
	
//1st-example-of-implementing testcases--------------------------------------------------------------
	
	teststep(2, "Keine Freigabe Hand"){
		input[ 
			Steuerwort.Start = true;
			Steuerwort.Stop = Steuerwort.Modus = false;			//schmankerl 							
					
			Steuerwort.Manuell.Links  = true; 
			Steuerwort.Manuell.Rechts = false;
									
			Steuerwort.Auto.SollPos = 0;									
			Steuerwort.Auto.Execute = false;
		
			Freigabe = false;			
		]
		
		inout[													
			InterfaceHMI.Steuerwort.Start 	= false;
			InterfaceHMI.Steuerwort.Stop	= false;
			InterfaceHMI.Steuerwort.Modus	= false; 
			
			InterfaceHMI.Steuerwort.Manuell.Links 	= false; 
			InterfaceHMI.Steuerwort.Manuell.Rechts	= false;
			
			InterfaceHMI.Steuerwort.Auto.SollPos = 0;
			InterfaceHMI.Steuerwort.Auto.Execute = false;
	
	
			InterfaceHMI.Statuswort.ready  = false;
			InterfaceHMI.Statuswort.busy   = false;
			InterfaceHMI.Statuswort.istPos = 0;			
			
			Rechte   = 0; 			
		]
		
		output[
			Statuswort.ready  = false;
			Statuswort.busy   = false;
			Statuswort.istPos = 0 +/- 4;					// range can be set individually for this specific testStep
						
			Motorlinks = Motorrechts = false;		
		]
	}


//2nd-example-of-implementing testcases-----------another-possible-syntax-----------------------------------------

	testStep(3, "Freigabe Hand"){
		input[
			Steuerwort => [											//sugar
				Start = true;
				Stop = false;
				Modus = false;
				
				Manuell => [
					Links = false;
					Rechts = false;
				]
				
				Auto => [
					SollPos = 0;
					Execute = false;
				]
			]
			
			Freigabe = true;			
		]
		
		inout[
			InterfaceHMI => [
				Steuerwort => [ 
					Start = Stop = Modus = false; 					//sugar
				
					Manuell => [ Links = Rechts = false; ]
					Auto => [ 
						SollPos = 0;
						Execute = false;
					]
				]
				
				Statuswort => [
					ready = busy = false;
					istPos = 0;
				]
			]
			
			Rechte = 0;
		]
		
		output[
			Statuswort => [
				ready = true;
				busy = false;
				istPos = 0;
			]
			
			Motorlinks = Motorrechts = false;
		]		
	}



//------------------------------------------------------------------------------------------------------
/*
	Here I was thinking that after the define section, as a quickfix or autocomplete function, a template could be instanciated,
	which the user can copy for other tests.
	
	I'd say that the template always needs to be there and an error would occour, if it's missing.
	This way it would always be there for the user before they start writing wild tests.
	And they're shown how to write minimalistic tests and the sugar. 
	
	Of course, the testSteps and testCases can be folded.
*/

	testStep(0, "Template"){
		input[
			Steuerwort => [
				Start = false;
				Stop = false;
				Modus = false;
				
				Manuell => [
					Links = false;
					Rechts = false;
				]
				
				Auto => [
					SollPos = 0;
					Execute = false;
				]
			]
			
			Freigabe = false;			
		]
		
		inout[
			InterfaceHMI => [
				Steuerwort => [ 
					Start = false;
					Stop = false;
					Modus = false; 
				
					Manuell => [ 
						Links = false;
						Rechts = false; 
					]
					Auto => [ 
						SollPos = 0;
						Execute = false;
					]
				]
				
				Statuswort => [
					ready = false;
					busy = false;
					istPos = 0;
				]
			]
			
			Rechte = 0;
		]
		
		output[
			Statuswort => [
				ready = false;
				busy = false;
				istPos = 0;
			]
			
			Motorlinks = false;
			Motorrechts = false;
		]		
	}

//3rd-example-of-implementing testcases------------copied-from-template----------------------------------------------

	testStep(7, "Hand rechts"){
		input[
			Steuerwort => [
				Start = true;
				Stop = false;
				Modus = false;
				
				Manuell => [
					Links = false;
					Rechts = true;
				]
				
				Auto => [
					SollPos = 0;
					Execute = false;
				]
			]
			
			Freigabe = true;			
		]
		
		inout[
			InterfaceHMI => [
				Steuerwort => [ 
					Start = false;
					Stop = false;
					Modus = false; 
				
					Manuell => [ 
						Links = false;
						Rechts = false; 
					]
					Auto => [ 
						SollPos = 0;
						Execute = false;
					]
				]
				
				Statuswort => [
					ready = false;
					busy = false;
					istPos = 0;
				]
			]
			
			Rechte = 0;
		]
		
		output[
			Statuswort => [
				ready = true;
				busy = true;
				istPos = 0;
			]
			
			Motorlinks = false;
			Motorrechts = true;
		]		
	}
	