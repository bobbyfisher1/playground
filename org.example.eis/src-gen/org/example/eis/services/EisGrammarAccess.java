/*
 * generated by Xtext 2.13.0
 */
package org.example.eis.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EisGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.eis.Eis.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProject_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProject_nameIDTerminalRuleCall_2_0 = (RuleCall)cProject_nameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPlcnameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPlc_nameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPlc_nameIDTerminalRuleCall_6_0 = (RuleCall)cPlc_nameAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEisAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEisEisTypeParserRuleCall_8_0 = (RuleCall)cEisAssignment_8.eContents().get(0);
		
		//Model:
		//	'project' '=' project_name=ID ';'
		//	'plcname' '=' plc_name=ID ';'
		//	eis+=EisType*;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' '=' project_name=ID ';' 'plcname' '=' plc_name=ID ';' eis+=EisType*
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//project_name=ID
		public Assignment getProject_nameAssignment_2() { return cProject_nameAssignment_2; }
		
		//ID
		public RuleCall getProject_nameIDTerminalRuleCall_2_0() { return cProject_nameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'plcname'
		public Keyword getPlcnameKeyword_4() { return cPlcnameKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//plc_name=ID
		public Assignment getPlc_nameAssignment_6() { return cPlc_nameAssignment_6; }
		
		//ID
		public RuleCall getPlc_nameIDTerminalRuleCall_6_0() { return cPlc_nameIDTerminalRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//eis+=EisType*
		public Assignment getEisAssignment_8() { return cEisAssignment_8; }
		
		//EisType
		public RuleCall getEisEisTypeParserRuleCall_8_0() { return cEisEisTypeParserRuleCall_8_0; }
	}
	public class EisTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.eis.Eis.EisType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAbcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EisType:
		//	"abc" ';';
		@Override public ParserRule getRule() { return rule; }
		
		//"abc" ';'
		public Group getGroup() { return cGroup; }
		
		//"abc"
		public Keyword getAbcKeyword_0() { return cAbcKeyword_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final EisTypeElements pEisType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EisGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEisType = new EisTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.eis.Eis".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'project' '=' project_name=ID ';'
	//	'plcname' '=' plc_name=ID ';'
	//	eis+=EisType*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//EisType:
	//	"abc" ';';
	public EisTypeElements getEisTypeAccess() {
		return pEisType;
	}
	
	public ParserRule getEisTypeRule() {
		return getEisTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
