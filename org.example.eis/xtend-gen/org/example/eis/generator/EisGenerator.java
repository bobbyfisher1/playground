/**
 * generated by Xtext 2.12.0
 */
package org.example.eis.generator;

import com.google.common.collect.HashMultimap;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.example.eis.eis.Cascade;
import org.example.eis.eis.DefineBlock;
import org.example.eis.eis.DirectionBlock;
import org.example.eis.eis.EisModel;
import org.example.eis.eis.Idiom;
import org.example.eis.eis.InOut;
import org.example.eis.eis.Input;
import org.example.eis.eis.Output;
import org.example.eis.eis.Statement;
import org.example.eis.eis.Testblock;
import org.example.eis.eis.Testcase;
import org.example.eis.eis.TeststepBlock;
import org.example.eis.eis.Udt;
import org.example.eis.eis.UdtRef;
import org.example.eis.eis.Variable;
import org.example.eis.eis.Variables;
import org.example.eis.interpreter.EisInterpreter;
import org.example.eis.typing.DefineType;
import org.example.eis.typing.DefineTypeComputer;

@SuppressWarnings("all")
public class EisGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private EisInterpreter _eisInterpreter;
  
  @Inject
  @Extension
  private DefineTypeComputer _defineTypeComputer;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final EisModel model = IterableExtensions.<EisModel>head(Iterables.<EisModel>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EisModel.class));
    StringConcatenation _builder = new StringConcatenation();
    String _plc_name = model.getPlc_name();
    _builder.append(_plc_name);
    _builder.append("_Testfixture.xml");
    fsa.generateFile(_builder.toString(), this.compile(model));
  }
  
  public CharSequence compile(final EisModel model) {
    CharSequence _xblockexpression = null;
    {
      int testcaseID = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
      _builder.newLine();
      _builder.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<TiaProjectName>");
      String _project_name = model.getProject_name();
      _builder.append(_project_name, "\t");
      _builder.append("</TiaProjectName>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<PlcName>");
      String _plc_name = model.getPlc_name();
      _builder.append(_plc_name, "\t");
      _builder.append("</PlcName>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<Author>");
      String _author_name = model.getAuthor_name();
      _builder.append(_author_name, "\t");
      _builder.append("</Author>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<TestCases>");
      _builder.newLine();
      {
        EList<Testcase> _testcases = model.getTestcases();
        for(final Testcase testcases : _testcases) {
          Testblock _testblock = null;
          if (testcases!=null) {
            _testblock=testcases.getTestblock();
          }
          final Testblock testblock = _testblock;
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("<TestCase ID=\"");
          int _plusPlus = testcaseID++;
          _builder.append(_plusPlus, "\t\t");
          _builder.append("\"");
          {
            if ((testblock != null)) {
              _builder.append(" TestActive=\"");
              String _value = testblock.getTestActive().getValue();
              _builder.append(_value, "\t\t");
              _builder.append("\" Blockname=\"");
              String _testcase_name = testcases.getTestcase_name();
              _builder.append(_testcase_name, "\t\t");
              _builder.append("\" Blocktype=\"");
              String _value_1 = testblock.getBlockType().getValue();
              _builder.append(_value_1, "\t\t");
              _builder.append("\" Description=\"");
              String _description = testblock.getDescription();
              _builder.append(_description, "\t\t");
              _builder.append("\"");
            }
          }
          _builder.append(">");
          _builder.newLineIfNotEmpty();
          {
            DefineBlock _define = null;
            if (testblock!=null) {
              _define=testblock.getDefine();
            }
            boolean _tripleNotEquals = (_define != null);
            if (_tripleNotEquals) {
              CharSequence _compileTeststeps = this.compileTeststeps(testblock.getDefine());
              _builder.append(_compileTeststeps);
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          _builder.append("</TestCase>");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.append("</TestCases>");
      _builder.newLine();
      _builder.append("</TestFixture>");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compileTeststeps(final DefineBlock define) {
    EList<TeststepBlock> _teststeps = null;
    if (define!=null) {
      _teststeps=define.getTeststeps();
    }
    final EList<TeststepBlock> steps = _teststeps;
    final EList<Variables> inputs = define.getDirection().getInput().getInputVariables();
    DirectionBlock _direction = define.getDirection();
    InOut _inout = null;
    if (_direction!=null) {
      _inout=_direction.getInout();
    }
    EList<Variables> _inoutVariables = null;
    if (_inout!=null) {
      _inoutVariables=_inout.getInoutVariables();
    }
    final EList<Variables> inouts = _inoutVariables;
    final EList<Variables> outputs = define.getDirection().getOutput().getOutputVariables();
    final HashMap<Object, Object> inputMap = new HashMap<Object, Object>();
    final HashMultimap<Object, Object> outputMap = HashMultimap.<Object, Object>create();
    HashMap<Object, Object> setMap = new HashMap<Object, Object>();
    HashMultimap<Object, Object> assertMap = HashMultimap.<Object, Object>create();
    final String fourTabs = "\t\t\t\t";
    boolean _isEmpty = inputs.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      this.generateMap(inputMap, inputs, "");
    }
    boolean _isEmpty_1 = outputs.isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      this.generateMultimap(outputMap, outputs, "");
    }
    if ((inouts != null)) {
      boolean _isEmpty_2 = inouts.isEmpty();
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        this.generateMap(inputMap, inouts, "");
        this.generateMultimap(outputMap, inouts, "");
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty_3 = steps.isEmpty();
      boolean _not_3 = (!_isEmpty_3);
      if (_not_3) {
        _builder.append("\t\t\t");
        _builder.append("<Teststeps>");
        _builder.newLine();
        {
          for(final TeststepBlock e : steps) {
            _builder.append(fourTabs);
            _builder.append("<Teststep PlcCycle =\"");
            int _plcCycle = e.getPlcCycle();
            _builder.append(_plcCycle);
            _builder.append("\" Description=\"");
            String _description = e.getDescription();
            _builder.append(_description);
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("<Inputs>");
            _builder.newLine();
            setMap.clear();
            _builder.newLineIfNotEmpty();
            setMap.putAll(inputMap);
            _builder.newLineIfNotEmpty();
            this.overwrite(setMap, e);
            _builder.newLineIfNotEmpty();
            CharSequence _compileIn = this.compileIn(setMap, inputs, "", "\t\t\t\t\t\t");
            _builder.append(_compileIn);
            _builder.newLineIfNotEmpty();
            {
              if ((inouts != null)) {
                CharSequence _compileIn_1 = this.compileIn(setMap, inouts, "", "\t\t\t\t\t\t");
                _builder.append(_compileIn_1);
              }
            }
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("</Inputs>");
            _builder.newLine();
            _builder.append("\t\t\t\t\t");
            _builder.append("<Outputs>");
            _builder.newLine();
            assertMap.clear();
            _builder.newLineIfNotEmpty();
            {
              boolean _putAll = assertMap.putAll(outputMap);
              if (_putAll) {
              }
            }
            this.overwrite(assertMap, e);
            _builder.newLineIfNotEmpty();
            CharSequence _compileOut = this.compileOut(assertMap, e);
            _builder.append(_compileOut);
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t\t\t\t");
            _builder.append("</Outputs>");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("</Teststep>");
            _builder.newLine();
          }
        }
        _builder.append("\t\t\t");
        _builder.append("</Teststeps>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compileIn(final HashMap<Object, Object> setMap, final EList<Variables> variables, final String _qualifiedName, final String _indent) {
    String charSeq = "";
    String qualifiedName = _qualifiedName;
    String indent = _indent;
    final String tab = "\t";
    for (final Variables variable : variables) {
      if ((variable instanceof Variable)) {
        String _name = ((Variable)variable).getName();
        String _plus = (qualifiedName + _name);
        final String value = setMap.get(_plus).toString();
        String _charSeq = charSeq;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<Element xsi:type=\"Input\" Name=\"");
        String _name_1 = ((Variable)variable).getName();
        _builder.append(_name_1);
        _builder.append("\" Datatype=\"");
        String _string = ((Variable)variable).getVariableType().toString();
        _builder.append(_string);
        _builder.append("\" Direction=\"");
        String _directionBlock = this.directionBlock(variable);
        _builder.append(_directionBlock);
        _builder.append("\" Value=\"");
        _builder.append(value);
        _builder.append("\" Variant=\"");
        String _string_1 = Boolean.valueOf(((Variable)variable).isVariantKeyword()).toString();
        _builder.append(_string_1);
        _builder.append("\" />");
        _builder.newLineIfNotEmpty();
        String _plus_1 = (indent + _builder);
        charSeq = (_charSeq + _plus_1);
      } else {
        if ((variable instanceof Udt)) {
          String _charSeq_1 = charSeq;
          CharSequence _buildUdt = this.buildUdt(setMap, qualifiedName, indent, ((Udt)variable), tab);
          charSeq = (_charSeq_1 + _buildUdt);
        } else {
          if ((variable instanceof UdtRef)) {
            String _charSeq_2 = charSeq;
            CharSequence _buildUdtRef = this.buildUdtRef(setMap, qualifiedName, indent, ((UdtRef)variable), tab);
            charSeq = (_charSeq_2 + _buildUdtRef);
          }
        }
      }
    }
    return charSeq;
  }
  
  public CharSequence buildUdt(final HashMap<Object, Object> setMap, final String _qualifiedName, final String indent, final Udt variable, final String tab) {
    String charSeq = "";
    String qualifiedName = _qualifiedName;
    String _charSeq = charSeq;
    charSeq = (_charSeq + indent);
    String _charSeq_1 = charSeq;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Element xsi: type=\"InputUDT\" Name=\"");
    String _name = variable.getName();
    _builder.append(_name);
    _builder.append("\" Datatype=\"");
    String _name_1 = variable.getUdtType().getName();
    _builder.append(_name_1);
    _builder.append("\" Direction=\"");
    String _directionBlock = this.directionBlock(variable);
    _builder.append(_directionBlock);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    charSeq = (_charSeq_1 + _builder);
    final String indentPlus = (indent + tab);
    String _charSeq_2 = charSeq;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<Elements>");
    _builder_1.newLine();
    String _plus = (indentPlus + _builder_1);
    charSeq = (_charSeq_2 + _plus);
    final String indentPlusPlus = (indentPlus + tab);
    String _charSeq_3 = charSeq;
    EList<Variables> _udtVariables = variable.getUdtVariables();
    String _name_2 = variable.getName();
    String _plus_1 = (qualifiedName + _name_2);
    String _plus_2 = (_plus_1 + ".");
    CharSequence _compileIn = this.compileIn(setMap, _udtVariables, _plus_2, indentPlusPlus);
    charSeq = (_charSeq_3 + _compileIn);
    String _charSeq_4 = charSeq;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</Elements>");
    _builder_2.newLine();
    String _plus_3 = (indentPlus + _builder_2);
    charSeq = (_charSeq_4 + _plus_3);
    String _charSeq_5 = charSeq;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</Element>");
    _builder_3.newLine();
    String _plus_4 = (indent + _builder_3);
    charSeq = (_charSeq_5 + _plus_4);
    return charSeq;
  }
  
  public CharSequence buildUdtRef(final HashMap<Object, Object> setMap, final String _qualifiedName, final String indent, final UdtRef variable, final String tab) {
    String charSeq = "";
    String qualifiedName = _qualifiedName;
    String _charSeq = charSeq;
    charSeq = (_charSeq + indent);
    String _charSeq_1 = charSeq;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Element xsi: type=\"InputUDT\" Name=\"");
    String _name = variable.getName();
    _builder.append(_name);
    _builder.append("\" Datatype=\"");
    String _string = variable.getUdtType().toString();
    _builder.append(_string);
    _builder.append("\" Direction=\"");
    String _directionBlock = this.directionBlock(variable);
    _builder.append(_directionBlock);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    charSeq = (_charSeq_1 + _builder);
    final String indentPlus = (indent + tab);
    String _charSeq_2 = charSeq;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<Elements>");
    _builder_1.newLine();
    String _plus = (indentPlus + _builder_1);
    charSeq = (_charSeq_2 + _plus);
    final String indentPlusPlus = (indentPlus + tab);
    String _charSeq_3 = charSeq;
    EList<Variables> _udtVariables = variable.getUdtVariables();
    String _name_1 = variable.getName();
    String _plus_1 = (qualifiedName + _name_1);
    String _plus_2 = (_plus_1 + ".");
    CharSequence _compileIn = this.compileIn(setMap, _udtVariables, _plus_2, indentPlusPlus);
    charSeq = (_charSeq_3 + _compileIn);
    String _charSeq_4 = charSeq;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</Elements>");
    _builder_2.newLine();
    String _plus_3 = (indentPlus + _builder_2);
    charSeq = (_charSeq_4 + _plus_3);
    String _charSeq_5 = charSeq;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</Element>");
    _builder_3.newLine();
    String _plus_4 = (indent + _builder_3);
    charSeq = (_charSeq_5 + _plus_4);
    return charSeq;
  }
  
  public void generateMap(final HashMap<Object, Object> map, final EList<Variables> variables, final String _name) {
    String name = _name;
    for (final Variables variable : variables) {
      if ((variable instanceof Variable)) {
        String _name_1 = ((Variable)variable).getName();
        String _plus = (name + _name_1);
        String _elvis = null;
        Idiom _idiom = null;
        if (((Variable)variable)!=null) {
          _idiom=((Variable)variable).getIdiom();
        }
        Object _interpret = null;
        if (_idiom!=null) {
          _interpret=this._eisInterpreter.interpret(_idiom);
        }
        String _string = null;
        if (_interpret!=null) {
          _string=_interpret.toString();
        }
        if (_string != null) {
          _elvis = _string;
        } else {
          String _defaultValue = this.defaultValue(((Variable)variable));
          _elvis = _defaultValue;
        }
        map.put(_plus, _elvis);
      } else {
        if ((variable instanceof Udt)) {
          EList<Variables> _udtVariables = ((Udt)variable).getUdtVariables();
          String _name_2 = ((Udt)variable).getName();
          String _plus_1 = (name + _name_2);
          String _plus_2 = (_plus_1 + ".");
          this.generateMap(map, _udtVariables, _plus_2);
        } else {
          if ((variable instanceof UdtRef)) {
            EList<Variables> _udtVariables_1 = ((UdtRef)variable).getUdtVariables();
            String _name_3 = ((UdtRef)variable).getName();
            String _plus_3 = (name + _name_3);
            String _plus_4 = (_plus_3 + ".");
            this.generateMap(map, _udtVariables_1, _plus_4);
          }
        }
      }
    }
  }
  
  public void generateMultimap(final HashMultimap<Object, Object> multiMap, final EList<Variables> variables, final String name2) {
    String name = name2;
    for (final Variables variable : variables) {
      {
        List<String> list = new ArrayList<String>();
        if ((variable instanceof Variable)) {
          String _elvis = null;
          Idiom _idiom = null;
          if (((Variable)variable)!=null) {
            _idiom=((Variable)variable).getIdiom();
          }
          Object _interpret = null;
          if (_idiom!=null) {
            _interpret=this._eisInterpreter.interpret(_idiom);
          }
          String _string = null;
          if (_interpret!=null) {
            _string=_interpret.toString();
          }
          if (_string != null) {
            _elvis = _string;
          } else {
            String _defaultValue = this.defaultValue(((Variable)variable));
            _elvis = _defaultValue;
          }
          list.add(_elvis);
          String _elvis_1 = null;
          Idiom _range = null;
          if (((Variable)variable)!=null) {
            _range=((Variable)variable).getRange();
          }
          Object _interpret_1 = null;
          if (_range!=null) {
            _interpret_1=this._eisInterpreter.interpret(_range);
          }
          String _string_1 = null;
          if (_interpret_1!=null) {
            _string_1=_interpret_1.toString();
          }
          if (_string_1 != null) {
            _elvis_1 = _string_1;
          } else {
            String _defaultValue_1 = this.defaultValue(((Variable)variable));
            _elvis_1 = _defaultValue_1;
          }
          list.add(_elvis_1);
          String _name = name;
          String _name_1 = ((Variable)variable).getName();
          name = (_name + _name_1);
          multiMap.put(name, list);
          name = "";
        } else {
          if ((variable instanceof Udt)) {
            String _name_2 = name;
            String _name_3 = ((Udt)variable).getName();
            String _plus = (_name_3 + ".");
            name = (_name_2 + _plus);
            this.generateMultimap(multiMap, ((Udt)variable).getUdtVariables(), name);
          } else {
            if ((variable instanceof UdtRef)) {
              String _name_4 = name;
              String _name_5 = ((UdtRef)variable).getName();
              String _plus_1 = (_name_5 + ".");
              name = (_name_4 + _plus_1);
              this.generateMultimap(multiMap, ((UdtRef)variable).getUdtVariables(), name);
            }
          }
        }
      }
    }
  }
  
  public String defaultValue(final Variable variable) {
    final DefineType type = this._defineTypeComputer.typeFor(variable.getVariableType());
    boolean _isBoolType = this._defineTypeComputer.isBoolType(type);
    if (_isBoolType) {
      return "false";
    } else {
      boolean _isIntType = this._defineTypeComputer.isIntType(type);
      if (_isIntType) {
        return "0";
      } else {
        boolean _isStringType = this._defineTypeComputer.isStringType(type);
        if (_isStringType) {
          return "";
        }
      }
    }
    return null;
  }
  
  public void overwrite(final HashMap<Object, Object> setMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getSet().getSetVariables();
    String name = "";
    for (final Statement e : statements) {
      {
        name = e.getVariable().getName().toString();
        boolean _isEmpty = e.getCascade().isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          EList<Cascade> _cascade = e.getCascade();
          for (final Cascade c : _cascade) {
            String _name = name;
            String _string = c.getUdtVar().getName().toString();
            String _plus = ("." + _string);
            name = (_name + _plus);
          }
        }
        boolean _containsKey = setMap.containsKey(name);
        if (_containsKey) {
          setMap.replace(name, this._eisInterpreter.interpret(e.getIdiom()).toString());
        }
      }
    }
  }
  
  public void overwrite(final HashMultimap<Object, Object> assertMultiMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getAssert().getAssertVariables();
    for (final Statement e : statements) {
      {
        List<String> list = new ArrayList<String>();
        String name = e.getVariable().getName().toString();
        boolean _isEmpty = e.getCascade().isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          EList<Cascade> _cascade = e.getCascade();
          for (final Cascade c : _cascade) {
            String _name = name;
            String _string = c.getUdtVar().getName().toString();
            String _plus = ("." + _string);
            name = (_name + _plus);
          }
        }
        boolean _containsKey = assertMultiMap.containsKey(name);
        if (_containsKey) {
          list.add(this._eisInterpreter.interpret(e.getIdiom()).toString());
          boolean _isEmpty_1 = e.getCascade().isEmpty();
          if (_isEmpty_1) {
            String _elvis = null;
            Idiom _range = null;
            if (e!=null) {
              _range=e.getRange();
            }
            Object _interpret = null;
            if (_range!=null) {
              _interpret=this._eisInterpreter.interpret(_range);
            }
            String _string_1 = null;
            if (_interpret!=null) {
              _string_1=_interpret.toString();
            }
            if (_string_1 != null) {
              _elvis = _string_1;
            } else {
              Variables _variable = e.getVariable();
              String _defaultValue = this.defaultValue(((Variable) _variable));
              _elvis = _defaultValue;
            }
            list.add(_elvis);
          } else {
            String _elvis_1 = null;
            Idiom _range_1 = null;
            if (e!=null) {
              _range_1=e.getRange();
            }
            Object _interpret_1 = null;
            if (_range_1!=null) {
              _interpret_1=this._eisInterpreter.interpret(_range_1);
            }
            String _string_2 = null;
            if (_interpret_1!=null) {
              _string_2=_interpret_1.toString();
            }
            if (_string_2 != null) {
              _elvis_1 = _string_2;
            } else {
              Variables _udtVar = IterableExtensions.<Cascade>last(e.getCascade()).getUdtVar();
              String _defaultValue_1 = this.defaultValue(((Variable) _udtVar));
              _elvis_1 = _defaultValue_1;
            }
            list.add(_elvis_1);
          }
          assertMultiMap.replaceValues(name, list);
        }
      }
    }
  }
  
  public CharSequence compileOut(final HashMultimap<Object, Object> assertMap, final TeststepBlock teststep) {
    return null;
  }
  
  public String directionBlock(final EObject context) {
    String _xblockexpression = null;
    {
      final EObject container = context.eContainer();
      String _xifexpression = null;
      if ((container instanceof DirectionBlock)) {
        String _switchResult = null;
        boolean _matched = false;
        if (context instanceof Input) {
          _matched=true;
          _switchResult = "Input";
        }
        if (!_matched) {
          if (context instanceof Output) {
            _matched=true;
            _switchResult = "Output";
          }
        }
        if (!_matched) {
          if (context instanceof InOut) {
            _matched=true;
            _switchResult = "InOut";
          }
        }
        return _switchResult;
      } else {
        _xifexpression = this.directionBlock(container);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void funWithMaps(final Input inputs) {
    final HashMap<String, Object> defaultMap = new HashMap<String, Object>();
    final HashMap<String, Object> rangeMap = new HashMap<String, Object>();
    EList<Variables> _inputVariables = inputs.getInputVariables();
    for (final Variables in : _inputVariables) {
      if ((in instanceof Variable)) {
        String _name = ((Variable)in).getName();
        Idiom _idiom = null;
        if (((Variable)in)!=null) {
          _idiom=((Variable)in).getIdiom();
        }
        Object _interpret = null;
        if (_idiom!=null) {
          _interpret=this._eisInterpreter.interpret(_idiom);
        }
        defaultMap.put(_name, _interpret);
        String _name_1 = ((Variable)in).getName();
        Idiom _range = null;
        if (((Variable)in)!=null) {
          _range=((Variable)in).getRange();
        }
        Object _interpret_1 = null;
        if (_range!=null) {
          _interpret_1=this._eisInterpreter.interpret(_range);
        }
        rangeMap.put(_name_1, _interpret_1);
      }
    }
    HashMap<String, Object> newMap = new HashMap<String, Object>(defaultMap);
    Variables _last = IterableExtensions.<Variables>last(inputs.getInputVariables());
    Idiom _range_1 = null;
    if (((Variable) _last)!=null) {
      _range_1=((Variable) _last).getRange();
    }
    Object _interpret_2 = null;
    if (_range_1!=null) {
      _interpret_2=this._eisInterpreter.interpret(_range_1);
    }
    newMap.replace("a", _interpret_2);
    InputOutput.<String>println("kawabunga");
    InputOutput.println();
  }
}
