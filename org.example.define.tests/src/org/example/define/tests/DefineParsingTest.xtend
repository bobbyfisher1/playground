/*
 * generated by Xtext 2.14.0
 */
package org.example.define.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.example.define.define.BoolConstant
import org.example.define.define.DefineBlock
import org.example.define.define.EFloat
import org.example.define.define.IntConstant
import org.example.define.define.Udt
import org.example.define.define.Variable
import org.example.define.typing.DefineTypeComputer
import org.junit.Test
import org.junit.runner.RunWith

import static org.example.define.typing.DefineTypeComputer.*

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(DefineInjectorProvider)
class DefineParsingTest {
	@Inject extension ParseHelper<DefineBlock>
	@Inject extension ValidationTestHelper;
	@Inject extension DefineTypeComputer

	//
// tests -----------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	@Test def void testDefineStructure() {
		'''	
			define{
				input[
					int a= 4; int b = 0 +/- 3;
					bool Int=true;
					//float f = 5;
					int x; variant int y; udt z(atype){}
				]
				inout[
					udt Rain(typeRain){ 
						int d = 90;
						udt Sun(typeSun){
							int e = 10;
						}
					}
				]
				output[ 
					variant int Train;
				]
				
			}
		'''.parse.assertNoErrors
	}

	@Test def void testAccessingVariables() {
		'''
			define{
						input[ 
							int a= 4;
							udt Dido(typeDido){ int b = 39; }
							variant int Train;
						]
						inout[]
						output[bool x,y,z;]					
			}
		'''.parse => [
			assertNoErrors
			direction.input.inputVariables => [
				(get(0) as Variable) => [
//					variableType.typeFor.assertSame(INT_TYPE)
					name.assertEquals('a')
					(expression as IntConstant).value.assertEquals(4)
				]
				(get(1) as Udt) => [
					name.assertEquals('Dido')
					udtType.name.assertEquals('typeDido')
					(udtVariables.get(0) as Variable) => [
//						variableType.typeFor.assertSame(INT_TYPE)
						name.assertEquals('b')
						(expression as IntConstant).value.assertEquals(39)
					]
				]
				(get(2) as Variable) => [
					name.assertEquals('Train')
//					variableType.typeFor.assertSame(INT_TYPE)
					variantKeyword.assertEquals(true)
				]
			]
		]
	}

	@Test def void testAccessingVariables2() {
		'''
			define{
						input[ 
							int a = 4 ;int b; bool c = false;
							bool d=true;
						]
						output[]
			}
		'''.parse => [
			assertNoErrors
			direction.input.inputVariables => [
				(get(0) as Variable) => [
					variableType.typeFor.assertSame(INT_TYPE)
					// .assertEquals(IntType)
					name.assertEquals('a')
					(expression as IntConstant).value.assertEquals(4)
				]
				get(1) => [name.assertEquals('b')]
				(get(2) as Variable) => [
					variableType.typeFor.assertSame(BOOL_TYPE)
					// assertEquals('bool')
					name.assertEquals('c')
					(expression as BoolConstant).value.assertEquals('false')
				]
				(get(3) as Variable) => [
					variableType.typeFor.assertSame(BOOL_TYPE)
					// .assertEquals('bool')
					name.assertEquals('d')
					(expression as BoolConstant).value.assertEquals('true')
				]
			]
		]
	}

	@Test def void testAccessingCascadeOfVariables() {
		'''
			define{
				input[]
				output[
					int a;
					/*int b=9;
					bool c;
					bool d=false;
					int e=1;
					udt One(typeOne){
						
						udt Two(typeTwo){
							int aaaa; 
							variant bool TwoAndAHalf;
							variant int Three;
						}
					}*/
				]
			}
		'''.parse.assertNoErrors()
	}

	@Test def void testUnorderedGroup() {
		'''
		define{		
			output[] input[] inout[]
		}'''.parse.assertNoErrors();
	}

	@Test def void testOutputRangeDeclaration() {
		'''
			define {
				input [ ]
				output [ int a = 4  +/-  9; ]
			}
		'''.parse.assertNoErrors()
	}

	@Test def void testDecimal() {
		'''
			define{
				input[ float a = 19.5; ]
				output[]
			}
		'''.parse => [
			(direction.input.inputVariables.get(0) as Variable) => [
				(expression as EFloat).value.assertEquals(19)
				(expression as EFloat).valueOfDecimal.assertEquals(5)
			]
		]
	}

	@Test def void testDecimal2() {
		'''
			define{
				input[ float a = 19.; ]
				output[]
			}
		'''.parse => [
			(direction.input.inputVariables.get(0) as Variable) => [
				(expression as EFloat).value.assertEquals(19)
				(expression as EFloat).valueOfDecimal.assertEquals(0)
			]
		]
	}

	@Test def void testDecimal3() {
		'''
			define{
				input[ float a = 0.4; ]
				output[]
			}
		'''.parse => [
			(direction.input.inputVariables.get(0) as Variable) => [
				(expression as EFloat).value.assertEquals(0)
				(expression as EFloat).valueOfDecimal.assertEquals(4)
			]
		]
	}

	@Test def void testVariables() {
		'''
			define{
				input[ int a=14; ]
				output[]
			}
		'''.parse => [assertNoErrors]
	}
}
