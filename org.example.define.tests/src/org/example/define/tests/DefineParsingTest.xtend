/*
 * generated by Xtext 2.13.0
 */
package org.example.define.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.example.define.define.BoolConstant
import org.example.define.define.DefineBlock
import org.example.define.define.IntConstant
import org.example.define.define.Udt
import org.example.define.define.Variant
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(DefineInjectorProvider)
class DefineParsingTest {
	@Inject extension ParseHelper<DefineBlock>
	@Inject extension ValidationTestHelper;

	@Test def void testDefineStructure() {
		'''	
			define{
				input[
					int a= 4, int b=0+/-3;
					bool Int=8;
					float f = 5;
					int a, variant b(int), udt a(atype){}
				]
				inout[
					udt Rain(typeRain){ 
						int a = 90;
						udt Sun(typeSun){
							int b = 10;
						}
					}
				]
				output[ 
					variant Train(int);
				]
				
			}
		'''.parse.assertNoErrors
	}

	@Test def void testAccessingVariables() {
		'''
			define{
						input[ 
							int a= 4;
							udt Dido(typeDido){ int b = 39; }
							variant Train(int);
						]
						inout[]
						output[]					
			}
		'''.parse => [
			assertNoErrors
			direction.input.inputVariables => [
				get(0) => [
					variableType.assertEquals('int')
					variableDefinition => [
						variableName.assertEquals('a')
						(expression as IntConstant).value.assertEquals(4)
					]
				]
				(get(1) as Udt) => [
					udtName.assertEquals('Dido')
					udtType.assertEquals('typeDido')
					udtVariables.get(0) => [
						variableType.assertEquals('int')
						variableDefinition => [
							variableName.assertEquals('b')
							(expression as IntConstant).value.assertEquals(39)
						]
					]
				]
				(get(2) as Variant) => [
					variantName.assertEquals('Train')
					variantType.assertEquals('int')
				]
			]
		]

	}

	@Test def void testAccessingVariables2() {
		'''
			define{
						input[ 
							int a= 4, b, c = false;
							bool d=true;
						]
						output[]
			}
		'''.parse => [
			assertNoErrors
			direction.input.inputVariables => [
				get(0) => [
					variableType.assertEquals('int')
					variableDefinition => [
						variableName.assertEquals('a')
						(expression as IntConstant).value.assertEquals(4)
					]
				]
				get(1) => [variableDefinition.variableName.assertEquals('b')]
				get(2) => [
					variableType.assertNull /*<--- change this with validaiton??? */
					variableDefinition => [
						variableName.assertEquals('c')
						(expression as BoolConstant).value.assertEquals('false')
					]
				]
				get(3) => [
					variableType.assertEquals('bool')
					variableDefinition => [
						variableName.assertEquals('d')
						(expression as BoolConstant).value.assertEquals('true')
					]
				]
			]
		]
	}

	@Test def void testAccessingCascadeOfVariables() {
		'''
			define{
				input[]
				output[
					int a, b=9, c, d=false, e=1;
					udt One(typeOne){
						udt Two(typeTwo){
							int a,a,a,a,a, TwoAndAHalf(bool);
							variant Three(int);							
						}
					}				
				]
			}
		'''.parse.assertNoErrors()
	}

	@Test def void testUnorderedGroup() {
		'''
		define{		
			output[] input[] inout[]
		}'''.parse.assertNoErrors();
	}

	@Test def void testVariantCascade() {
		'''
			define{
				input[]
				output[ variant A(int), B(int), C(bool); ]
			}
		'''.parse.assertNoErrors()
	}

	/*	@Test def void testTwoBirdsOneStone() {
	 * 		'''
	 * 			define {
	 * 				input [
	 * 					bool two = true;
	 * 					bool one = two;
	 * 				]
	 * 				output []
	 * 			}
	 * 		'''.parse.assertNoErrors()
	 }*/

	@Test def void testDeclarationOnly() {
		'''
			define {
				input [ ]
				output [ bool a=90, e=false, g, f=1;]
			}
		'''.parse.assertNoErrors()
	}

	@Test def void testOutputRangeDeclaration() {
		'''
			define {
				input [ ]
				output [ int a = 4  +/-  9; ]
			}
		'''.parse.assertNoErrors()
	}

}
