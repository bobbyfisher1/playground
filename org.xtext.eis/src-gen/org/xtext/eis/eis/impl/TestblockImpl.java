/**
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.eis.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.eis.eis.BlockConstant;
import org.xtext.eis.eis.BoolConstant;
import org.xtext.eis.eis.DefineBlock;
import org.xtext.eis.eis.EisPackage;
import org.xtext.eis.eis.Testblock;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Testblock</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.eis.eis.impl.TestblockImpl#getTestActive <em>Test Active</em>}</li>
 *   <li>{@link org.xtext.eis.eis.impl.TestblockImpl#getBlockType <em>Block Type</em>}</li>
 *   <li>{@link org.xtext.eis.eis.impl.TestblockImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link org.xtext.eis.eis.impl.TestblockImpl#getDefine <em>Define</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestblockImpl extends MinimalEObjectImpl.Container implements Testblock
{
  /**
   * The cached value of the '{@link #getTestActive() <em>Test Active</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestActive()
   * @generated
   * @ordered
   */
  protected BoolConstant testActive;

  /**
   * The cached value of the '{@link #getBlockType() <em>Block Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlockType()
   * @generated
   * @ordered
   */
  protected BlockConstant blockType;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getDefine() <em>Define</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefine()
   * @generated
   * @ordered
   */
  protected DefineBlock define;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestblockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EisPackage.Literals.TESTBLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolConstant getTestActive()
  {
    return testActive;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTestActive(BoolConstant newTestActive, NotificationChain msgs)
  {
    BoolConstant oldTestActive = testActive;
    testActive = newTestActive;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__TEST_ACTIVE, oldTestActive, newTestActive);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTestActive(BoolConstant newTestActive)
  {
    if (newTestActive != testActive)
    {
      NotificationChain msgs = null;
      if (testActive != null)
        msgs = ((InternalEObject)testActive).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EisPackage.TESTBLOCK__TEST_ACTIVE, null, msgs);
      if (newTestActive != null)
        msgs = ((InternalEObject)newTestActive).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EisPackage.TESTBLOCK__TEST_ACTIVE, null, msgs);
      msgs = basicSetTestActive(newTestActive, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__TEST_ACTIVE, newTestActive, newTestActive));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockConstant getBlockType()
  {
    return blockType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlockType(BlockConstant newBlockType, NotificationChain msgs)
  {
    BlockConstant oldBlockType = blockType;
    blockType = newBlockType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__BLOCK_TYPE, oldBlockType, newBlockType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBlockType(BlockConstant newBlockType)
  {
    if (newBlockType != blockType)
    {
      NotificationChain msgs = null;
      if (blockType != null)
        msgs = ((InternalEObject)blockType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EisPackage.TESTBLOCK__BLOCK_TYPE, null, msgs);
      if (newBlockType != null)
        msgs = ((InternalEObject)newBlockType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EisPackage.TESTBLOCK__BLOCK_TYPE, null, msgs);
      msgs = basicSetBlockType(newBlockType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__BLOCK_TYPE, newBlockType, newBlockType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefineBlock getDefine()
  {
    return define;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefine(DefineBlock newDefine, NotificationChain msgs)
  {
    DefineBlock oldDefine = define;
    define = newDefine;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__DEFINE, oldDefine, newDefine);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDefine(DefineBlock newDefine)
  {
    if (newDefine != define)
    {
      NotificationChain msgs = null;
      if (define != null)
        msgs = ((InternalEObject)define).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EisPackage.TESTBLOCK__DEFINE, null, msgs);
      if (newDefine != null)
        msgs = ((InternalEObject)newDefine).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EisPackage.TESTBLOCK__DEFINE, null, msgs);
      msgs = basicSetDefine(newDefine, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EisPackage.TESTBLOCK__DEFINE, newDefine, newDefine));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EisPackage.TESTBLOCK__TEST_ACTIVE:
        return basicSetTestActive(null, msgs);
      case EisPackage.TESTBLOCK__BLOCK_TYPE:
        return basicSetBlockType(null, msgs);
      case EisPackage.TESTBLOCK__DEFINE:
        return basicSetDefine(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EisPackage.TESTBLOCK__TEST_ACTIVE:
        return getTestActive();
      case EisPackage.TESTBLOCK__BLOCK_TYPE:
        return getBlockType();
      case EisPackage.TESTBLOCK__DESCRIPTION:
        return getDescription();
      case EisPackage.TESTBLOCK__DEFINE:
        return getDefine();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EisPackage.TESTBLOCK__TEST_ACTIVE:
        setTestActive((BoolConstant)newValue);
        return;
      case EisPackage.TESTBLOCK__BLOCK_TYPE:
        setBlockType((BlockConstant)newValue);
        return;
      case EisPackage.TESTBLOCK__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case EisPackage.TESTBLOCK__DEFINE:
        setDefine((DefineBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EisPackage.TESTBLOCK__TEST_ACTIVE:
        setTestActive((BoolConstant)null);
        return;
      case EisPackage.TESTBLOCK__BLOCK_TYPE:
        setBlockType((BlockConstant)null);
        return;
      case EisPackage.TESTBLOCK__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case EisPackage.TESTBLOCK__DEFINE:
        setDefine((DefineBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EisPackage.TESTBLOCK__TEST_ACTIVE:
        return testActive != null;
      case EisPackage.TESTBLOCK__BLOCK_TYPE:
        return blockType != null;
      case EisPackage.TESTBLOCK__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case EisPackage.TESTBLOCK__DEFINE:
        return define != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //TestblockImpl
