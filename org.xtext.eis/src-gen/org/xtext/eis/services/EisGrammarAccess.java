/*
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class EisGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EisModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.EisModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProject_nameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProject_nameSTRINGTerminalRuleCall_2_0 = (RuleCall)cProject_nameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cPlcnameKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPlc_nameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPlc_nameSTRINGTerminalRuleCall_6_0 = (RuleCall)cPlc_nameAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAuthorKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAuthor_nameAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAuthor_nameSTRINGTerminalRuleCall_10_0 = (RuleCall)cAuthor_nameAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTestcasesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTestcasesTestcaseParserRuleCall_12_0 = (RuleCall)cTestcasesAssignment_12.eContents().get(0);
		
		//EisModel:
		//	'project' '=' project_name=STRING ';'
		//	'plcname' '=' plc_name=STRING ';'
		//	'author' '=' author_name=STRING ';'
		//	testcases+=Testcase*;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' '=' project_name=STRING ';' 'plcname' '=' plc_name=STRING ';' 'author' '=' author_name=STRING ';'
		//testcases+=Testcase*
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//project_name=STRING
		public Assignment getProject_nameAssignment_2() { return cProject_nameAssignment_2; }
		
		//STRING
		public RuleCall getProject_nameSTRINGTerminalRuleCall_2_0() { return cProject_nameSTRINGTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'plcname'
		public Keyword getPlcnameKeyword_4() { return cPlcnameKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//plc_name=STRING
		public Assignment getPlc_nameAssignment_6() { return cPlc_nameAssignment_6; }
		
		//STRING
		public RuleCall getPlc_nameSTRINGTerminalRuleCall_6_0() { return cPlc_nameSTRINGTerminalRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'author'
		public Keyword getAuthorKeyword_8() { return cAuthorKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//author_name=STRING
		public Assignment getAuthor_nameAssignment_10() { return cAuthor_nameAssignment_10; }
		
		//STRING
		public RuleCall getAuthor_nameSTRINGTerminalRuleCall_10_0() { return cAuthor_nameSTRINGTerminalRuleCall_10_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//testcases+=Testcase*
		public Assignment getTestcasesAssignment_12() { return cTestcasesAssignment_12; }
		
		//Testcase
		public RuleCall getTestcasesTestcaseParserRuleCall_12_0() { return cTestcasesTestcaseParserRuleCall_12_0; }
	}
	public class TestcaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Testcase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestcaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestcase_nameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestcase_nameIDTerminalRuleCall_1_0 = (RuleCall)cTestcase_nameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTestblockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestblockTestblockParserRuleCall_3_0 = (RuleCall)cTestblockAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Testcase:
		//	"testcase" testcase_name=ID '{'
		//	testblock=Testblock?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"testcase" testcase_name=ID '{' testblock=Testblock? '}'
		public Group getGroup() { return cGroup; }
		
		//"testcase"
		public Keyword getTestcaseKeyword_0() { return cTestcaseKeyword_0; }
		
		//testcase_name=ID
		public Assignment getTestcase_nameAssignment_1() { return cTestcase_nameAssignment_1; }
		
		//ID
		public RuleCall getTestcase_nameIDTerminalRuleCall_1_0() { return cTestcase_nameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//testblock=Testblock?
		public Assignment getTestblockAssignment_3() { return cTestblockAssignment_3; }
		
		//Testblock
		public RuleCall getTestblockTestblockParserRuleCall_3_0() { return cTestblockTestblockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TestblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Testblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestActiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTestActiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTestActiveBoolConstantParserRuleCall_2_0 = (RuleCall)cTestActiveAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBlockTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockTypeBlockConstantParserRuleCall_6_0 = (RuleCall)cBlockTypeAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cDescriptionKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cEqualsSignKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cDescriptionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_10_0 = (RuleCall)cDescriptionAssignment_10.eContents().get(0);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cDefineAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDefineDefineBlockParserRuleCall_12_0 = (RuleCall)cDefineAssignment_12.eContents().get(0);
		
		//Testblock:
		//	'testActive' '=' testActive=BoolConstant ';'
		//	'blockType' '=' blockType=BlockConstant ';'
		//	'description' '=' description=STRING ';'
		//	define=DefineBlock?;
		@Override public ParserRule getRule() { return rule; }
		
		//'testActive' '=' testActive=BoolConstant ';' 'blockType' '=' blockType=BlockConstant ';' 'description' '='
		//description=STRING ';' define=DefineBlock?
		public Group getGroup() { return cGroup; }
		
		//'testActive'
		public Keyword getTestActiveKeyword_0() { return cTestActiveKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//testActive=BoolConstant
		public Assignment getTestActiveAssignment_2() { return cTestActiveAssignment_2; }
		
		//BoolConstant
		public RuleCall getTestActiveBoolConstantParserRuleCall_2_0() { return cTestActiveBoolConstantParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//'blockType'
		public Keyword getBlockTypeKeyword_4() { return cBlockTypeKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
		
		//blockType=BlockConstant
		public Assignment getBlockTypeAssignment_6() { return cBlockTypeAssignment_6; }
		
		//BlockConstant
		public RuleCall getBlockTypeBlockConstantParserRuleCall_6_0() { return cBlockTypeBlockConstantParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//'description'
		public Keyword getDescriptionKeyword_8() { return cDescriptionKeyword_8; }
		
		//'='
		public Keyword getEqualsSignKeyword_9() { return cEqualsSignKeyword_9; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_10() { return cDescriptionAssignment_10; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_10_0() { return cDescriptionSTRINGTerminalRuleCall_10_0; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//define=DefineBlock?
		public Assignment getDefineAssignment_12() { return cDefineAssignment_12; }
		
		//DefineBlock
		public RuleCall getDefineDefineBlockParserRuleCall_12_0() { return cDefineDefineBlockParserRuleCall_12_0; }
	}
	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.BoolConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BoolConstant:
		//	value=BooleanValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanValue
		public RuleCall getValueBooleanValueParserRuleCall_0() { return cValueBooleanValueParserRuleCall_0; }
	}
	public class BlockConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.BlockConstant");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBlockValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BlockConstant:
		//	value=BlockValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BlockValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BlockValue
		public RuleCall getValueBlockValueParserRuleCall_0() { return cValueBlockValueParserRuleCall_0; }
	}
	public class BlockValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.BlockValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFCKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFBKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BlockValue:
		//	'FC' | 'FB';
		@Override public ParserRule getRule() { return rule; }
		
		//'FC' | 'FB'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'FC'
		public Keyword getFCKeyword_0() { return cFCKeyword_0; }
		
		//'FB'
		public Keyword getFBKeyword_1() { return cFBKeyword_1; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.BooleanValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanValue:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class DefineBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.DefineBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionDirectionBlockParserRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTeststepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTeststepsTeststepBlockParserRuleCall_4_0 = (RuleCall)cTeststepsAssignment_4.eContents().get(0);
		
		//DefineBlock:
		//	'define' '{' direction=DirectionBlock '}' teststeps+=TeststepBlock*;
		@Override public ParserRule getRule() { return rule; }
		
		//'define' '{' direction=DirectionBlock '}' teststeps+=TeststepBlock*
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//direction=DirectionBlock
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//DirectionBlock
		public RuleCall getDirectionDirectionBlockParserRuleCall_2_0() { return cDirectionDirectionBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//teststeps+=TeststepBlock*
		public Assignment getTeststepsAssignment_4() { return cTeststepsAssignment_4; }
		
		//TeststepBlock
		public RuleCall getTeststepsTeststepBlockParserRuleCall_4_0() { return cTeststepsTeststepBlockParserRuleCall_4_0; }
	}
	public class DirectionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.DirectionBlock");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cInputInputParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Assignment cOutputAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cOutputOutputParserRuleCall_1_0 = (RuleCall)cOutputAssignment_1.eContents().get(0);
		private final Assignment cInoutAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cInoutInOutParserRuleCall_2_0 = (RuleCall)cInoutAssignment_2.eContents().get(0);
		
		//DirectionBlock:
		//	input=Input & output=Output & inout=InOut?;
		@Override public ParserRule getRule() { return rule; }
		
		//input=Input & output=Output & inout=InOut?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//input=Input
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_0() { return cInputInputParserRuleCall_0_0; }
		
		//output=Output
		public Assignment getOutputAssignment_1() { return cOutputAssignment_1; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_1_0() { return cOutputOutputParserRuleCall_1_0; }
		
		//inout=InOut?
		public Assignment getInoutAssignment_2() { return cInoutAssignment_2; }
		
		//InOut
		public RuleCall getInoutInOutParserRuleCall_2_0() { return cInoutInOutParserRuleCall_2_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInputKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInputVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInputVariablesVariablesParserRuleCall_2_0 = (RuleCall)cInputVariablesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Input:
		//	name='input' '[' inputVariables+=Variables* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name='input' '[' inputVariables+=Variables* ']'
		public Group getGroup() { return cGroup; }
		
		//name='input'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'input'
		public Keyword getNameInputKeyword_0_0() { return cNameInputKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//inputVariables+=Variables*
		public Assignment getInputVariablesAssignment_2() { return cInputVariablesAssignment_2; }
		
		//Variables
		public RuleCall getInputVariablesVariablesParserRuleCall_2_0() { return cInputVariablesVariablesParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOutputKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOutputVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutputVariablesVariablesParserRuleCall_2_0 = (RuleCall)cOutputVariablesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Output:
		//	name='output' '[' outputVariables+=Variables* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name='output' '[' outputVariables+=Variables* ']'
		public Group getGroup() { return cGroup; }
		
		//name='output'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'output'
		public Keyword getNameOutputKeyword_0_0() { return cNameOutputKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//outputVariables+=Variables*
		public Assignment getOutputVariablesAssignment_2() { return cOutputVariablesAssignment_2; }
		
		//Variables
		public RuleCall getOutputVariablesVariablesParserRuleCall_2_0() { return cOutputVariablesVariablesParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class InOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.InOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameInoutKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInoutVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInoutVariablesVariablesParserRuleCall_2_0 = (RuleCall)cInoutVariablesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InOut:
		//	name='inout' '[' inoutVariables+=Variables* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name='inout' '[' inoutVariables+=Variables* ']'
		public Group getGroup() { return cGroup; }
		
		//name='inout'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'inout'
		public Keyword getNameInoutKeyword_0_0() { return cNameInoutKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//inoutVariables+=Variables*
		public Assignment getInoutVariablesAssignment_2() { return cInoutVariablesAssignment_2; }
		
		//Variables
		public RuleCall getInoutVariablesVariablesParserRuleCall_2_0() { return cInoutVariablesVariablesParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Variables");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUdtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUdtRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variables:
		//	Variable | Udt | UdtRef;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable | Udt | UdtRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }
		
		//Udt
		public RuleCall getUdtParserRuleCall_1() { return cUdtParserRuleCall_1; }
		
		//UdtRef
		public RuleCall getUdtRefParserRuleCall_2() { return cUdtRefParserRuleCall_2; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariantKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVariantKeywordVariantKeyword_1_0 = (Keyword)cVariantKeywordAssignment_1.eContents().get(0);
		private final Assignment cVariableTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableTypeBasicTypeEnumRuleCall_2_0 = (RuleCall)cVariableTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdiomAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdiomIdiomParserRuleCall_4_1_0 = (RuleCall)cIdiomAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cPlusSignSolidusHyphenMinusKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cRangeAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cRangeIdiomParserRuleCall_4_2_1_0 = (RuleCall)cRangeAssignment_4_2_1.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Assignment cNextVariableAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final Keyword cNextVariableCommaKeyword_5_1_0 = (Keyword)cNextVariableAssignment_5_1.eContents().get(0);
		
		//Variable:
		//	{Variable} variantKeyword?='variant'? variableType=BasicType? name=ID ('=' idiom=Idiom ('+/-'
		//	range=Idiom)?)? (';' | nextVariable?=',');
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} variantKeyword?='variant'? variableType=BasicType? name=ID ('=' idiom=Idiom ('+/-' range=Idiom)?)? (';' |
		//nextVariable?=',')
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//variantKeyword?='variant'?
		public Assignment getVariantKeywordAssignment_1() { return cVariantKeywordAssignment_1; }
		
		//'variant'
		public Keyword getVariantKeywordVariantKeyword_1_0() { return cVariantKeywordVariantKeyword_1_0; }
		
		//variableType=BasicType?
		public Assignment getVariableTypeAssignment_2() { return cVariableTypeAssignment_2; }
		
		//BasicType
		public RuleCall getVariableTypeBasicTypeEnumRuleCall_2_0() { return cVariableTypeBasicTypeEnumRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('=' idiom=Idiom ('+/-' range=Idiom)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }
		
		//idiom=Idiom
		public Assignment getIdiomAssignment_4_1() { return cIdiomAssignment_4_1; }
		
		//Idiom
		public RuleCall getIdiomIdiomParserRuleCall_4_1_0() { return cIdiomIdiomParserRuleCall_4_1_0; }
		
		//('+/-' range=Idiom)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'+/-'
		public Keyword getPlusSignSolidusHyphenMinusKeyword_4_2_0() { return cPlusSignSolidusHyphenMinusKeyword_4_2_0; }
		
		//range=Idiom
		public Assignment getRangeAssignment_4_2_1() { return cRangeAssignment_4_2_1; }
		
		//Idiom
		public RuleCall getRangeIdiomParserRuleCall_4_2_1_0() { return cRangeIdiomParserRuleCall_4_2_1_0; }
		
		//';' | nextVariable?=','
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//';'
		public Keyword getSemicolonKeyword_5_0() { return cSemicolonKeyword_5_0; }
		
		//nextVariable?=','
		public Assignment getNextVariableAssignment_5_1() { return cNextVariableAssignment_5_1; }
		
		//','
		public Keyword getNextVariableCommaKeyword_5_1_0() { return cNextVariableCommaKeyword_5_1_0; }
	}
	public class UdtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Udt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUdtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUdtTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUdtTypeUdtTypeParserRuleCall_3_0 = (RuleCall)cUdtTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUdtVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUdtVariablesVariablesParserRuleCall_6_0 = (RuleCall)cUdtVariablesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Udt:
		//	'udt' name=ID '(' udtType=UdtType ')' '{' udtVariables+=Variables* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'udt' name=ID '(' udtType=UdtType ')' '{' udtVariables+=Variables* '}'
		public Group getGroup() { return cGroup; }
		
		//'udt'
		public Keyword getUdtKeyword_0() { return cUdtKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//udtType=UdtType
		public Assignment getUdtTypeAssignment_3() { return cUdtTypeAssignment_3; }
		
		//UdtType
		public RuleCall getUdtTypeUdtTypeParserRuleCall_3_0() { return cUdtTypeUdtTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//udtVariables+=Variables*
		public Assignment getUdtVariablesAssignment_6() { return cUdtVariablesAssignment_6; }
		
		//Variables
		public RuleCall getUdtVariablesVariablesParserRuleCall_6_0() { return cUdtVariablesVariablesParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class UdtRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.UdtRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUdtTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cUdtTypeUdtTypeCrossReference_0_0 = (CrossReference)cUdtTypeAssignment_0.eContents().get(0);
		private final RuleCall cUdtTypeUdtTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cUdtTypeUdtTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cUdtVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUdtVariablesVariablesParserRuleCall_2_0 = (RuleCall)cUdtVariablesAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UdtRef:
		//	udtType=[UdtType] name=ID udtVariables+=Variables* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//udtType=[UdtType] name=ID udtVariables+=Variables* ';'
		public Group getGroup() { return cGroup; }
		
		//udtType=[UdtType]
		public Assignment getUdtTypeAssignment_0() { return cUdtTypeAssignment_0; }
		
		//[UdtType]
		public CrossReference getUdtTypeUdtTypeCrossReference_0_0() { return cUdtTypeUdtTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getUdtTypeUdtTypeIDTerminalRuleCall_0_0_1() { return cUdtTypeUdtTypeIDTerminalRuleCall_0_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//udtVariables+=Variables*
		public Assignment getUdtVariablesAssignment_2() { return cUdtVariablesAssignment_2; }
		
		//Variables
		public RuleCall getUdtVariablesVariablesParserRuleCall_2_0() { return cUdtVariablesVariablesParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class UdtTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.UdtType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		////
		//UdtType:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class IdiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Idiom");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Idiom:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Idiom:
		//	And ({Or.left=current} "||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Idiom:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Idiom:
		//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("==" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Idiom:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Idiom:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Plus.left=current} '+' | {Minus.left=current} '-'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Idiom:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cIdiomParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdiomAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdiomPrimaryParserRuleCall_1_2_0 = (RuleCall)cIdiomAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary Idiom:
		//	'(' Idiom ')' | {Not} "!" idiom=Primary | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Idiom ')' | {Not} "!" idiom=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Idiom ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Idiom
		public RuleCall getIdiomParserRuleCall_0_1() { return cIdiomParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "!" idiom=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//idiom=Primary
		public Assignment getIdiomAssignment_1_2() { return cIdiomAssignment_1_2; }
		
		//Primary
		public RuleCall getIdiomPrimaryParserRuleCall_1_2_0() { return cIdiomPrimaryParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cValueAlternatives_0_1_0 = (Alternatives)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cValueLONGTerminalRuleCall_0_1_0_0 = (RuleCall)cValueAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cValueNEGATIVE_LONGTerminalRuleCall_0_1_0_1 = (RuleCall)cValueAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cBoolConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_3_1_0 = (CrossReference)cVariableAssignment_3_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVariableVariableCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cRealConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cByteConstantAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueBYTETerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cWordConstantAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueWORDTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cDWordConstantAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueDWORDTerminalRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cLWordConstantAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cValueAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cValueLWORDTerminalRuleCall_8_1_0 = (RuleCall)cValueAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cCharConstantAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cValueAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cValueCHARTerminalRuleCall_9_1_0 = (RuleCall)cValueAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cTimeConstantAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cValueAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cValueTIMETerminalRuleCall_10_1_0 = (RuleCall)cValueAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cLTimeConstantAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cValueAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cValueLTIMETerminalRuleCall_11_1_0 = (RuleCall)cValueAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cDateConstantAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Assignment cValueAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_12_1_0 = (RuleCall)cValueAssignment_12_1.eContents().get(0);
		
		//Atomic Idiom:
		//	{IntConstant} value=(LONG | NEGATIVE_LONG) | {StringConstant} value=STRING
		//	| BoolConstant
		//	| {VariableRef} variable=[Variable] | {RealConstant} value=REAL
		//	| {ByteConstant} value=BYTE
		//	| {WordConstant} value=WORD
		//	| {DWordConstant} value=DWORD
		//	| {LWordConstant} value=LWORD
		//	| {CharConstant} value=CHAR
		//	| {TimeConstant} value=TIME
		//	| {LTimeConstant} value=LTIME
		//	| {DateConstant} value=DATE;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=(LONG | NEGATIVE_LONG) | {StringConstant} value=STRING | BoolConstant | {VariableRef}
		//variable=[Variable] | {RealConstant} value=REAL | {ByteConstant} value=BYTE | {WordConstant} value=WORD |
		//{DWordConstant} value=DWORD | {LWordConstant} value=LWORD | {CharConstant} value=CHAR | {TimeConstant} value=TIME |
		//{LTimeConstant} value=LTIME | {DateConstant} value=DATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=(LONG | NEGATIVE_LONG)
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=(LONG | NEGATIVE_LONG)
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//(LONG | NEGATIVE_LONG)
		public Alternatives getValueAlternatives_0_1_0() { return cValueAlternatives_0_1_0; }
		
		//LONG
		public RuleCall getValueLONGTerminalRuleCall_0_1_0_0() { return cValueLONGTerminalRuleCall_0_1_0_0; }
		
		//NEGATIVE_LONG
		public RuleCall getValueNEGATIVE_LONGTerminalRuleCall_0_1_0_1() { return cValueNEGATIVE_LONGTerminalRuleCall_0_1_0_1; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_2() { return cBoolConstantParserRuleCall_2; }
		
		//{VariableRef} variable=[Variable]
		public Group getGroup_3() { return cGroup_3; }
		
		//{VariableRef}
		public Action getVariableRefAction_3_0() { return cVariableRefAction_3_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_1_0() { return cVariableVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_1_0_1() { return cVariableVariableIDTerminalRuleCall_3_1_0_1; }
		
		//{RealConstant} value=REAL
		public Group getGroup_4() { return cGroup_4; }
		
		//{RealConstant}
		public Action getRealConstantAction_4_0() { return cRealConstantAction_4_0; }
		
		//value=REAL
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_4_1_0() { return cValueREALTerminalRuleCall_4_1_0; }
		
		//{ByteConstant} value=BYTE
		public Group getGroup_5() { return cGroup_5; }
		
		//{ByteConstant}
		public Action getByteConstantAction_5_0() { return cByteConstantAction_5_0; }
		
		//value=BYTE
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//BYTE
		public RuleCall getValueBYTETerminalRuleCall_5_1_0() { return cValueBYTETerminalRuleCall_5_1_0; }
		
		//{WordConstant} value=WORD
		public Group getGroup_6() { return cGroup_6; }
		
		//{WordConstant}
		public Action getWordConstantAction_6_0() { return cWordConstantAction_6_0; }
		
		//value=WORD
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//WORD
		public RuleCall getValueWORDTerminalRuleCall_6_1_0() { return cValueWORDTerminalRuleCall_6_1_0; }
		
		//{DWordConstant} value=DWORD
		public Group getGroup_7() { return cGroup_7; }
		
		//{DWordConstant}
		public Action getDWordConstantAction_7_0() { return cDWordConstantAction_7_0; }
		
		//value=DWORD
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//DWORD
		public RuleCall getValueDWORDTerminalRuleCall_7_1_0() { return cValueDWORDTerminalRuleCall_7_1_0; }
		
		//{LWordConstant} value=LWORD
		public Group getGroup_8() { return cGroup_8; }
		
		//{LWordConstant}
		public Action getLWordConstantAction_8_0() { return cLWordConstantAction_8_0; }
		
		//value=LWORD
		public Assignment getValueAssignment_8_1() { return cValueAssignment_8_1; }
		
		//LWORD
		public RuleCall getValueLWORDTerminalRuleCall_8_1_0() { return cValueLWORDTerminalRuleCall_8_1_0; }
		
		//{CharConstant} value=CHAR
		public Group getGroup_9() { return cGroup_9; }
		
		//{CharConstant}
		public Action getCharConstantAction_9_0() { return cCharConstantAction_9_0; }
		
		//value=CHAR
		public Assignment getValueAssignment_9_1() { return cValueAssignment_9_1; }
		
		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_9_1_0() { return cValueCHARTerminalRuleCall_9_1_0; }
		
		//{TimeConstant} value=TIME
		public Group getGroup_10() { return cGroup_10; }
		
		//{TimeConstant}
		public Action getTimeConstantAction_10_0() { return cTimeConstantAction_10_0; }
		
		//value=TIME
		public Assignment getValueAssignment_10_1() { return cValueAssignment_10_1; }
		
		//TIME
		public RuleCall getValueTIMETerminalRuleCall_10_1_0() { return cValueTIMETerminalRuleCall_10_1_0; }
		
		//{LTimeConstant} value=LTIME
		public Group getGroup_11() { return cGroup_11; }
		
		//{LTimeConstant}
		public Action getLTimeConstantAction_11_0() { return cLTimeConstantAction_11_0; }
		
		//value=LTIME
		public Assignment getValueAssignment_11_1() { return cValueAssignment_11_1; }
		
		//LTIME
		public RuleCall getValueLTIMETerminalRuleCall_11_1_0() { return cValueLTIMETerminalRuleCall_11_1_0; }
		
		//{DateConstant} value=DATE
		public Group getGroup_12() { return cGroup_12; }
		
		//{DateConstant}
		public Action getDateConstantAction_12_0() { return cDateConstantAction_12_0; }
		
		//value=DATE
		public Assignment getValueAssignment_12_1() { return cValueAssignment_12_1; }
		
		//DATE
		public RuleCall getValueDATETerminalRuleCall_12_1_0() { return cValueDATETerminalRuleCall_12_1_0; }
	}
	public class TeststepBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.TeststepBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeststepKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPlcCycleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPlcCycleLONGTerminalRuleCall_2_0 = (RuleCall)cPlcCycleAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAssertionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAssertionAssertionBlockParserRuleCall_7_0 = (RuleCall)cAssertionAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//TeststepBlock:
		//	'teststep' '(' plcCycle=LONG ',' description=STRING ')' '{' assertion=AssertionBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'teststep' '(' plcCycle=LONG ',' description=STRING ')' '{' assertion=AssertionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'teststep'
		public Keyword getTeststepKeyword_0() { return cTeststepKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//plcCycle=LONG
		public Assignment getPlcCycleAssignment_2() { return cPlcCycleAssignment_2; }
		
		//LONG
		public RuleCall getPlcCycleLONGTerminalRuleCall_2_0() { return cPlcCycleLONGTerminalRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//assertion=AssertionBlock
		public Assignment getAssertionAssignment_7() { return cAssertionAssignment_7; }
		
		//AssertionBlock
		public RuleCall getAssertionAssertionBlockParserRuleCall_7_0() { return cAssertionAssertionBlockParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class AssertionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.AssertionBlock");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cSetAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cSetSetParserRuleCall_0_0 = (RuleCall)cSetAssignment_0.eContents().get(0);
		private final Assignment cAssertAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cAssertAssertParserRuleCall_1_0 = (RuleCall)cAssertAssignment_1.eContents().get(0);
		
		//AssertionBlock:
		//	set=Set & assert=Assert;
		@Override public ParserRule getRule() { return rule; }
		
		//set=Set & assert=Assert
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//set=Set
		public Assignment getSetAssignment_0() { return cSetAssignment_0; }
		
		//Set
		public RuleCall getSetSetParserRuleCall_0_0() { return cSetSetParserRuleCall_0_0; }
		
		//assert=Assert
		public Assignment getAssertAssignment_1() { return cAssertAssignment_1; }
		
		//Assert
		public RuleCall getAssertAssertParserRuleCall_1_0() { return cAssertAssertParserRuleCall_1_0; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSetKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetVariablesStatementParserRuleCall_2_0 = (RuleCall)cSetVariablesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Set:
		//	name='set' '[' setVariables+=Statement* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name='set' '[' setVariables+=Statement* ']'
		public Group getGroup() { return cGroup; }
		
		//name='set'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'set'
		public Keyword getNameSetKeyword_0_0() { return cNameSetKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//setVariables+=Statement*
		public Assignment getSetVariablesAssignment_2() { return cSetVariablesAssignment_2; }
		
		//Statement
		public RuleCall getSetVariablesStatementParserRuleCall_2_0() { return cSetVariablesStatementParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameAssertKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssertVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAssertVariablesStatementParserRuleCall_2_0 = (RuleCall)cAssertVariablesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assert:
		//	name='assert' '[' assertVariables+=Statement* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name='assert' '[' assertVariables+=Statement* ']'
		public Group getGroup() { return cGroup; }
		
		//name='assert'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'assert'
		public Keyword getNameAssertKeyword_0_0() { return cNameAssertKeyword_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//assertVariables+=Statement*
		public Assignment getAssertVariablesAssignment_2() { return cAssertVariablesAssignment_2; }
		
		//Statement
		public RuleCall getAssertVariablesStatementParserRuleCall_2_0() { return cAssertVariablesStatementParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariablesCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariablesIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariablesCrossReference_0_0.eContents().get(1);
		private final Assignment cCascadeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCascadeCascadeParserRuleCall_1_0 = (RuleCall)cCascadeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIdiomAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdiomIdiomParserRuleCall_3_0 = (RuleCall)cIdiomAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPlusSignSolidusHyphenMinusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRangeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRangeIdiomParserRuleCall_4_1_0 = (RuleCall)cRangeAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Statement:
		//	variable=[Variables] cascade+=Cascade* '=' idiom=Idiom ('+/-' range=Idiom)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variables] cascade+=Cascade* '=' idiom=Idiom ('+/-' range=Idiom)? ';'
		public Group getGroup() { return cGroup; }
		
		//variable=[Variables]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Variables]
		public CrossReference getVariableVariablesCrossReference_0_0() { return cVariableVariablesCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableVariablesIDTerminalRuleCall_0_0_1() { return cVariableVariablesIDTerminalRuleCall_0_0_1; }
		
		//cascade+=Cascade*
		public Assignment getCascadeAssignment_1() { return cCascadeAssignment_1; }
		
		//Cascade
		public RuleCall getCascadeCascadeParserRuleCall_1_0() { return cCascadeCascadeParserRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//idiom=Idiom
		public Assignment getIdiomAssignment_3() { return cIdiomAssignment_3; }
		
		//Idiom
		public RuleCall getIdiomIdiomParserRuleCall_3_0() { return cIdiomIdiomParserRuleCall_3_0; }
		
		//('+/-' range=Idiom)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'+/-'
		public Keyword getPlusSignSolidusHyphenMinusKeyword_4_0() { return cPlusSignSolidusHyphenMinusKeyword_4_0; }
		
		//range=Idiom
		public Assignment getRangeAssignment_4_1() { return cRangeAssignment_4_1; }
		
		//Idiom
		public RuleCall getRangeIdiomParserRuleCall_4_1_0() { return cRangeIdiomParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class CascadeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.Cascade");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUdtVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUdtVarVariablesCrossReference_1_0 = (CrossReference)cUdtVarAssignment_1.eContents().get(0);
		private final RuleCall cUdtVarVariablesIDTerminalRuleCall_1_0_1 = (RuleCall)cUdtVarVariablesCrossReference_1_0.eContents().get(1);
		
		//Cascade:
		//	'.' udtVar=[Variables];
		@Override public ParserRule getRule() { return rule; }
		
		//'.' udtVar=[Variables]
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//udtVar=[Variables]
		public Assignment getUdtVarAssignment_1() { return cUdtVarAssignment_1; }
		
		//[Variables]
		public CrossReference getUdtVarVariablesCrossReference_1_0() { return cUdtVarVariablesCrossReference_1_0; }
		
		//ID
		public RuleCall getUdtVarVariablesIDTerminalRuleCall_1_0_1() { return cUdtVarVariablesIDTerminalRuleCall_1_0_1; }
	}
	
	public class BasicTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNULLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNULLNullKeyword_0_0 = (Keyword)cNULLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTIntKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOLBoolKeyword_2_0 = (Keyword)cBOOLEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cREALRealKeyword_3_0 = (Keyword)cREALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSTRINGStringKeyword_4_0 = (Keyword)cSTRINGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cCHARCharKeyword_5_0 = (Keyword)cCHAREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBYTEByteKeyword_6_0 = (Keyword)cBYTEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cWORDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cWORDWordKeyword_7_0 = (Keyword)cWORDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDWORDEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDWORDDwordKeyword_8_0 = (Keyword)cDWORDEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLWORDEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLWORDLwordKeyword_9_0 = (Keyword)cLWORDEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cUSINTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cUSINTUsintKeyword_10_0 = (Keyword)cUSINTEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cUINTEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cUINTUintKeyword_11_0 = (Keyword)cUINTEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUDINTEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUDINTUdintKeyword_12_0 = (Keyword)cUDINTEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cULINTEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cULINTUlintKeyword_13_0 = (Keyword)cULINTEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cSINTEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cSINTSintKeyword_14_0 = (Keyword)cSINTEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cDINTEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cDINTDintKeyword_15_0 = (Keyword)cDINTEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cLINTEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cLINTLintKeyword_16_0 = (Keyword)cLINTEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cTIMETimeKeyword_17_0 = (Keyword)cTIMEEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cLTIMEEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cLTIMELtimeKeyword_18_0 = (Keyword)cLTIMEEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cDATEDateKeyword_19_0 = (Keyword)cDATEEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cLREALEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cLREALLrealKeyword_20_0 = (Keyword)cLREALEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cWCHAREnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cWCHARWcharKeyword_21_0 = (Keyword)cWCHAREnumLiteralDeclaration_21.eContents().get(0);
		
		//enum BasicType:
		//	NULL='null'
		//	| INT='int'
		//	| BOOL='bool'
		//	| REAL='real' //
		//	| STRING='string'
		//	| CHAR="char"
		//	//
		//	| BYTE="byte"
		//	| WORD="word"
		//	| DWORD="dword"
		//	| LWORD="lword"
		//	//
		//	| USINT="usint"
		//	| UINT="uint"
		//	| UDINT="udint"
		//	| ULINT="ulint"
		//	| SINT="sint"
		//	| DINT="dint"
		//	| LINT="lint"
		//	//
		//	| TIME="time"
		//	| LTIME="ltime"
		//	| DATE="date"
		//	| LREAL="lreal"
		//	| WCHAR="wchar";
		public EnumRule getRule() { return rule; }
		
		//NULL='null' | INT='int' | BOOL='bool' | REAL='real' //
		//| STRING='string' | CHAR="char" //
		//| BYTE="byte" | WORD="word" | DWORD="dword" | LWORD="lword" //
		//| USINT="usint" | UINT="uint" | UDINT="udint" | ULINT="ulint" | SINT="sint" | DINT="dint" | LINT="lint" //
		//| TIME="time" | LTIME="ltime" | DATE="date" | LREAL="lreal" | WCHAR="wchar"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NULL='null'
		public EnumLiteralDeclaration getNULLEnumLiteralDeclaration_0() { return cNULLEnumLiteralDeclaration_0; }
		
		//'null'
		public Keyword getNULLNullKeyword_0_0() { return cNULLNullKeyword_0_0; }
		
		//INT='int'
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//'int'
		public Keyword getINTIntKeyword_1_0() { return cINTIntKeyword_1_0; }
		
		//BOOL='bool'
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_2() { return cBOOLEnumLiteralDeclaration_2; }
		
		//'bool'
		public Keyword getBOOLBoolKeyword_2_0() { return cBOOLBoolKeyword_2_0; }
		
		//REAL='real'
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_3() { return cREALEnumLiteralDeclaration_3; }
		
		//'real'
		public Keyword getREALRealKeyword_3_0() { return cREALRealKeyword_3_0; }
		
		//STRING='string'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_4() { return cSTRINGEnumLiteralDeclaration_4; }
		
		//'string'
		public Keyword getSTRINGStringKeyword_4_0() { return cSTRINGStringKeyword_4_0; }
		
		//CHAR="char"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_5() { return cCHAREnumLiteralDeclaration_5; }
		
		//"char"
		public Keyword getCHARCharKeyword_5_0() { return cCHARCharKeyword_5_0; }
		
		//BYTE="byte"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_6() { return cBYTEEnumLiteralDeclaration_6; }
		
		//"byte"
		public Keyword getBYTEByteKeyword_6_0() { return cBYTEByteKeyword_6_0; }
		
		//WORD="word"
		public EnumLiteralDeclaration getWORDEnumLiteralDeclaration_7() { return cWORDEnumLiteralDeclaration_7; }
		
		//"word"
		public Keyword getWORDWordKeyword_7_0() { return cWORDWordKeyword_7_0; }
		
		//DWORD="dword"
		public EnumLiteralDeclaration getDWORDEnumLiteralDeclaration_8() { return cDWORDEnumLiteralDeclaration_8; }
		
		//"dword"
		public Keyword getDWORDDwordKeyword_8_0() { return cDWORDDwordKeyword_8_0; }
		
		//LWORD="lword"
		public EnumLiteralDeclaration getLWORDEnumLiteralDeclaration_9() { return cLWORDEnumLiteralDeclaration_9; }
		
		//"lword"
		public Keyword getLWORDLwordKeyword_9_0() { return cLWORDLwordKeyword_9_0; }
		
		//USINT="usint"
		public EnumLiteralDeclaration getUSINTEnumLiteralDeclaration_10() { return cUSINTEnumLiteralDeclaration_10; }
		
		//"usint"
		public Keyword getUSINTUsintKeyword_10_0() { return cUSINTUsintKeyword_10_0; }
		
		//UINT="uint"
		public EnumLiteralDeclaration getUINTEnumLiteralDeclaration_11() { return cUINTEnumLiteralDeclaration_11; }
		
		//"uint"
		public Keyword getUINTUintKeyword_11_0() { return cUINTUintKeyword_11_0; }
		
		//UDINT="udint"
		public EnumLiteralDeclaration getUDINTEnumLiteralDeclaration_12() { return cUDINTEnumLiteralDeclaration_12; }
		
		//"udint"
		public Keyword getUDINTUdintKeyword_12_0() { return cUDINTUdintKeyword_12_0; }
		
		//ULINT="ulint"
		public EnumLiteralDeclaration getULINTEnumLiteralDeclaration_13() { return cULINTEnumLiteralDeclaration_13; }
		
		//"ulint"
		public Keyword getULINTUlintKeyword_13_0() { return cULINTUlintKeyword_13_0; }
		
		//SINT="sint"
		public EnumLiteralDeclaration getSINTEnumLiteralDeclaration_14() { return cSINTEnumLiteralDeclaration_14; }
		
		//"sint"
		public Keyword getSINTSintKeyword_14_0() { return cSINTSintKeyword_14_0; }
		
		//DINT="dint"
		public EnumLiteralDeclaration getDINTEnumLiteralDeclaration_15() { return cDINTEnumLiteralDeclaration_15; }
		
		//"dint"
		public Keyword getDINTDintKeyword_15_0() { return cDINTDintKeyword_15_0; }
		
		//LINT="lint"
		public EnumLiteralDeclaration getLINTEnumLiteralDeclaration_16() { return cLINTEnumLiteralDeclaration_16; }
		
		//"lint"
		public Keyword getLINTLintKeyword_16_0() { return cLINTLintKeyword_16_0; }
		
		//TIME="time"
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_17() { return cTIMEEnumLiteralDeclaration_17; }
		
		//"time"
		public Keyword getTIMETimeKeyword_17_0() { return cTIMETimeKeyword_17_0; }
		
		//LTIME="ltime"
		public EnumLiteralDeclaration getLTIMEEnumLiteralDeclaration_18() { return cLTIMEEnumLiteralDeclaration_18; }
		
		//"ltime"
		public Keyword getLTIMELtimeKeyword_18_0() { return cLTIMELtimeKeyword_18_0; }
		
		//DATE="date"
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_19() { return cDATEEnumLiteralDeclaration_19; }
		
		//"date"
		public Keyword getDATEDateKeyword_19_0() { return cDATEDateKeyword_19_0; }
		
		//LREAL="lreal"
		public EnumLiteralDeclaration getLREALEnumLiteralDeclaration_20() { return cLREALEnumLiteralDeclaration_20; }
		
		//"lreal"
		public Keyword getLREALLrealKeyword_20_0() { return cLREALLrealKeyword_20_0; }
		
		//WCHAR="wchar"
		public EnumLiteralDeclaration getWCHAREnumLiteralDeclaration_21() { return cWCHAREnumLiteralDeclaration_21; }
		
		//"wchar"
		public Keyword getWCHARWcharKeyword_21_0() { return cWCHARWcharKeyword_21_0; }
	}
	
	private final EisModelElements pEisModel;
	private final TestcaseElements pTestcase;
	private final TestblockElements pTestblock;
	private final BoolConstantElements pBoolConstant;
	private final BlockConstantElements pBlockConstant;
	private final BlockValueElements pBlockValue;
	private final BooleanValueElements pBooleanValue;
	private final DefineBlockElements pDefineBlock;
	private final DirectionBlockElements pDirectionBlock;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final InOutElements pInOut;
	private final VariablesElements pVariables;
	private final VariableElements pVariable;
	private final UdtElements pUdt;
	private final UdtRefElements pUdtRef;
	private final BasicTypeElements eBasicType;
	private final UdtTypeElements pUdtType;
	private final IdiomElements pIdiom;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final TeststepBlockElements pTeststepBlock;
	private final AssertionBlockElements pAssertionBlock;
	private final SetElements pSet;
	private final AssertElements pAssert;
	private final StatementElements pStatement;
	private final CascadeElements pCascade;
	private final TerminalRule tX;
	private final TerminalRule tHEX;
	private final TerminalRule tLONG;
	private final TerminalRule tNEGATIVE_LONG;
	private final TerminalRule tREAL;
	private final TerminalRule tBYTE;
	private final TerminalRule tWORD;
	private final TerminalRule tDWORD;
	private final TerminalRule tLWORD;
	private final TerminalRule tDATE;
	private final TerminalRule tCHAR;
	private final TerminalRule tTIME;
	private final TerminalRule tLTIME;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public EisGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pEisModel = new EisModelElements();
		this.pTestcase = new TestcaseElements();
		this.pTestblock = new TestblockElements();
		this.pBoolConstant = new BoolConstantElements();
		this.pBlockConstant = new BlockConstantElements();
		this.pBlockValue = new BlockValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pDefineBlock = new DefineBlockElements();
		this.pDirectionBlock = new DirectionBlockElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pInOut = new InOutElements();
		this.pVariables = new VariablesElements();
		this.pVariable = new VariableElements();
		this.pUdt = new UdtElements();
		this.pUdtRef = new UdtRefElements();
		this.eBasicType = new BasicTypeElements();
		this.pUdtType = new UdtTypeElements();
		this.pIdiom = new IdiomElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pTeststepBlock = new TeststepBlockElements();
		this.pAssertionBlock = new AssertionBlockElements();
		this.pSet = new SetElements();
		this.pAssert = new AssertElements();
		this.pStatement = new StatementElements();
		this.pCascade = new CascadeElements();
		this.tX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.X");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.HEX");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.LONG");
		this.tNEGATIVE_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.NEGATIVE_LONG");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.REAL");
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.BYTE");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.WORD");
		this.tDWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.DWORD");
		this.tLWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.LWORD");
		this.tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.DATE");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.CHAR");
		this.tTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.TIME");
		this.tLTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.LTIME");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.eis.Eis.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.eis.Eis".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//EisModel:
	//	'project' '=' project_name=STRING ';'
	//	'plcname' '=' plc_name=STRING ';'
	//	'author' '=' author_name=STRING ';'
	//	testcases+=Testcase*;
	public EisModelElements getEisModelAccess() {
		return pEisModel;
	}
	
	public ParserRule getEisModelRule() {
		return getEisModelAccess().getRule();
	}
	
	//Testcase:
	//	"testcase" testcase_name=ID '{'
	//	testblock=Testblock?
	//	'}';
	public TestcaseElements getTestcaseAccess() {
		return pTestcase;
	}
	
	public ParserRule getTestcaseRule() {
		return getTestcaseAccess().getRule();
	}
	
	//Testblock:
	//	'testActive' '=' testActive=BoolConstant ';'
	//	'blockType' '=' blockType=BlockConstant ';'
	//	'description' '=' description=STRING ';'
	//	define=DefineBlock?;
	public TestblockElements getTestblockAccess() {
		return pTestblock;
	}
	
	public ParserRule getTestblockRule() {
		return getTestblockAccess().getRule();
	}
	
	//BoolConstant:
	//	value=BooleanValue;
	public BoolConstantElements getBoolConstantAccess() {
		return pBoolConstant;
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}
	
	//BlockConstant:
	//	value=BlockValue;
	public BlockConstantElements getBlockConstantAccess() {
		return pBlockConstant;
	}
	
	public ParserRule getBlockConstantRule() {
		return getBlockConstantAccess().getRule();
	}
	
	//BlockValue:
	//	'FC' | 'FB';
	public BlockValueElements getBlockValueAccess() {
		return pBlockValue;
	}
	
	public ParserRule getBlockValueRule() {
		return getBlockValueAccess().getRule();
	}
	
	//BooleanValue:
	//	'true' | 'false';
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//DefineBlock:
	//	'define' '{' direction=DirectionBlock '}' teststeps+=TeststepBlock*;
	public DefineBlockElements getDefineBlockAccess() {
		return pDefineBlock;
	}
	
	public ParserRule getDefineBlockRule() {
		return getDefineBlockAccess().getRule();
	}
	
	//DirectionBlock:
	//	input=Input & output=Output & inout=InOut?;
	public DirectionBlockElements getDirectionBlockAccess() {
		return pDirectionBlock;
	}
	
	public ParserRule getDirectionBlockRule() {
		return getDirectionBlockAccess().getRule();
	}
	
	//Input:
	//	name='input' '[' inputVariables+=Variables* ']';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	name='output' '[' outputVariables+=Variables* ']';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//InOut:
	//	name='inout' '[' inoutVariables+=Variables* ']';
	public InOutElements getInOutAccess() {
		return pInOut;
	}
	
	public ParserRule getInOutRule() {
		return getInOutAccess().getRule();
	}
	
	//Variables:
	//	Variable | Udt | UdtRef;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//Variable:
	//	{Variable} variantKeyword?='variant'? variableType=BasicType? name=ID ('=' idiom=Idiom ('+/-'
	//	range=Idiom)?)? (';' | nextVariable?=',');
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Udt:
	//	'udt' name=ID '(' udtType=UdtType ')' '{' udtVariables+=Variables* '}';
	public UdtElements getUdtAccess() {
		return pUdt;
	}
	
	public ParserRule getUdtRule() {
		return getUdtAccess().getRule();
	}
	
	//UdtRef:
	//	udtType=[UdtType] name=ID udtVariables+=Variables* ';';
	public UdtRefElements getUdtRefAccess() {
		return pUdtRef;
	}
	
	public ParserRule getUdtRefRule() {
		return getUdtRefAccess().getRule();
	}
	
	//enum BasicType:
	//	NULL='null'
	//	| INT='int'
	//	| BOOL='bool'
	//	| REAL='real' //
	//	| STRING='string'
	//	| CHAR="char"
	//	//
	//	| BYTE="byte"
	//	| WORD="word"
	//	| DWORD="dword"
	//	| LWORD="lword"
	//	//
	//	| USINT="usint"
	//	| UINT="uint"
	//	| UDINT="udint"
	//	| ULINT="ulint"
	//	| SINT="sint"
	//	| DINT="dint"
	//	| LINT="lint"
	//	//
	//	| TIME="time"
	//	| LTIME="ltime"
	//	| DATE="date"
	//	| LREAL="lreal"
	//	| WCHAR="wchar";
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	////
	//UdtType:
	//	name=ID;
	public UdtTypeElements getUdtTypeAccess() {
		return pUdtType;
	}
	
	public ParserRule getUdtTypeRule() {
		return getUdtTypeAccess().getRule();
	}
	
	//Idiom:
	//	Or;
	public IdiomElements getIdiomAccess() {
		return pIdiom;
	}
	
	public ParserRule getIdiomRule() {
		return getIdiomAccess().getRule();
	}
	
	//Or Idiom:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Idiom:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Idiom:
	//	Comparison ({Equality.left=current} op=("==" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Idiom:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Idiom:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Idiom:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Idiom:
	//	'(' Idiom ')' | {Not} "!" idiom=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Idiom:
	//	{IntConstant} value=(LONG | NEGATIVE_LONG) | {StringConstant} value=STRING
	//	| BoolConstant
	//	| {VariableRef} variable=[Variable] | {RealConstant} value=REAL
	//	| {ByteConstant} value=BYTE
	//	| {WordConstant} value=WORD
	//	| {DWordConstant} value=DWORD
	//	| {LWordConstant} value=LWORD
	//	| {CharConstant} value=CHAR
	//	| {TimeConstant} value=TIME
	//	| {LTimeConstant} value=LTIME
	//	| {DateConstant} value=DATE;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//TeststepBlock:
	//	'teststep' '(' plcCycle=LONG ',' description=STRING ')' '{' assertion=AssertionBlock '}';
	public TeststepBlockElements getTeststepBlockAccess() {
		return pTeststepBlock;
	}
	
	public ParserRule getTeststepBlockRule() {
		return getTeststepBlockAccess().getRule();
	}
	
	//AssertionBlock:
	//	set=Set & assert=Assert;
	public AssertionBlockElements getAssertionBlockAccess() {
		return pAssertionBlock;
	}
	
	public ParserRule getAssertionBlockRule() {
		return getAssertionBlockAccess().getRule();
	}
	
	//Set:
	//	name='set' '[' setVariables+=Statement* ']';
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//Assert:
	//	name='assert' '[' assertVariables+=Statement* ']';
	public AssertElements getAssertAccess() {
		return pAssert;
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}
	
	//Statement:
	//	variable=[Variables] cascade+=Cascade* '=' idiom=Idiom ('+/-' range=Idiom)? ';';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Cascade:
	//	'.' udtVar=[Variables];
	public CascadeElements getCascadeAccess() {
		return pCascade;
	}
	
	public ParserRule getCascadeRule() {
		return getCascadeAccess().getRule();
	}
	
	//terminal fragment X:
	//	'0'..'9';
	public TerminalRule getXRule() {
		return tX;
	}
	
	//terminal fragment HEX:
	//	X | 'A'..'F' | 'a'..'f';
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal LONG returns ecore::ELong:
	//	X+;
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal NEGATIVE_LONG returns ecore::ELong:
	//	'-' LONG;
	public TerminalRule getNEGATIVE_LONGRule() {
		return tNEGATIVE_LONG;
	}
	
	//terminal REAL:
	//	(LONG | NEGATIVE_LONG) '.' LONG (('e' | 'E') ('-' | '+')? ((X? X)? X))?;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal BYTE:
	//	'16#' HEX HEX;
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal WORD:
	//	'16#' HEX HEX HEX HEX;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal DWORD:
	//	'16#' HEX HEX HEX HEX '_' HEX HEX HEX HEX;
	public TerminalRule getDWORDRule() {
		return tDWORD;
	}
	
	//terminal LWORD:
	//	'16#' HEX HEX HEX HEX '_' HEX HEX HEX HEX '_' HEX HEX HEX HEX '_' HEX HEX HEX HEX;
	public TerminalRule getLWORDRule() {
		return tLWORD;
	}
	
	//terminal DATE:
	//	'D#' X X X X '-' X X '-' X X;
	public TerminalRule getDATERule() {
		return tDATE;
	}
	
	//terminal CHAR:
	//	"'" ('a'..'z' | 'A'..'Z' | '0'..'9') "'";
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal TIME:
	//	'T#' '-'? (X? X 'd' '_'?)? (X? X 'h' '_'?)? (X? X 'M' '_'?)? (X? X 's' '_'?)? ((X? X)? X 'ms')?;
	public TerminalRule getTIMERule() {
		return tTIME;
	}
	
	//terminal LTIME:
	//	'LT#' '-'? (((((X? X)? X)? X)? X)? X 'd' '_'?)? (X? X 'h' '_'?)? (X? X 'M' '_'?)? (X? X 's' '_'?)? ((X? X)? X 'ms'
	//	'_'?)? ((X? X)? X 'us' '_'?)? ((X? X)? X 'ns')?;
	public TerminalRule getLTIMERule() {
		return tLTIME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
