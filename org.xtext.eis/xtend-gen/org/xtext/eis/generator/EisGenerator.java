/**
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.eis.EisModelUtil;
import org.xtext.eis.eis.BasicType;
import org.xtext.eis.eis.Cascade;
import org.xtext.eis.eis.DefineBlock;
import org.xtext.eis.eis.DirectionBlock;
import org.xtext.eis.eis.EisModel;
import org.xtext.eis.eis.Idiom;
import org.xtext.eis.eis.InOut;
import org.xtext.eis.eis.Input;
import org.xtext.eis.eis.Output;
import org.xtext.eis.eis.Statement;
import org.xtext.eis.eis.Testblock;
import org.xtext.eis.eis.Testcase;
import org.xtext.eis.eis.TeststepBlock;
import org.xtext.eis.eis.Udt;
import org.xtext.eis.eis.UdtRef;
import org.xtext.eis.eis.Variable;
import org.xtext.eis.eis.Variables;
import org.xtext.eis.eis.impl.UdtImpl;
import org.xtext.eis.eis.impl.UdtTypeImpl;
import org.xtext.eis.eis.impl.VariableImpl;
import org.xtext.eis.interpreter.EisInterpreter;
import org.xtext.eis.typing.DefineType;
import org.xtext.eis.typing.DefineTypeComputer;

@SuppressWarnings("all")
public class EisGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private EisInterpreter _eisInterpreter;
  
  @Inject
  @Extension
  private DefineTypeComputer _defineTypeComputer;
  
  @Inject
  @Extension
  private EisModelUtil _eisModelUtil;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final EisModel model = IterableExtensions.<EisModel>head(Iterables.<EisModel>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), EisModel.class));
    StringConcatenation _builder = new StringConcatenation();
    String _plc_name = model.getPlc_name();
    _builder.append(_plc_name);
    _builder.append("_Testfixture.xml");
    fsa.generateFile(_builder.toString(), this.compile(model));
  }
  
  private CharSequence compile(final EisModel model) {
    CharSequence _xblockexpression = null;
    {
      int testcaseID = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
      _builder.newLine();
      _builder.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<TiaProjectName>");
      String _project_name = model.getProject_name();
      _builder.append(_project_name, "\t");
      _builder.append("</TiaProjectName>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<PlcName>");
      String _plc_name = model.getPlc_name();
      _builder.append(_plc_name, "\t");
      _builder.append("</PlcName>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<Author>");
      String _author_name = model.getAuthor_name();
      _builder.append(_author_name, "\t");
      _builder.append("</Author>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<TestCases>");
      _builder.newLine();
      {
        EList<Testcase> _testcases = model.getTestcases();
        for(final Testcase testcases : _testcases) {
          Testblock _testblock = null;
          if (testcases!=null) {
            _testblock=testcases.getTestblock();
          }
          final Testblock testblock = _testblock;
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("<TestCase ID=\"");
          int _plusPlus = testcaseID++;
          _builder.append(_plusPlus, "\t\t");
          _builder.append("\"");
          {
            if ((testblock != null)) {
              _builder.append(" TestActive=\"");
              String _value = testblock.getTestActive().getValue();
              _builder.append(_value, "\t\t");
              _builder.append("\" Blockname=\"");
              String _testcase_name = testcases.getTestcase_name();
              _builder.append(_testcase_name, "\t\t");
              _builder.append("\" Blocktype=\"");
              String _value_1 = testblock.getBlockType().getValue();
              _builder.append(_value_1, "\t\t");
              _builder.append("\" Description=\"");
              String _description = testblock.getDescription();
              _builder.append(_description, "\t\t");
              _builder.append("\"");
            }
          }
          _builder.append(">");
          _builder.newLineIfNotEmpty();
          {
            DefineBlock _define = null;
            if (testblock!=null) {
              _define=testblock.getDefine();
            }
            boolean _tripleNotEquals = (_define != null);
            if (_tripleNotEquals) {
              CharSequence _compileTeststeps = this.compileTeststeps(testblock.getDefine());
              _builder.append(_compileTeststeps);
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          _builder.append("</TestCase>");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.append("</TestCases>");
      _builder.newLine();
      _builder.append("</TestFixture>");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  private CharSequence compileTeststeps(final DefineBlock define) {
    EList<TeststepBlock> _teststeps = null;
    if (define!=null) {
      _teststeps=define.getTeststeps();
    }
    final EList<TeststepBlock> steps = _teststeps;
    final EList<Variables> inputs = define.getDirection().getInput().getInputVariables();
    final EList<Variables> outputs = define.getDirection().getOutput().getOutputVariables();
    DirectionBlock _direction = define.getDirection();
    InOut _inout = null;
    if (_direction!=null) {
      _inout=_direction.getInout();
    }
    EList<Variables> _inoutVariables = null;
    if (_inout!=null) {
      _inoutVariables=_inout.getInoutVariables();
    }
    EList<Variables> inouts = _inoutVariables;
    final HashMap<Object, Object> inputMap = new HashMap<Object, Object>();
    final HashMap<Object, Object> outputIdiomMap = new HashMap<Object, Object>();
    final HashMap<Object, Object> outputRangeMap = new HashMap<Object, Object>();
    HashMap<Object, Object> setMap = new HashMap<Object, Object>();
    HashMap<Object, Object> assertIdiomMap = new HashMap<Object, Object>();
    HashMap<Object, Object> assertRangeMap = new HashMap<Object, Object>();
    final String oneTab = "\t";
    final String twoTabs = (oneTab + oneTab);
    final String fourTabs = (twoTabs + twoTabs);
    final String fiveTabs = (fourTabs + oneTab);
    final String sixTabs = (fourTabs + twoTabs);
    boolean _isEmpty = inputs.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      this.generateMap(inputMap, inputs, "");
    }
    boolean _isEmpty_1 = outputs.isEmpty();
    boolean _not_1 = (!_isEmpty_1);
    if (_not_1) {
      this.generateMap(outputIdiomMap, outputs, "");
      this.generateRangeMap(outputRangeMap, outputs, "");
    }
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isEmpty_2 = steps.isEmpty();
      boolean _not_2 = (!_isEmpty_2);
      if (_not_2) {
        _builder.append((oneTab + twoTabs));
        _builder.append("<Teststeps>");
        _builder.newLineIfNotEmpty();
        {
          for(final TeststepBlock e : steps) {
            _builder.append(fourTabs);
            _builder.append("<Teststep PlcCycle =\"");
            int _intValue = Long.valueOf(e.getPlcCycle()).intValue();
            _builder.append(_intValue);
            _builder.append("\" Description=\"");
            String _description = e.getDescription();
            _builder.append(_description);
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append(fiveTabs);
            _builder.append("<Inputs>");
            _builder.newLineIfNotEmpty();
            setMap.clear();
            _builder.newLineIfNotEmpty();
            setMap.putAll(inputMap);
            _builder.newLineIfNotEmpty();
            this.overwriteInput(setMap, e);
            _builder.newLineIfNotEmpty();
            CharSequence _compileIn = this.compileIn(inputs, setMap, "", sixTabs);
            _builder.append(_compileIn);
            _builder.newLineIfNotEmpty();
            {
              if ((inouts != null)) {
                if (inouts!=null) {
                  inouts.clear();
                }
                _builder.newLineIfNotEmpty();
                {
                  List<Variables> _addInoutsInSet = this.addInoutsInSet(setMap, e);
                  boolean _add = Iterables.<Variables>addAll(inouts, _addInoutsInSet);
                  if (_add) {
                  }
                }
                {
                  if ((inouts != null)) {
                    CharSequence _compileIn_1 = this.compileIn(inouts, setMap, "", sixTabs);
                    _builder.append(_compileIn_1);
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append(fiveTabs);
            _builder.append("</Inputs>");
            _builder.newLineIfNotEmpty();
            _builder.append(fiveTabs);
            _builder.append("<Outputs>");
            _builder.newLineIfNotEmpty();
            assertIdiomMap.clear();
            _builder.newLineIfNotEmpty();
            assertRangeMap.clear();
            _builder.newLineIfNotEmpty();
            assertIdiomMap.putAll(outputIdiomMap);
            _builder.newLineIfNotEmpty();
            assertRangeMap.putAll(outputRangeMap);
            _builder.newLineIfNotEmpty();
            this.overwriteOutputIdiom(assertIdiomMap, e);
            _builder.newLineIfNotEmpty();
            this.overwriteOutputRange(assertRangeMap, e);
            _builder.newLineIfNotEmpty();
            CharSequence _compileOut = this.compileOut(outputs, assertIdiomMap, assertRangeMap, "", sixTabs);
            _builder.append(_compileOut);
            _builder.newLineIfNotEmpty();
            {
              if ((inouts != null)) {
                if (inouts!=null) {
                  inouts.clear();
                }
                _builder.newLineIfNotEmpty();
                {
                  List<Variables> _addInoutsInAssert = this.addInoutsInAssert(assertIdiomMap, assertRangeMap, e);
                  boolean _add_1 = Iterables.<Variables>addAll(inouts, _addInoutsInAssert);
                  if (_add_1) {
                  }
                }
                {
                  if ((inouts != null)) {
                    CharSequence _compileOut_1 = this.compileOut(inouts, assertIdiomMap, assertRangeMap, "", sixTabs);
                    _builder.append(_compileOut_1);
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append(fiveTabs);
            _builder.append("</Outputs>");
            _builder.newLineIfNotEmpty();
            _builder.append(fourTabs);
            _builder.append("</Teststep>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append((oneTab + twoTabs));
        _builder.append("</Teststeps>");
        _builder.newLineIfNotEmpty();
      }
    }
    final String multiLineString = _builder.toString();
    return multiLineString;
  }
  
  private CharSequence compileIn(final EList<Variables> variables, final HashMap<Object, Object> setMap, final String qualifiedName, final String indent) {
    String charSeq = "";
    for (final Variables variable : variables) {
      if ((variable instanceof Variable)) {
        String _name = ((Variable)variable).getName();
        String _plus = (qualifiedName + _name);
        final String value = setMap.get(_plus).toString();
        String _charSeq = charSeq;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<Element xsi:type=\"Input\" Name=\"");
        String _name_1 = ((Variable)variable).getName();
        _builder.append(_name_1);
        _builder.append("\" ");
        CharSequence _datatype = this.getDatatype(((Variable)variable));
        _builder.append(_datatype);
        _builder.append("\" Direction=\"");
        String _directionBlock = this.directionBlock(variable);
        _builder.append(_directionBlock);
        _builder.append("\" Value=\"");
        _builder.append(value);
        _builder.append("\" />");
        _builder.newLineIfNotEmpty();
        String _plus_1 = (indent + _builder);
        charSeq = (_charSeq + _plus_1);
      } else {
        if ((variable instanceof Udt)) {
          String _charSeq_1 = charSeq;
          CharSequence _buildUdt = this.buildUdt(setMap, qualifiedName, indent, ((Udt)variable));
          charSeq = (_charSeq_1 + _buildUdt);
        } else {
          if ((variable instanceof UdtRef)) {
            String _charSeq_2 = charSeq;
            CharSequence _buildUdtRef = this.buildUdtRef(setMap, qualifiedName, indent, ((UdtRef)variable));
            charSeq = (_charSeq_2 + _buildUdtRef);
          }
        }
      }
    }
    return charSeq;
  }
  
  private CharSequence buildUdt(final HashMap<Object, Object> setMap, final String qualifiedName, final String indent, final Udt udt) {
    String charSeq = "";
    final String tab = "\t";
    String _charSeq = charSeq;
    charSeq = (_charSeq + indent);
    String _charSeq_1 = charSeq;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Element xsi: type=\"InputUDT\" Name=\"");
    String _name = udt.getName();
    _builder.append(_name);
    _builder.append("\" ");
    charSeq = (_charSeq_1 + _builder);
    String _charSeq_2 = charSeq;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("Datatype=\"");
    String _name_1 = udt.getUdtType().getName();
    _builder_1.append(_name_1);
    _builder_1.append("\" ");
    charSeq = (_charSeq_2 + _builder_1);
    String _charSeq_3 = charSeq;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("Direction=\"");
    String _directionBlock = this.directionBlock(udt);
    _builder_2.append(_directionBlock);
    _builder_2.append("\">");
    _builder_2.newLineIfNotEmpty();
    charSeq = (_charSeq_3 + _builder_2);
    final String indentPlus = (indent + tab);
    String _charSeq_4 = charSeq;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("<Elements>");
    _builder_3.newLine();
    String _plus = (indentPlus + _builder_3);
    charSeq = (_charSeq_4 + _plus);
    final String indentPlusPlus = (indentPlus + tab);
    String _charSeq_5 = charSeq;
    EList<Variables> _udtVariables = udt.getUdtVariables();
    String _name_2 = udt.getName();
    String _plus_1 = (qualifiedName + _name_2);
    String _plus_2 = (_plus_1 + ".");
    CharSequence _compileIn = this.compileIn(_udtVariables, setMap, _plus_2, indentPlusPlus);
    charSeq = (_charSeq_5 + _compileIn);
    String _charSeq_6 = charSeq;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("</Elements>");
    _builder_4.newLine();
    String _plus_3 = (indentPlus + _builder_4);
    charSeq = (_charSeq_6 + _plus_3);
    String _charSeq_7 = charSeq;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("</Element>");
    _builder_5.newLine();
    String _plus_4 = (indent + _builder_5);
    charSeq = (_charSeq_7 + _plus_4);
    return charSeq;
  }
  
  private CharSequence buildUdtRef(final HashMap<Object, Object> setMap, final String qualifiedName, final String indent, final UdtRef udtRef) {
    String charSeq = "";
    final String tab = "\t";
    String _charSeq = charSeq;
    charSeq = (_charSeq + indent);
    String _charSeq_1 = charSeq;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Element xsi: type=\"InputUDT\" Name=\"");
    String _name = udtRef.getName();
    _builder.append(_name);
    _builder.append("\" Datatype=\"");
    String _string = udtRef.getUdtType().getName().toString();
    _builder.append(_string);
    _builder.append("\" Direction=\"");
    String _directionBlock = this.directionBlock(udtRef);
    _builder.append(_directionBlock);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    charSeq = (_charSeq_1 + _builder);
    final String indentPlus = (indent + tab);
    String _charSeq_2 = charSeq;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<Elements>");
    _builder_1.newLine();
    String _plus = (indentPlus + _builder_1);
    charSeq = (_charSeq_2 + _plus);
    final String indentPlusPlus = (indentPlus + tab);
    String _charSeq_3 = charSeq;
    EList<Variables> _udtVariables = udtRef.getUdtVariables();
    String _name_1 = udtRef.getName();
    String _plus_1 = (qualifiedName + _name_1);
    String _plus_2 = (_plus_1 + ".");
    CharSequence _compileIn = this.compileIn(_udtVariables, setMap, _plus_2, indentPlusPlus);
    charSeq = (_charSeq_3 + _compileIn);
    String _charSeq_4 = charSeq;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</Elements>");
    _builder_2.newLine();
    String _plus_3 = (indentPlus + _builder_2);
    charSeq = (_charSeq_4 + _plus_3);
    String _charSeq_5 = charSeq;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</Element>");
    _builder_3.newLine();
    String _plus_4 = (indent + _builder_3);
    charSeq = (_charSeq_5 + _plus_4);
    return charSeq;
  }
  
  private CharSequence compileOut(final EList<Variables> variables, final HashMap<Object, Object> idiomMap, final HashMap<Object, Object> rangeMap, final String qualifiedName, final String indent) {
    String charSeq = "";
    for (final Variables variable : variables) {
      if ((variable instanceof Variable)) {
        String _name = ((Variable)variable).getName();
        String _plus = (qualifiedName + _name);
        final String idiom = idiomMap.get(_plus).toString();
        String _name_1 = ((Variable)variable).getName();
        String _plus_1 = (qualifiedName + _name_1);
        final String range = rangeMap.get(_plus_1).toString();
        String _charSeq = charSeq;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<Element xsi:type=\"Output\" Name=\"");
        String _name_2 = ((Variable)variable).getName();
        _builder.append(_name_2);
        _builder.append("\" ");
        CharSequence _datatype = this.getDatatype(((Variable)variable));
        _builder.append(_datatype);
        _builder.append("\" Direction=\"");
        String _directionBlock = this.directionBlock(variable);
        _builder.append(_directionBlock);
        _builder.append("\" Expect=\"");
        _builder.append(idiom);
        _builder.append("\" Range=\"");
        _builder.append(range);
        _builder.append("\" />");
        _builder.newLineIfNotEmpty();
        String _plus_2 = (indent + _builder);
        charSeq = (_charSeq + _plus_2);
      } else {
        if ((variable instanceof Udt)) {
          String _charSeq_1 = charSeq;
          CharSequence _buildUdt = this.buildUdt(((Udt)variable), idiomMap, rangeMap, qualifiedName, indent);
          charSeq = (_charSeq_1 + _buildUdt);
        } else {
          if ((variable instanceof UdtRef)) {
            String _charSeq_2 = charSeq;
            CharSequence _buildUdtRef = this.buildUdtRef(((UdtRef)variable), idiomMap, rangeMap, qualifiedName, indent);
            charSeq = (_charSeq_2 + _buildUdtRef);
          }
        }
      }
    }
    return charSeq;
  }
  
  private CharSequence buildUdt(final Udt udt, final HashMap<Object, Object> idiomMap, final HashMap<Object, Object> rangeMap, final String qualifiedName, final String indent) {
    String charSeq = "";
    final String tab = "\t";
    String _charSeq = charSeq;
    charSeq = (_charSeq + indent);
    String _charSeq_1 = charSeq;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Element xsi: type=\"OutputUDT\" Name=\"");
    String _name = udt.getName();
    _builder.append(_name);
    _builder.append("\" ");
    charSeq = (_charSeq_1 + _builder);
    String _charSeq_2 = charSeq;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("Datatype=\"");
    String _name_1 = udt.getUdtType().getName();
    _builder_1.append(_name_1);
    _builder_1.append("\" ");
    charSeq = (_charSeq_2 + _builder_1);
    String _charSeq_3 = charSeq;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("Direction=\"");
    String _directionBlock = this.directionBlock(udt);
    _builder_2.append(_directionBlock);
    _builder_2.append("\">");
    _builder_2.newLineIfNotEmpty();
    charSeq = (_charSeq_3 + _builder_2);
    final String indentPlus = (indent + tab);
    String _charSeq_4 = charSeq;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("<Elements>");
    _builder_3.newLine();
    String _plus = (indentPlus + _builder_3);
    charSeq = (_charSeq_4 + _plus);
    final String indentPlusPlus = (indentPlus + tab);
    String _charSeq_5 = charSeq;
    EList<Variables> _udtVariables = udt.getUdtVariables();
    String _name_2 = udt.getName();
    String _plus_1 = (qualifiedName + _name_2);
    String _plus_2 = (_plus_1 + ".");
    CharSequence _compileOut = this.compileOut(_udtVariables, idiomMap, rangeMap, _plus_2, indentPlusPlus);
    charSeq = (_charSeq_5 + _compileOut);
    String _charSeq_6 = charSeq;
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("</Elements>");
    _builder_4.newLine();
    String _plus_3 = (indentPlus + _builder_4);
    charSeq = (_charSeq_6 + _plus_3);
    String _charSeq_7 = charSeq;
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("</Element>");
    _builder_5.newLine();
    String _plus_4 = (indent + _builder_5);
    charSeq = (_charSeq_7 + _plus_4);
    return charSeq;
  }
  
  private CharSequence buildUdtRef(final UdtRef udtRef, final HashMap<Object, Object> idiomMap, final HashMap<Object, Object> rangeMap, final String qualifiedName, final String indent) {
    String charSeq = "";
    final String tab = "\t";
    String _charSeq = charSeq;
    charSeq = (_charSeq + indent);
    String _charSeq_1 = charSeq;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Element xsi: type=\"OutputUDT\" Name=\"");
    String _name = udtRef.getName();
    _builder.append(_name);
    _builder.append("\" Datatype=\"");
    String _string = udtRef.getUdtType().getName().toString();
    _builder.append(_string);
    _builder.append("\" Direction=\"");
    String _directionBlock = this.directionBlock(udtRef);
    _builder.append(_directionBlock);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    charSeq = (_charSeq_1 + _builder);
    final String indentPlus = (indent + tab);
    String _charSeq_2 = charSeq;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("<Elements>");
    _builder_1.newLine();
    String _plus = (indentPlus + _builder_1);
    charSeq = (_charSeq_2 + _plus);
    final String indentPlusPlus = (indentPlus + tab);
    String _charSeq_3 = charSeq;
    EList<Variables> _udtVariables = udtRef.getUdtVariables();
    String _name_1 = udtRef.getName();
    String _plus_1 = (qualifiedName + _name_1);
    String _plus_2 = (_plus_1 + ".");
    CharSequence _compileOut = this.compileOut(_udtVariables, idiomMap, rangeMap, _plus_2, indentPlusPlus);
    charSeq = (_charSeq_3 + _compileOut);
    String _charSeq_4 = charSeq;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("</Elements>");
    _builder_2.newLine();
    String _plus_3 = (indentPlus + _builder_2);
    charSeq = (_charSeq_4 + _plus_3);
    String _charSeq_5 = charSeq;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</Element>");
    _builder_3.newLine();
    String _plus_4 = (indent + _builder_3);
    charSeq = (_charSeq_5 + _plus_4);
    return charSeq;
  }
  
  private CharSequence getDatatype(final Variable variable) {
    String _char = "";
    BasicType type = variable.getVariableType();
    String string = StringExtensions.toFirstUpper(type.toString());
    String __char = _char;
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Datatype=\"");
    _char = (__char + _builder);
    boolean _isVariantKeyword = variable.isVariantKeyword();
    if (_isVariantKeyword) {
      String __char_1 = _char;
      _char = (__char_1 + "Variant@");
    }
    boolean _isSecondLetterCapitalized = this._defineTypeComputer.isSecondLetterCapitalized(this._defineTypeComputer.typeFor(type));
    if (_isSecondLetterCapitalized) {
      string = this._eisModelUtil.toCharUpper(string, 1);
    }
    boolean _isThirdLetterCapitalized = this._defineTypeComputer.isThirdLetterCapitalized(this._defineTypeComputer.typeFor(type));
    if (_isThirdLetterCapitalized) {
      string = this._eisModelUtil.toCharUpper(string, 2);
    }
    String __char_2 = _char;
    _char = (__char_2 + string);
    return _char;
  }
  
  private void generateMap(final HashMap<Object, Object> map, final EList<Variables> variables, final String name) {
    for (final Variables variable : variables) {
      if ((variable instanceof Variable)) {
        String _name = ((Variable)variable).getName();
        String _plus = (name + _name);
        String _elvis = null;
        Idiom _idiom = null;
        if (((Variable)variable)!=null) {
          _idiom=((Variable)variable).getIdiom();
        }
        Object _interpret = null;
        if (_idiom!=null) {
          _interpret=this._eisInterpreter.interpret(_idiom);
        }
        String _string = null;
        if (_interpret!=null) {
          _string=_interpret.toString();
        }
        if (_string != null) {
          _elvis = _string;
        } else {
          String _defaultValue = this.defaultValue(((Variable)variable));
          _elvis = _defaultValue;
        }
        map.put(_plus, _elvis);
      } else {
        if ((variable instanceof Udt)) {
          EList<Variables> _udtVariables = ((Udt)variable).getUdtVariables();
          String _name_1 = ((Udt)variable).getName();
          String _plus_1 = (name + _name_1);
          String _plus_2 = (_plus_1 + ".");
          this.generateMap(map, _udtVariables, _plus_2);
        } else {
          if ((variable instanceof UdtRef)) {
            EList<Variables> _udtVariables_1 = ((UdtRef)variable).getUdtVariables();
            String _name_2 = ((UdtRef)variable).getName();
            String _plus_3 = (name + _name_2);
            String _plus_4 = (_plus_3 + ".");
            this.generateMap(map, _udtVariables_1, _plus_4);
          }
        }
      }
    }
  }
  
  private void generateRangeMap(final HashMap<Object, Object> map, final EList<Variables> variables, final String name) {
    for (final Variables variable : variables) {
      if ((variable instanceof Variable)) {
        String _name = ((Variable)variable).getName();
        String _plus = (name + _name);
        String _elvis = null;
        Idiom _range = null;
        if (((Variable)variable)!=null) {
          _range=((Variable)variable).getRange();
        }
        Object _interpret = null;
        if (_range!=null) {
          _interpret=this._eisInterpreter.interpret(_range);
        }
        String _string = null;
        if (_interpret!=null) {
          _string=_interpret.toString();
        }
        if (_string != null) {
          _elvis = _string;
        } else {
          _elvis = "";
        }
        map.put(_plus, _elvis);
      } else {
        if ((variable instanceof Udt)) {
          EList<Variables> _udtVariables = ((Udt)variable).getUdtVariables();
          String _name_1 = ((Udt)variable).getName();
          String _plus_1 = (name + _name_1);
          String _plus_2 = (_plus_1 + ".");
          this.generateRangeMap(map, _udtVariables, _plus_2);
        } else {
          if ((variable instanceof UdtRef)) {
            EList<Variables> _udtVariables_1 = ((UdtRef)variable).getUdtVariables();
            String _name_2 = ((UdtRef)variable).getName();
            String _plus_3 = (name + _name_2);
            String _plus_4 = (_plus_3 + ".");
            this.generateRangeMap(map, _udtVariables_1, _plus_4);
          }
        }
      }
    }
  }
  
  private String defaultValue(final Variable variable) {
    String _xblockexpression = null;
    {
      final DefineType type = this._defineTypeComputer.typeFor(variable.getVariableType());
      String _switchResult = null;
      boolean _matched = false;
      boolean _isBoolType = this._defineTypeComputer.isBoolType(type);
      if (_isBoolType) {
        _matched=true;
        _switchResult = "false";
      }
      if (!_matched) {
        boolean _isIntSuperType = this._defineTypeComputer.isIntSuperType(type);
        if (_isIntSuperType) {
          _matched=true;
          _switchResult = "0";
        }
      }
      if (!_matched) {
        boolean _isStringType = this._defineTypeComputer.isStringType(type);
        if (_isStringType) {
          _matched=true;
          _switchResult = "";
        }
      }
      if (!_matched) {
        boolean _isRealType = this._defineTypeComputer.isRealType(type);
        if (_isRealType) {
          _matched=true;
          _switchResult = "0.0";
        }
      }
      if (!_matched) {
        boolean _isByteType = this._defineTypeComputer.isByteType(type);
        if (_isByteType) {
          _matched=true;
          _switchResult = "16#00";
        }
      }
      if (!_matched) {
        boolean _isWordType = this._defineTypeComputer.isWordType(type);
        if (_isWordType) {
          _matched=true;
          _switchResult = "16#0000";
        }
      }
      if (!_matched) {
        boolean _isDWordType = this._defineTypeComputer.isDWordType(type);
        if (_isDWordType) {
          _matched=true;
          _switchResult = "16#0000_0000";
        }
      }
      if (!_matched) {
        boolean _isLWordType = this._defineTypeComputer.isLWordType(type);
        if (_isLWordType) {
          _matched=true;
          _switchResult = "16#0000_0000_0000_0000";
        }
      }
      if (!_matched) {
        _switchResult = "";
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  private void overwriteInput(final HashMap<Object, Object> setMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getSet().getSetVariables();
    String name = "";
    for (final Statement e : statements) {
      {
        name = this.buildName(e);
        String _directionBlock = this.directionBlock(e.getVariable().eContainer());
        boolean _equals = Objects.equal(_directionBlock, "InOut");
        boolean _not = (!_equals);
        if (_not) {
          boolean _containsKey = setMap.containsKey(name);
          if (_containsKey) {
            setMap.replace(name, this.checkIfIdiomNull(e));
          }
        }
      }
    }
  }
  
  private List<Variables> addInoutsInSet(final HashMap<Object, Object> setMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getSet().getSetVariables();
    LinkedList<Variables> inoutsInSet = new LinkedList<Variables>();
    for (final Statement e : statements) {
      String _directionBlock = this.directionBlock(e.getVariable().eContainer());
      boolean _equals = Objects.equal(_directionBlock, "InOut");
      if (_equals) {
        boolean _isEmpty = e.getCascade().isEmpty();
        if (_isEmpty) {
          VariableImpl newVariable = new VariableImpl();
          newVariable.setName(e.getVariable().getName());
          Variables _variable = e.getVariable();
          newVariable.setVariableType(((Variable) _variable).getVariableType());
          Variables _variable_1 = e.getVariable();
          newVariable.setVariantKeyword(((Variable) _variable_1).isVariantKeyword());
          inoutsInSet.add(newVariable);
        } else {
          UdtImpl newUdt = new UdtImpl();
          newUdt.setName(e.getVariable().getName());
          UdtTypeImpl newUdtType = new UdtTypeImpl();
          Variables _variable_2 = e.getVariable();
          if ((_variable_2 instanceof Udt)) {
            Variables _variable_3 = e.getVariable();
            newUdtType.setName(((Udt) _variable_3).getUdtType().getName());
          } else {
            Variables _variable_4 = e.getVariable();
            if ((_variable_4 instanceof UdtRef)) {
              Variables _variable_5 = e.getVariable();
              newUdtType.setName(((UdtRef) _variable_5).getUdtType().getName());
            }
          }
          newUdt.setUdtType(newUdtType);
          newUdt.getUdtVariables().add(this.generateUdtVariables(e.getCascade()));
          inoutsInSet.add(newUdt);
        }
        setMap.put(this.buildName(e), this.checkIfIdiomNull(e));
      }
    }
    return inoutsInSet;
  }
  
  private String checkIfIdiomNull(final Statement e) {
    Idiom _idiom = null;
    if (e!=null) {
      _idiom=e.getIdiom();
    }
    Object _interpret = null;
    if (_idiom!=null) {
      _interpret=this._eisInterpreter.interpret(_idiom);
    }
    String _string = null;
    if (_interpret!=null) {
      _string=_interpret.toString();
    }
    String idiom = _string;
    if ((idiom == null)) {
      boolean _isEmpty = e.getCascade().isEmpty();
      if (_isEmpty) {
        String _elvis = null;
        Variables _variable = e.getVariable();
        Idiom _idiom_1 = null;
        if (((Variable) _variable)!=null) {
          _idiom_1=((Variable) _variable).getIdiom();
        }
        Object _interpret_1 = null;
        if (_idiom_1!=null) {
          _interpret_1=this._eisInterpreter.interpret(_idiom_1);
        }
        String _string_1 = null;
        if (_interpret_1!=null) {
          _string_1=_interpret_1.toString();
        }
        if (_string_1 != null) {
          _elvis = _string_1;
        } else {
          _elvis = "";
        }
        idiom = _elvis;
      } else {
        String _elvis_1 = null;
        Variables _udtVar = IterableExtensions.<Cascade>last(e.getCascade()).getUdtVar();
        Idiom _idiom_2 = null;
        if (((Variable) _udtVar)!=null) {
          _idiom_2=((Variable) _udtVar).getIdiom();
        }
        Object _interpret_2 = null;
        if (_idiom_2!=null) {
          _interpret_2=this._eisInterpreter.interpret(_idiom_2);
        }
        String _string_2 = null;
        if (_interpret_2!=null) {
          _string_2=_interpret_2.toString();
        }
        if (_string_2 != null) {
          _elvis_1 = _string_2;
        } else {
          _elvis_1 = "";
        }
        idiom = _elvis_1;
      }
    }
    return idiom;
  }
  
  private String checkIfRangeNull(final Statement e) {
    Idiom _range = null;
    if (e!=null) {
      _range=e.getRange();
    }
    Object _interpret = null;
    if (_range!=null) {
      _interpret=this._eisInterpreter.interpret(_range);
    }
    String _string = null;
    if (_interpret!=null) {
      _string=_interpret.toString();
    }
    String range = _string;
    if ((range == null)) {
      boolean _isEmpty = e.getCascade().isEmpty();
      if (_isEmpty) {
        String _elvis = null;
        Variables _variable = e.getVariable();
        Idiom _range_1 = null;
        if (((Variable) _variable)!=null) {
          _range_1=((Variable) _variable).getRange();
        }
        Object _interpret_1 = null;
        if (_range_1!=null) {
          _interpret_1=this._eisInterpreter.interpret(_range_1);
        }
        String _string_1 = null;
        if (_interpret_1!=null) {
          _string_1=_interpret_1.toString();
        }
        if (_string_1 != null) {
          _elvis = _string_1;
        } else {
          _elvis = "";
        }
        range = _elvis;
      } else {
        String _elvis_1 = null;
        Variables _udtVar = IterableExtensions.<Cascade>last(e.getCascade()).getUdtVar();
        Idiom _range_2 = null;
        if (((Variable) _udtVar)!=null) {
          _range_2=((Variable) _udtVar).getRange();
        }
        Object _interpret_2 = null;
        if (_range_2!=null) {
          _interpret_2=this._eisInterpreter.interpret(_range_2);
        }
        String _string_2 = null;
        if (_interpret_2!=null) {
          _string_2=_interpret_2.toString();
        }
        if (_string_2 != null) {
          _elvis_1 = _string_2;
        } else {
          _elvis_1 = "";
        }
        range = _elvis_1;
      }
    }
    return range;
  }
  
  private List<Variables> addInoutsInAssert(final HashMap<Object, Object> assertIdiomMap, final HashMap<Object, Object> assertRangeMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getAssert().getAssertVariables();
    LinkedList<Variables> inoutsInAssert = new LinkedList<Variables>();
    for (final Statement e : statements) {
      String _directionBlock = this.directionBlock(e.getVariable().eContainer());
      boolean _equals = Objects.equal(_directionBlock, "InOut");
      if (_equals) {
        boolean _isEmpty = e.getCascade().isEmpty();
        if (_isEmpty) {
          VariableImpl newVariable = new VariableImpl();
          newVariable.setName(e.getVariable().getName());
          Variables _variable = e.getVariable();
          newVariable.setVariableType(((Variable) _variable).getVariableType());
          Variables _variable_1 = e.getVariable();
          newVariable.setVariantKeyword(((Variable) _variable_1).isVariantKeyword());
          inoutsInAssert.add(newVariable);
        } else {
          UdtImpl newUdt = new UdtImpl();
          newUdt.setName(e.getVariable().getName());
          UdtTypeImpl newUdtType = new UdtTypeImpl();
          Variables _variable_2 = e.getVariable();
          if ((_variable_2 instanceof Udt)) {
            Variables _variable_3 = e.getVariable();
            newUdtType.setName(((Udt) _variable_3).getUdtType().getName());
          } else {
            Variables _variable_4 = e.getVariable();
            if ((_variable_4 instanceof UdtRef)) {
              Variables _variable_5 = e.getVariable();
              newUdtType.setName(((UdtRef) _variable_5).getUdtType().getName());
            }
          }
          newUdt.setUdtType(newUdtType);
          newUdt.getUdtVariables().add(this.generateUdtVariables(e.getCascade()));
          inoutsInAssert.add(newUdt);
        }
        assertIdiomMap.put(this.buildName(e), this.checkIfIdiomNull(e));
        assertRangeMap.put(this.buildName(e), this.checkIfRangeNull(e));
      }
    }
    return inoutsInAssert;
  }
  
  private Variables generateUdtVariables(final Iterable<Cascade> cascade) {
    int _length = ((Object[])Conversions.unwrapArray(cascade, Object.class)).length;
    boolean _greaterThan = (_length > 1);
    if (_greaterThan) {
      UdtImpl newUdt = new UdtImpl();
      newUdt.setName(((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar().getName());
      UdtTypeImpl newUdtType = new UdtTypeImpl();
      Variables _udtVar = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
      if ((_udtVar instanceof Udt)) {
        Variables _udtVar_1 = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
        newUdtType.setName(((Udt) _udtVar_1).getUdtType().getName());
      } else {
        Variables _udtVar_2 = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
        if ((_udtVar_2 instanceof UdtRef)) {
          Variables _udtVar_3 = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
          newUdtType.setName(((UdtRef) _udtVar_3).getUdtType().getName());
        }
      }
      newUdt.setUdtType(newUdtType);
      newUdt.getUdtVariables().add(this.generateUdtVariables(IterableExtensions.<Cascade>drop(cascade, 1)));
      return newUdt;
    } else {
      VariableImpl newVariable = new VariableImpl();
      Variables _udtVar_4 = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
      newVariable.setName(((Variable) _udtVar_4).getName());
      Variables _udtVar_5 = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
      newVariable.setVariableType(((Variable) _udtVar_5).getVariableType());
      Variables _udtVar_6 = ((Cascade[])Conversions.unwrapArray(cascade, Cascade.class))[0].getUdtVar();
      newVariable.setVariantKeyword(((Variable) _udtVar_6).isVariantKeyword());
      return newVariable;
    }
  }
  
  private void overwriteOutputIdiom(final HashMap<Object, Object> idiomMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getAssert().getAssertVariables();
    String name = "";
    for (final Statement e : statements) {
      {
        name = this.buildName(e);
        String _directionBlock = this.directionBlock(e.getVariable().eContainer());
        boolean _equals = Objects.equal(_directionBlock, "InOut");
        boolean _not = (!_equals);
        if (_not) {
          boolean _containsKey = idiomMap.containsKey(name);
          if (_containsKey) {
            idiomMap.replace(name, this.checkIfIdiomNull(e));
          }
        }
      }
    }
  }
  
  private String buildName(final Statement e) {
    String name = e.getVariable().getName().toString();
    boolean _isEmpty = e.getCascade().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      EList<Cascade> _cascade = e.getCascade();
      for (final Cascade c : _cascade) {
        String _name = name;
        String _string = c.getUdtVar().getName().toString();
        String _plus = ("." + _string);
        name = (_name + _plus);
      }
    }
    return name;
  }
  
  private void overwriteOutputRange(final HashMap<Object, Object> rangeMap, final TeststepBlock teststep) {
    final EList<Statement> statements = teststep.getAssertion().getAssert().getAssertVariables();
    String name = "";
    for (final Statement e : statements) {
      {
        name = this.buildName(e);
        Idiom _range = null;
        if (e!=null) {
          _range=e.getRange();
        }
        boolean _tripleNotEquals = (_range != null);
        if (_tripleNotEquals) {
          EObject _eContainer = e.getVariable().eContainer();
          boolean _not = (!(_eContainer instanceof InOut));
          if (_not) {
            boolean _containsKey = rangeMap.containsKey(name);
            if (_containsKey) {
              rangeMap.replace(name, this.checkIfRangeNull(e));
            }
          }
        }
      }
    }
  }
  
  private String directionBlock(final EObject context) {
    String _xblockexpression = null;
    {
      EObject _eContainer = null;
      if (context!=null) {
        _eContainer=context.eContainer();
      }
      final EObject container = _eContainer;
      String _xifexpression = null;
      if ((container instanceof DirectionBlock)) {
        String _switchResult = null;
        boolean _matched = false;
        if (context instanceof Input) {
          _matched=true;
          _switchResult = "Input";
        }
        if (!_matched) {
          if (context instanceof Output) {
            _matched=true;
            _switchResult = "Output";
          }
        }
        if (!_matched) {
          if (context instanceof InOut) {
            _matched=true;
            _switchResult = "InOut";
          }
        }
        return _switchResult;
      } else {
        String _xifexpression_1 = null;
        if ((container == null)) {
          return "InOut";
        } else {
          _xifexpression_1 = this.directionBlock(container);
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
