/**
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.eis.eis.And;
import org.xtext.eis.eis.Assert;
import org.xtext.eis.eis.AssertionBlock;
import org.xtext.eis.eis.Comparison;
import org.xtext.eis.eis.DefineBlock;
import org.xtext.eis.eis.DirectionBlock;
import org.xtext.eis.eis.EisModel;
import org.xtext.eis.eis.EisPackage;
import org.xtext.eis.eis.Equality;
import org.xtext.eis.eis.Input;
import org.xtext.eis.eis.Minus;
import org.xtext.eis.eis.MulOrDiv;
import org.xtext.eis.eis.Not;
import org.xtext.eis.eis.Or;
import org.xtext.eis.eis.Output;
import org.xtext.eis.eis.Plus;
import org.xtext.eis.eis.Set;
import org.xtext.eis.eis.Statement;
import org.xtext.eis.eis.Testblock;
import org.xtext.eis.eis.Testcase;
import org.xtext.eis.eis.TeststepBlock;
import org.xtext.eis.eis.Udt;
import org.xtext.eis.eis.UdtRef;
import org.xtext.eis.eis.Variable;
import org.xtext.eis.services.EisGrammarAccess;

@SuppressWarnings("all")
public class EisFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EisGrammarAccess _eisGrammarAccess;
  
  protected void _format(final EisModel eisModel, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(eisModel).keyword("project"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(eisModel).feature(EisPackage.Literals.EIS_MODEL__PROJECT_NAME), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(eisModel).keyword(this._eisGrammarAccess.getEisModelAccess().getSemicolonKeyword_11()), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(eisModel).keyword("plcname"), _function_4), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(eisModel).feature(EisPackage.Literals.EIS_MODEL__PLC_NAME), _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(eisModel).keyword(this._eisGrammarAccess.getEisModelAccess().getSemicolonKeyword_3()), _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.setSpace("  ");
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(eisModel).keyword("author"), _function_8), _function_9);
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(eisModel).feature(EisPackage.Literals.EIS_MODEL__AUTHOR_NAME), _function_10);
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(eisModel).keyword(this._eisGrammarAccess.getEisModelAccess().getSemicolonKeyword_7()), _function_11);
    EList<Testcase> _testcases = eisModel.getTestcases();
    boolean _tripleNotEquals = (_testcases != null);
    if (_tripleNotEquals) {
      EList<Testcase> _testcases_1 = eisModel.getTestcases();
      for (final Testcase testcase : _testcases_1) {
        this.format(testcase, document);
      }
    }
  }
  
  protected void _format(final Testcase testcase, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(testcase).keyword("testcase"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(testcase).feature(EisPackage.Literals.TESTCASE__TESTCASE_NAME), _function_2);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(testcase).keyword(this._eisGrammarAccess.getTestcaseAccess().getLeftCurlyBracketKeyword_2());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(testcase).keyword(this._eisGrammarAccess.getTestcaseAccess().getRightCurlyBracketKeyword_4());
    Testblock _testblock = testcase.getTestblock();
    boolean _tripleNotEquals = (_testblock != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(open, _function_3);
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(close, _function_4);
      final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_5);
      this.format(testcase.getTestblock(), document);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.append(open, _function_6);
      final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(close, _function_7);
    }
  }
  
  protected void _format(final Testblock testblock, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setSpace("  ");
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(testblock).keyword(this._eisGrammarAccess.getTestblockAccess().getEqualsSignKeyword_1()), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(testblock).keyword(this._eisGrammarAccess.getTestblockAccess().getSemicolonKeyword_3()), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(testblock).keyword("blockType"), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.setSpace("   ");
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(testblock).keyword(this._eisGrammarAccess.getTestblockAccess().getEqualsSignKeyword_5()), _function_4), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(testblock).keyword(this._eisGrammarAccess.getTestblockAccess().getSemicolonKeyword_7()), _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(testblock).keyword("description"), _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(testblock).keyword(this._eisGrammarAccess.getTestblockAccess().getEqualsSignKeyword_9()), _function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(testblock).keyword(this._eisGrammarAccess.getTestblockAccess().getSemicolonKeyword_11()), _function_9);
    DefineBlock _define = testblock.getDefine();
    boolean _tripleNotEquals = (_define != null);
    if (_tripleNotEquals) {
      this.format(testblock.getDefine(), document);
    }
  }
  
  protected void _format(final DefineBlock defineblock, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.append(this.textRegionExtensions.regionFor(defineblock).keyword("define"), _function);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(defineblock).keyword(this._eisGrammarAccess.getDefineBlockAccess().getLeftCurlyBracketKeyword_1());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(defineblock).keyword(this._eisGrammarAccess.getDefineBlockAccess().getRightCurlyBracketKeyword_3());
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_3);
    this.format(defineblock.getDirection(), document);
    EList<TeststepBlock> _teststeps = defineblock.getTeststeps();
    boolean _tripleNotEquals = (_teststeps != null);
    if (_tripleNotEquals) {
      EList<TeststepBlock> _teststeps_1 = defineblock.getTeststeps();
      for (final TeststepBlock teststep : _teststeps_1) {
        this.format(teststep, document);
      }
    }
  }
  
  protected void _format(final DirectionBlock directionblock, @Extension final IFormattableDocument document) {
    document.<DirectionBlock>format(directionblock);
  }
  
  protected void _format(final Input input, @Extension final IFormattableDocument document) {
    document.<Input>format(input);
  }
  
  protected void _format(final Output output, @Extension final IFormattableDocument document) {
    document.<Output>format(output);
  }
  
  protected void _format(final Variable variable, @Extension final IFormattableDocument document) {
    document.<Variable>format(variable);
  }
  
  protected void _format(final Udt udt, @Extension final IFormattableDocument document) {
    document.<Udt>format(udt);
  }
  
  protected void _format(final UdtRef udtRef, @Extension final IFormattableDocument document) {
    document.<UdtRef>format(udtRef);
  }
  
  protected void _format(final Or or, @Extension final IFormattableDocument document) {
    document.<Or>format(or);
  }
  
  protected void _format(final And and, @Extension final IFormattableDocument document) {
    document.<And>format(and);
  }
  
  protected void _format(final Equality equality, @Extension final IFormattableDocument document) {
    document.<Equality>format(equality);
  }
  
  protected void _format(final Comparison comparision, @Extension final IFormattableDocument document) {
    document.<Comparison>format(comparision);
  }
  
  protected void _format(final MulOrDiv mulOrDiv, @Extension final IFormattableDocument document) {
    document.<MulOrDiv>format(mulOrDiv);
  }
  
  protected void _format(final Not not, @Extension final IFormattableDocument document) {
    document.<Not>format(not);
  }
  
  protected void _format(final TeststepBlock teststepBlock, @Extension final IFormattableDocument document) {
    document.<TeststepBlock>format(teststepBlock);
  }
  
  protected void _format(final AssertionBlock assertionBlock, @Extension final IFormattableDocument document) {
    document.<AssertionBlock>format(assertionBlock);
  }
  
  protected void _format(final Set set, @Extension final IFormattableDocument document) {
    document.<Set>format(set);
  }
  
  protected void _format(final Assert assert_, @Extension final IFormattableDocument document) {
    document.<Assert>format(assert_);
  }
  
  protected void _format(final Statement statement, @Extension final IFormattableDocument document) {
    document.<Statement>format(statement);
  }
  
  protected void _format(final Plus plus, @Extension final IFormattableDocument document) {
    document.<Plus>format(plus);
  }
  
  protected void _format(final Minus minus, @Extension final IFormattableDocument document) {
    document.<Minus>format(minus);
  }
  
  public void format(final Object and, final IFormattableDocument document) {
    if (and instanceof XtextResource) {
      _format((XtextResource)and, document);
      return;
    } else if (and instanceof And) {
      _format((And)and, document);
      return;
    } else if (and instanceof Comparison) {
      _format((Comparison)and, document);
      return;
    } else if (and instanceof Equality) {
      _format((Equality)and, document);
      return;
    } else if (and instanceof Minus) {
      _format((Minus)and, document);
      return;
    } else if (and instanceof MulOrDiv) {
      _format((MulOrDiv)and, document);
      return;
    } else if (and instanceof Not) {
      _format((Not)and, document);
      return;
    } else if (and instanceof Or) {
      _format((Or)and, document);
      return;
    } else if (and instanceof Plus) {
      _format((Plus)and, document);
      return;
    } else if (and instanceof Udt) {
      _format((Udt)and, document);
      return;
    } else if (and instanceof UdtRef) {
      _format((UdtRef)and, document);
      return;
    } else if (and instanceof Variable) {
      _format((Variable)and, document);
      return;
    } else if (and instanceof Assert) {
      _format((Assert)and, document);
      return;
    } else if (and instanceof AssertionBlock) {
      _format((AssertionBlock)and, document);
      return;
    } else if (and instanceof DefineBlock) {
      _format((DefineBlock)and, document);
      return;
    } else if (and instanceof DirectionBlock) {
      _format((DirectionBlock)and, document);
      return;
    } else if (and instanceof EisModel) {
      _format((EisModel)and, document);
      return;
    } else if (and instanceof Input) {
      _format((Input)and, document);
      return;
    } else if (and instanceof Output) {
      _format((Output)and, document);
      return;
    } else if (and instanceof Set) {
      _format((Set)and, document);
      return;
    } else if (and instanceof Statement) {
      _format((Statement)and, document);
      return;
    } else if (and instanceof Testblock) {
      _format((Testblock)and, document);
      return;
    } else if (and instanceof Testcase) {
      _format((Testcase)and, document);
      return;
    } else if (and instanceof TeststepBlock) {
      _format((TeststepBlock)and, document);
      return;
    } else if (and instanceof EObject) {
      _format((EObject)and, document);
      return;
    } else if (and == null) {
      _format((Void)null, document);
      return;
    } else if (and != null) {
      _format(and, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(and, document).toString());
    }
  }
}
