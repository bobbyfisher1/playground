/**
 * generated by Xtext 2.12.0
 */
package org.example.eis.ui.outline;

import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;
import org.example.eis.eis.AssertionBlock;
import org.example.eis.eis.DefineBlock;
import org.example.eis.eis.DirectionBlock;
import org.example.eis.eis.EisModel;
import org.example.eis.eis.Testblock;
import org.example.eis.eis.Testcase;
import org.example.eis.eis.TeststepBlock;
import org.example.eis.eis.Variable;
import org.example.eis.eis.Variables;

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
@SuppressWarnings("all")
public class EisOutlineTreeProvider extends DefaultOutlineTreeProvider {
  public boolean _isLeaf(final Variables v) {
    boolean _xifexpression = false;
    if ((v instanceof Variable)) {
      _xifexpression = true;
    } else {
      _xifexpression = false;
    }
    return _xifexpression;
  }
  
  public boolean _isLeaf(final TeststepBlock t) {
    return true;
  }
  
  public boolean _isLeaf(final AssertionBlock a) {
    return true;
  }
  
  public void _createChildren(final DocumentRootNode outlineNode, final EisModel eisModel) {
    final EList<Testcase> testcases = eisModel.getTestcases();
    for (final Testcase e : testcases) {
      this.createNode(outlineNode, e);
    }
  }
  
  public void _createChildren(final EObjectNode testcaseNode, final Testcase testcase) {
    Testblock _testblock = null;
    if (testcase!=null) {
      _testblock=testcase.getTestblock();
    }
    DefineBlock _define = null;
    if (_testblock!=null) {
      _define=_testblock.getDefine();
    }
    DirectionBlock _direction = null;
    if (_define!=null) {
      _direction=_define.getDirection();
    }
    final DirectionBlock direction = _direction;
    Testblock _testblock_1 = null;
    if (testcase!=null) {
      _testblock_1=testcase.getTestblock();
    }
    DefineBlock _define_1 = null;
    if (_testblock_1!=null) {
      _define_1=_testblock_1.getDefine();
    }
    EList<TeststepBlock> _teststeps = null;
    if (_define_1!=null) {
      _teststeps=_define_1.getTeststeps();
    }
    final EList<TeststepBlock> teststeps = _teststeps;
    this.createChildren(testcaseNode, direction);
    for (final TeststepBlock e : teststeps) {
      this.createChildren(testcaseNode, e);
    }
  }
}
