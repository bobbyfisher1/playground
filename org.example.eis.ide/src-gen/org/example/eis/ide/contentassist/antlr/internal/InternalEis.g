/*
 * generated by Xtext 2.13.0
 */
grammar InternalEis;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.example.eis.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.example.eis.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.example.eis.services.EisGrammarAccess;

}
@parser::members {
	private EisGrammarAccess grammarAccess;

	public void setGrammarAccess(EisGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getEisAssignment()); }
		(rule__Model__EisAssignment)*
		{ after(grammarAccess.getModelAccess().getEisAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEisType
entryRuleEisType
:
{ before(grammarAccess.getEisTypeRule()); }
	 ruleEisType
{ after(grammarAccess.getEisTypeRule()); } 
	 EOF 
;

// Rule EisType
ruleEisType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEisTypeAccess().getAlternatives()); }
		(rule__EisType__Alternatives)
		{ after(grammarAccess.getEisTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTiaProjectName
entryRuleTiaProjectName
:
{ before(grammarAccess.getTiaProjectNameRule()); }
	 ruleTiaProjectName
{ after(grammarAccess.getTiaProjectNameRule()); } 
	 EOF 
;

// Rule TiaProjectName
ruleTiaProjectName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTiaProjectNameAccess().getGroup()); }
		(rule__TiaProjectName__Group__0)
		{ after(grammarAccess.getTiaProjectNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePLCName
entryRulePLCName
:
{ before(grammarAccess.getPLCNameRule()); }
	 rulePLCName
{ after(grammarAccess.getPLCNameRule()); } 
	 EOF 
;

// Rule PLCName
rulePLCName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPLCNameAccess().getGroup()); }
		(rule__PLCName__Group__0)
		{ after(grammarAccess.getPLCNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EisType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEisTypeAccess().getTiaProjectNameParserRuleCall_0()); }
		ruleTiaProjectName
		{ after(grammarAccess.getEisTypeAccess().getTiaProjectNameParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEisTypeAccess().getPLCNameParserRuleCall_1()); }
		rulePLCName
		{ after(grammarAccess.getEisTypeAccess().getPLCNameParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TiaProjectName__Group__0__Impl
	rule__TiaProjectName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTiaProjectNameAccess().getProjectKeyword_0()); }
	'project'
	{ after(grammarAccess.getTiaProjectNameAccess().getProjectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TiaProjectName__Group__1__Impl
	rule__TiaProjectName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTiaProjectNameAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getTiaProjectNameAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TiaProjectName__Group__2__Impl
	rule__TiaProjectName__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTiaProjectNameAccess().getNameAssignment_2()); }
	(rule__TiaProjectName__NameAssignment_2)
	{ after(grammarAccess.getTiaProjectNameAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TiaProjectName__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTiaProjectNameAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getTiaProjectNameAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PLCName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PLCName__Group__0__Impl
	rule__PLCName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPLCNameAccess().getPlcnameKeyword_0()); }
	'plcname'
	{ after(grammarAccess.getPLCNameAccess().getPlcnameKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PLCName__Group__1__Impl
	rule__PLCName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPLCNameAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getPLCNameAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PLCName__Group__2__Impl
	rule__PLCName__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPLCNameAccess().getNameAssignment_2()); }
	(rule__PLCName__NameAssignment_2)
	{ after(grammarAccess.getPLCNameAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PLCName__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPLCNameAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getPLCNameAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__EisAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getEisEisTypeParserRuleCall_0()); }
		ruleEisType
		{ after(grammarAccess.getModelAccess().getEisEisTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TiaProjectName__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTiaProjectNameAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getTiaProjectNameAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PLCName__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPLCNameAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPLCNameAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
