/*
 * generated by Xtext 2.13.0
 */
package org.example.eis.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.eis.ide.contentassist.antlr.internal.InternalEisParser;
import org.example.eis.services.EisGrammarAccess;

public class EisParser extends AbstractContentAssistParser {

	@Inject
	private EisGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEisParser createParser() {
		InternalEisParser result = new InternalEisParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBoolConstantAccess().getValueAlternatives_0(), "rule__BoolConstant__ValueAlternatives_0");
					put(grammarAccess.getBlockConstantAccess().getValueAlternatives_0(), "rule__BlockConstant__ValueAlternatives_0");
					put(grammarAccess.getVariablesAccess().getAlternatives(), "rule__Variables__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives_5(), "rule__Variable__Alternatives_5");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getEisModelAccess().getGroup(), "rule__EisModel__Group__0");
					put(grammarAccess.getTestcaseAccess().getGroup(), "rule__Testcase__Group__0");
					put(grammarAccess.getTestblockAccess().getGroup(), "rule__Testblock__Group__0");
					put(grammarAccess.getDefineBlockAccess().getGroup(), "rule__DefineBlock__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getInOutAccess().getGroup(), "rule__InOut__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_4(), "rule__Variable__Group_4__0");
					put(grammarAccess.getVariableAccess().getGroup_4_2(), "rule__Variable__Group_4_2__0");
					put(grammarAccess.getUdtAccess().getGroup(), "rule__Udt__Group__0");
					put(grammarAccess.getUdtRefAccess().getGroup(), "rule__UdtRef__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getFloatConstantAccess().getGroup(), "rule__FloatConstant__Group__0");
					put(grammarAccess.getTeststepBlockAccess().getGroup(), "rule__TeststepBlock__Group__0");
					put(grammarAccess.getSetAccess().getGroup(), "rule__Set__Group__0");
					put(grammarAccess.getAssertAccess().getGroup(), "rule__Assert__Group__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
					put(grammarAccess.getCascadeAccess().getGroup(), "rule__Cascade__Group__0");
					put(grammarAccess.getEisModelAccess().getProject_nameAssignment_2(), "rule__EisModel__Project_nameAssignment_2");
					put(grammarAccess.getEisModelAccess().getPlc_nameAssignment_6(), "rule__EisModel__Plc_nameAssignment_6");
					put(grammarAccess.getEisModelAccess().getAuthor_nameAssignment_10(), "rule__EisModel__Author_nameAssignment_10");
					put(grammarAccess.getEisModelAccess().getTestcasesAssignment_12(), "rule__EisModel__TestcasesAssignment_12");
					put(grammarAccess.getTestcaseAccess().getTestcase_nameAssignment_1(), "rule__Testcase__Testcase_nameAssignment_1");
					put(grammarAccess.getTestcaseAccess().getTestblockAssignment_3(), "rule__Testcase__TestblockAssignment_3");
					put(grammarAccess.getTestblockAccess().getTestActiveAssignment_2(), "rule__Testblock__TestActiveAssignment_2");
					put(grammarAccess.getTestblockAccess().getBlockTypeAssignment_6(), "rule__Testblock__BlockTypeAssignment_6");
					put(grammarAccess.getTestblockAccess().getDescriptionAssignment_10(), "rule__Testblock__DescriptionAssignment_10");
					put(grammarAccess.getTestblockAccess().getDefineAssignment_12(), "rule__Testblock__DefineAssignment_12");
					put(grammarAccess.getBoolConstantAccess().getValueAssignment(), "rule__BoolConstant__ValueAssignment");
					put(grammarAccess.getBlockConstantAccess().getValueAssignment(), "rule__BlockConstant__ValueAssignment");
					put(grammarAccess.getDefineBlockAccess().getDirectionAssignment_2(), "rule__DefineBlock__DirectionAssignment_2");
					put(grammarAccess.getDefineBlockAccess().getTeststepsAssignment_4(), "rule__DefineBlock__TeststepsAssignment_4");
					put(grammarAccess.getDirectionBlockAccess().getInputAssignment_0(), "rule__DirectionBlock__InputAssignment_0");
					put(grammarAccess.getDirectionBlockAccess().getInoutAssignment_1(), "rule__DirectionBlock__InoutAssignment_1");
					put(grammarAccess.getDirectionBlockAccess().getOutputAssignment_2(), "rule__DirectionBlock__OutputAssignment_2");
					put(grammarAccess.getInputAccess().getNameAssignment_0(), "rule__Input__NameAssignment_0");
					put(grammarAccess.getInputAccess().getInputVariablesAssignment_2(), "rule__Input__InputVariablesAssignment_2");
					put(grammarAccess.getOutputAccess().getNameAssignment_0(), "rule__Output__NameAssignment_0");
					put(grammarAccess.getOutputAccess().getOutputVariablesAssignment_2(), "rule__Output__OutputVariablesAssignment_2");
					put(grammarAccess.getInOutAccess().getNameAssignment_0(), "rule__InOut__NameAssignment_0");
					put(grammarAccess.getInOutAccess().getInoutVariablesAssignment_2(), "rule__InOut__InoutVariablesAssignment_2");
					put(grammarAccess.getVariableAccess().getVariantKeywordAssignment_1(), "rule__Variable__VariantKeywordAssignment_1");
					put(grammarAccess.getVariableAccess().getVariableTypeAssignment_2(), "rule__Variable__VariableTypeAssignment_2");
					put(grammarAccess.getVariableAccess().getNameAssignment_3(), "rule__Variable__NameAssignment_3");
					put(grammarAccess.getVariableAccess().getIdiomAssignment_4_1(), "rule__Variable__IdiomAssignment_4_1");
					put(grammarAccess.getVariableAccess().getRangeAssignment_4_2_1(), "rule__Variable__RangeAssignment_4_2_1");
					put(grammarAccess.getVariableAccess().getNextVariableAssignment_5_1(), "rule__Variable__NextVariableAssignment_5_1");
					put(grammarAccess.getUdtAccess().getNameAssignment_1(), "rule__Udt__NameAssignment_1");
					put(grammarAccess.getUdtAccess().getUdtTypeAssignment_3(), "rule__Udt__UdtTypeAssignment_3");
					put(grammarAccess.getUdtAccess().getUdtVariablesAssignment_6(), "rule__Udt__UdtVariablesAssignment_6");
					put(grammarAccess.getUdtRefAccess().getUdtTypeAssignment_0(), "rule__UdtRef__UdtTypeAssignment_0");
					put(grammarAccess.getUdtRefAccess().getNameAssignment_1(), "rule__UdtRef__NameAssignment_1");
					put(grammarAccess.getUdtRefAccess().getUdtVariablesAssignment_2(), "rule__UdtRef__UdtVariablesAssignment_2");
					put(grammarAccess.getUdtTypeAccess().getNameAssignment(), "rule__UdtType__NameAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getIdiomAssignment_1_2(), "rule__Primary__IdiomAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getVariableAssignment_3_1(), "rule__Atomic__VariableAssignment_3_1");
					put(grammarAccess.getFloatConstantAccess().getValueAssignment_1(), "rule__FloatConstant__ValueAssignment_1");
					put(grammarAccess.getFloatConstantAccess().getValueOfDecimalAssignment_3(), "rule__FloatConstant__ValueOfDecimalAssignment_3");
					put(grammarAccess.getTeststepBlockAccess().getPlcCycleAssignment_2(), "rule__TeststepBlock__PlcCycleAssignment_2");
					put(grammarAccess.getTeststepBlockAccess().getDescriptionAssignment_4(), "rule__TeststepBlock__DescriptionAssignment_4");
					put(grammarAccess.getTeststepBlockAccess().getAssertionAssignment_7(), "rule__TeststepBlock__AssertionAssignment_7");
					put(grammarAccess.getAssertionBlockAccess().getSetAssignment_0(), "rule__AssertionBlock__SetAssignment_0");
					put(grammarAccess.getAssertionBlockAccess().getAssertAssignment_1(), "rule__AssertionBlock__AssertAssignment_1");
					put(grammarAccess.getSetAccess().getNameAssignment_0(), "rule__Set__NameAssignment_0");
					put(grammarAccess.getSetAccess().getSetVariablesAssignment_2(), "rule__Set__SetVariablesAssignment_2");
					put(grammarAccess.getAssertAccess().getNameAssignment_0(), "rule__Assert__NameAssignment_0");
					put(grammarAccess.getAssertAccess().getAssertVariablesAssignment_2(), "rule__Assert__AssertVariablesAssignment_2");
					put(grammarAccess.getStatementAccess().getVariableAssignment_0(), "rule__Statement__VariableAssignment_0");
					put(grammarAccess.getStatementAccess().getCascadeAssignment_1(), "rule__Statement__CascadeAssignment_1");
					put(grammarAccess.getStatementAccess().getIdiomAssignment_3(), "rule__Statement__IdiomAssignment_3");
					put(grammarAccess.getStatementAccess().getRangeAssignment_4_1(), "rule__Statement__RangeAssignment_4_1");
					put(grammarAccess.getCascadeAccess().getUdtVarAssignment_1(), "rule__Cascade__UdtVarAssignment_1");
					put(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), "rule__DirectionBlock__UnorderedGroup");
					put(grammarAccess.getAssertionBlockAccess().getUnorderedGroup(), "rule__AssertionBlock__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EisGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EisGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
