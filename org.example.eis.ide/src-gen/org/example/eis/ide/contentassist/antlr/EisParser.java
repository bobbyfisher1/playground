/*
 * generated by Xtext 2.13.0
 */
package org.example.eis.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.eis.ide.contentassist.antlr.internal.InternalEisParser;
import org.example.eis.services.EisGrammarAccess;

public class EisParser extends AbstractContentAssistParser {

	@Inject
	private EisGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEisParser createParser() {
		InternalEisParser result = new InternalEisParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEisTypeAccess().getAlternatives(), "rule__EisType__Alternatives");
					put(grammarAccess.getTiaProjectNameAccess().getGroup(), "rule__TiaProjectName__Group__0");
					put(grammarAccess.getPLCNameAccess().getGroup(), "rule__PLCName__Group__0");
					put(grammarAccess.getModelAccess().getEisAssignment(), "rule__Model__EisAssignment");
					put(grammarAccess.getTiaProjectNameAccess().getNameAssignment_2(), "rule__TiaProjectName__NameAssignment_2");
					put(grammarAccess.getPLCNameAccess().getNameAssignment_2(), "rule__PLCName__NameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EisGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EisGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
