/*
 * generated by Xtext 2.13.0
 */
package org.example.eis.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.eis.ide.contentassist.antlr.internal.InternalEisParser;
import org.example.eis.services.EisGrammarAccess;

public class EisParser extends AbstractContentAssistParser {

	@Inject
	private EisGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalEisParser createParser() {
		InternalEisParser result = new InternalEisParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBoolConstantAccess().getValueAlternatives_0(), "rule__BoolConstant__ValueAlternatives_0");
					put(grammarAccess.getBlockConstantAccess().getValueAlternatives_0(), "rule__BlockConstant__ValueAlternatives_0");
					put(grammarAccess.getEisModelAccess().getGroup(), "rule__EisModel__Group__0");
					put(grammarAccess.getTestcaseAccess().getGroup(), "rule__Testcase__Group__0");
					put(grammarAccess.getTestblockAccess().getGroup(), "rule__Testblock__Group__0");
					put(grammarAccess.getEisModelAccess().getProject_nameAssignment_2(), "rule__EisModel__Project_nameAssignment_2");
					put(grammarAccess.getEisModelAccess().getPlc_nameAssignment_6(), "rule__EisModel__Plc_nameAssignment_6");
					put(grammarAccess.getEisModelAccess().getAuthor_nameAssignment_10(), "rule__EisModel__Author_nameAssignment_10");
					put(grammarAccess.getEisModelAccess().getTestcasesAssignment_12(), "rule__EisModel__TestcasesAssignment_12");
					put(grammarAccess.getTestcaseAccess().getTestcase_nameAssignment_1(), "rule__Testcase__Testcase_nameAssignment_1");
					put(grammarAccess.getTestcaseAccess().getTestblockAssignment_3(), "rule__Testcase__TestblockAssignment_3");
					put(grammarAccess.getTestblockAccess().getTestActiveAssignment_2(), "rule__Testblock__TestActiveAssignment_2");
					put(grammarAccess.getTestblockAccess().getBlockTypeAssignment_6(), "rule__Testblock__BlockTypeAssignment_6");
					put(grammarAccess.getTestblockAccess().getDescriptionAssignment_10(), "rule__Testblock__DescriptionAssignment_10");
					put(grammarAccess.getBoolConstantAccess().getValueAssignment(), "rule__BoolConstant__ValueAssignment");
					put(grammarAccess.getBlockConstantAccess().getValueAssignment(), "rule__BlockConstant__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EisGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EisGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
