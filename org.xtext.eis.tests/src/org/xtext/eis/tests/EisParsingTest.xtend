/*
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.eis.eis.BoolConstant
import org.xtext.eis.eis.EisModel
import org.xtext.eis.eis.IntConstant
import org.xtext.eis.eis.RealConstant
import org.xtext.eis.eis.Udt
import org.xtext.eis.eis.Variable
import org.xtext.eis.typing.DefineTypeComputer

import static org.xtext.eis.typing.DefineTypeComputer.*

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(EisInjectorProvider)
class EisParsingTest {
	@Inject extension ParseHelper<EisModel>
	@Inject extension ValidationTestHelper
	@Inject extension DefineTypeComputer

//
// variables -----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
	val beginning = '''	
		project = "abckdjh";
		plcname = "d383";
		author 	= "name two";
		testcase Blockname{
			testActive = false;
			blockType = FC;
			description = "";
	'''
	val ending = "}"
	val delta = 0

//
// tests -----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
	@Test def void testFixedProgramBeginning_noErrors() {
		(beginning + ending).parse.assertNoErrors
	}

	@Test def void testAccessingProgrammBeginning_noErrors() {
		'''
			project = "x";
			plcname = "fj484";
			author = "Paul Auster";
		'''.parse => [
			project_name.assertEquals("x");
			plc_name.assertEquals("fj484")
			author_name.assertEquals("Paul Auster")
		]
	}

	@Test def void testDefineStructure() {
		(beginning + '''	
			define{
							input[
								int a= 4; int b = 0;
								bool Int=true;
								int x; variant int y; udt z(atype){}
							]
							inout[
								udt Rain(typeRain){ 
									int d = 90;
									udt Sun(typeSun){
										int e = 10;
									}
								}
							]
							output[ 
								variant int Train;
							]
							
						}
		''' + ending).parse.assertNoErrors
	}

	@Test def void testAccessingVariables() {
		(beginning + '''
			define{
						input[ 
							int a= 4;
							udt Dido(typeDido){ int b = 39; }
							variant int Train;
						]
						inout[]
						output[bool x,y,z;]
			}
		''' + ending).parse => [
			assertNoErrors
			testcases.head.testblock.define.direction.input.inputVariables => [
				(get(0) as Variable) => [
					variableType.typeFor.assertSame(INT_TYPE)
					name.assertEquals('a')
					(idiom as IntConstant).value.assertEquals(4)
				]
				(get(1) as Udt) => [
					name.assertEquals('Dido')
					udtType.name.assertEquals('typeDido')
					(udtVariables.get(0) as Variable) => [
						variableType.typeFor.assertSame(INT_TYPE)
						name.assertEquals('b')
						(idiom as IntConstant).value.assertEquals(39)
					]
				]
				(get(2) as Variable) => [
					name.assertEquals('Train')
					variableType.typeFor.assertSame(INT_TYPE)
					variantKeyword.assertEquals(true)
				]
			]
		]
	}

	@Test def void testAccessingVariables2() {
		(beginning + '''
			define{
						input[ 
							int a = 4 ;int b; bool c = false;
							bool d=true;
						]
						output[]
			}
		''' + ending).parse => [
			assertNoErrors
			testcases.head.testblock.define.direction.input.inputVariables => [
				(get(0) as Variable) => [
					variableType.typeFor.assertSame(INT_TYPE)
					// .assertEquals(IntType)
					name.assertEquals('a')
					(idiom as IntConstant).value.assertEquals(4)
				]
				get(1) => [name.assertEquals('b')]
				(get(2) as Variable) => [
					variableType.typeFor.assertSame(BOOL_TYPE)
					// assertEquals('bool')
					name.assertEquals('c')
					(idiom as BoolConstant).value.assertEquals('false')
				]
				(get(3) as Variable) => [
					variableType.typeFor.assertSame(BOOL_TYPE)
					// .assertEquals('bool')
					name.assertEquals('d')
					(idiom as BoolConstant).value.assertEquals('true')
				]
			]
		]
	}

	@Test def void testAccessingCascadeOfVariables() {
		(beginning + '''
			define{
				input[]
				output[
					int a;
					/*int b=9;
					bool c;
					bool d=false;
					int e=1;
					udt One(typeOne){
						
						udt Two(typeTwo){
							int aaaa; 
							variant bool TwoAndAHalf;
							variant int Three;
						}
					}*/
				]
			}
		''' + ending).parse.assertNoErrors()
	}

	@Test def void testUnorderedGroup() {
		(beginning + '''
		define{		
			output[] input[] inout[]
		}''' + ending).parse.assertNoErrors();
	}

	@Test def void testOutputRangeDeclaration() {
		(beginning + '''
			define {
				input [ ]
				output [ int a = 4  +/-  9; ]
			}
		''' + ending).parse.assertNoErrors()
	}

	@Test def void testDecimal() {
		(beginning + '''
			define{
				input[ real a = 19.00000000009; ]
				output[]
			}
		''' + ending).parse => [
			(testcases.head.testblock.define.direction.input.inputVariables.get(0) as Variable) => [
				Double.parseDouble((idiom as RealConstant).value).assertEquals(19.00000000009, delta) // .contentEquals((19.001).toString).assertTrue
				assertNoErrors
			]
		]
	}

	@Test def void testDecimal3() {
		(beginning + '''
			define{
				input[ real a = 0.4; ]
				output[]
			}
		''' + ending).parse => [
			(testcases.head.testblock.define.direction.input.inputVariables.get(0) as Variable) => [
				Double.parseDouble((idiom as RealConstant).value).assertEquals(0.4, delta) // .contentEquals((0.4).toString).assertTrue
			]
		]
	}

	@Test def void testVariables() {
		(beginning + '''
			define{
				input[ int a=14; ]
				output[]
			}
		''' + ending).parse => [assertNoErrors]
	}

	@Test def void testAccessingVariables3() {
		(beginning + '''
			define{
						input[
							int a= 4;
						]
						output[]
			}
		''' + ending).parse => [
			assertNoErrors
			testcases.head.testblock.define.direction.input.inputVariables => [
				(get(0) as Variable) => [
					variableType.typeFor.assertSame(INT_TYPE)
					name.assertEquals('a')
					(idiom as IntConstant).value.assertEquals(4)
				]
			]
		]
	}
}
