package org.xtext.eis.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.eis.eis.EisModel;
import org.xtext.eis.tests.EisInjectorProvider;

@RunWith(XtextRunner.class)
@InjectWith(EisInjectorProvider.class)
@SuppressWarnings("all")
public class EisGeneratorTest {
  @Inject
  @Extension
  private ParseHelper<EisModel> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Inject
  @Extension
  private CompilationTestHelper _compilationTestHelper;
  
  private final String beginning = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("project = \"project\";");
      _builder.newLine();
      _builder.append("plcname = \"plcname\";");
      _builder.newLine();
      _builder.append("author \t= \"author\";");
      _builder.newLine();
      _builder.append("testcase Testcase{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("testActive = false;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("blockType = FC;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("description = \"description\";");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private final String ending = "}";
  
  @Test
  public void testEmptiness() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("project = \"project\";");
    _builder.newLine();
    _builder.append("plcname = \"plcname\";");
    _builder.newLine();
    _builder.append("author \t= \"author\";");
    _builder.newLine();
    _builder.append("testcase Testcase{}");
    _builder.newLine();
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\">");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_builder.toString(), _function);
  }
  
  @Test
  public void testBeginning() {
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder.newLine();
        _builder.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<TiaProjectName>project</TiaProjectName>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<PlcName>plcname</PlcName>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<Author>author</Author>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<TestCases>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</TestCase>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</TestCases>");
        _builder.newLine();
        _builder.append("</TestFixture>");
        _builder.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow((this.beginning + this.ending), _function);
  }
  
  @Test
  public void testMultipleEmptyTestCases() {
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder.newLine();
        _builder.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<TiaProjectName>project</TiaProjectName>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<PlcName>plcname</PlcName>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<Author>author</Author>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<TestCases>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</TestCase>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<TestCase ID=\"1\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</TestCase>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<TestCase ID=\"2\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</TestCase>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</TestCases>");
        _builder.newLine();
        _builder.append("</TestFixture>");
        _builder.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(((this.beginning + this.ending) + "testcase Test1{} testcase Test2{}"), _function);
  }
  
  @Test
  public void testEmptyDefineBlock() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testInput() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("variant int a;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bool b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b = 1 > -1; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a = 3*-4; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"-12\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Bool\" Direction=\"Input\" Value=\"true\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testInputUdts() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int b;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a.b = 43;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"43\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testInOuts() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[ int a = 1 +/- 2 ; ]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a = 43;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[a=10043;]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"a\" Datatype=\"Int\" Direction=\"InOut\" Expect=\"10043\" Range=\"2\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testMultipleInputUdts() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt z(allovertheplace){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("string one = \"zero\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("int b;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("udt c(typeC){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("bool d;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("z.a.b = 1;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("z.a.c.d = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("z.one = \"one\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"z\" Datatype=\"allovertheplace\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"one\" Datatype=\"String\" Direction=\"Input\" Value=\"zero\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"0\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"c\" Datatype=\"typeC\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"d\" Datatype=\"Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"z\" Datatype=\"allovertheplace\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"one\" Datatype=\"String\" Direction=\"Input\" Value=\"one\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"1\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"c\" Datatype=\"typeC\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"d\" Datatype=\"Bool\" Direction=\"Input\" Value=\"true\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testErrorProneUseCase() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int b;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int c;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a.b = 33;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c = 3;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"33\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"3\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testInputsAndInOuts() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int b;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int c;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt aa(typeAA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int bb;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int cc;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a.b = 3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("aa.bb = 33;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c = 6;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cc = 66;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"InOut\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"InOut\" Value=\"3\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"6\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"aa\" Datatype=\"typeAA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"bb\" Datatype=\"Int\" Direction=\"Input\" Value=\"33\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"cc\" Datatype=\"Int\" Direction=\"Input\" Value=\"66\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testDefaultValues() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int b = 46;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int c = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0,\"zero\"){ set[] assert[] }");
    _builder.newLine();
    _builder.append("teststep(1, \"one\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a.b = 3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c = 6;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(2,\"two\"){ set[] assert[] }");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"zero\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"46\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"2\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"one\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"3\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"6\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"2\" Description=\"two\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"Input\" Value=\"46\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"2\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testDefaultValuesWithInouts() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ variant bool x, y, z; ] ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int b = 46;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int c = 2;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("//teststep(0,\"zero\"){ set[] assert[] }   //  <---this shouldn\'t work");
    _builder.newLine();
    _builder.append("teststep(1, \"one\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a.b = 3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c = 6;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("x = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("y = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("z = true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("//teststep(2,\"two\"){ set[] assert[] }\t// <-- neither should this");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"zero\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"x\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"y\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"z\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"InOut\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"InOut\" Value=\"46\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"2\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"one\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"x\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"true\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"y\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"true\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"z\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"true\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"InOut\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"InOut\" Value=\"3\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"6\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"2\" Description=\"two\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"x\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"y\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"z\" Datatype=\"Variant@Bool\" Direction=\"Input\" Value=\"false\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"InOut\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Int\" Direction=\"InOut\" Value=\"46\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"c\" Datatype=\"Int\" Direction=\"Input\" Value=\"2\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testUdtRefs() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("variant\tint b=22;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("typeA c;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("] ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0,\"zero\"){ set[] assert[] }");
    _builder.newLine();
    _builder.append("teststep(1,\"one\"){ set[c.b = 44; ] assert[] }");
    _builder.newLine();
    _builder.append("teststep(2,\"two\"){ set[ ] assert[] }");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"zero\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"22\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"c\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"22\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"one\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"22\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"c\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"44\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"2\" Description=\"two\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"22\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"InputUDT\" Name=\"c\" Datatype=\"typeA\" Direction=\"Input\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"b\" Datatype=\"Variant@Int\" Direction=\"Input\" Value=\"22\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testOutput() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("variant int a;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bool b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b = true; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a = 12;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"a\" Datatype=\"Variant@Int\" Direction=\"Output\" Expect=\"12\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"b\" Datatype=\"Bool\" Direction=\"Output\" Expect=\"true\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testOutputsAndInOuts() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("inout[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt a(typeA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int b;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int c;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("udt aa(typeAA){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int bb;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int cc;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[ ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a.b = 3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("aa.bb = 33;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("c = 6;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cc = 66;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"OutputUDT\" Name=\"a\" Datatype=\"typeA\" Direction=\"InOut\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"b\" Datatype=\"Int\" Direction=\"InOut\" Expect=\"3\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"c\" Datatype=\"Int\" Direction=\"Output\" Expect=\"6\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"OutputUDT\" Name=\"aa\" Datatype=\"typeAA\" Direction=\"Output\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"bb\" Datatype=\"Int\" Direction=\"Output\" Expect=\"33\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"cc\" Datatype=\"Int\" Direction=\"Output\" Expect=\"66\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testAll() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[");
    _builder.newLine();
    _builder.append("\t \t");
    _builder.append("inout udt All(TypeAll){");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant int a = 14 +/- 3;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant bool b = true;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant real c = 3.4 +/- 1.1;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant string d = \"hahaha\" ;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant char e = \'9\';\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant byte f = 16#02;\t\t");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant word g = 16#1234;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant dword h = 16#9876_5432;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant lword i = 16#abcd_efAB_CDEF_0123;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant usint j = 1 +/- 5;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant uint k = 256 +/- 7;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant udint l = 123456 +/- 987654;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant ulint m = 123456798 +/- 3;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant sint n = -1 +/- -25;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant dint o = -25600 +/- (-8545000);");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant lint p = -222222222 +/- 9999999;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant time q = T#40s;\t\t");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant ltime r = LT#400d9ns;");
    _builder.newLine();
    _builder.append("\t \t\t");
    _builder.append("variant date s = D#2018-08-22;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi: type=\"OutputUDT\" Name=\"All\" Datatype=\"TypeAll\" Direction=\"InOut\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("<Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"a\" Datatype=\"Variant@Int\" Direction=\"InOut\" Expect=\"14\" Range=\"3\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"b\" Datatype=\"Variant@Bool\" Direction=\"InOut\" Expect=\"true\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"c\" Datatype=\"Variant@Real\" Direction=\"InOut\" Expect=\"3.4\" Range=\"1.1\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"d\" Datatype=\"Variant@String\" Direction=\"InOut\" Expect=\"hahaha\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"e\" Datatype=\"Variant@Char\" Direction=\"InOut\" Expect=\"9\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"f\" Datatype=\"Variant@Byte\" Direction=\"InOut\" Expect=\"16#02\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"g\" Datatype=\"Variant@Word\" Direction=\"InOut\" Expect=\"16#1234\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"h\" Datatype=\"Variant@DWord\" Direction=\"InOut\" Expect=\"16#9876_5432\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"i\" Datatype=\"Variant@LWord\" Direction=\"InOut\" Expect=\"16#ABCD_EFAB_CDEF_0123\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"j\" Datatype=\"Variant@USInt\" Direction=\"InOut\" Expect=\"1\" Range=\"5\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"k\" Datatype=\"Variant@UInt\" Direction=\"InOut\" Expect=\"256\" Range=\"7\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"l\" Datatype=\"Variant@UDInt\" Direction=\"InOut\" Expect=\"123456\" Range=\"987654\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"m\" Datatype=\"Variant@ULInt\" Direction=\"InOut\" Expect=\"123456798\" Range=\"3\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"n\" Datatype=\"Variant@SInt\" Direction=\"InOut\" Expect=\"-1\" Range=\"-25\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"o\" Datatype=\"Variant@DInt\" Direction=\"InOut\" Expect=\"-25600\" Range=\"-8545000\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"p\" Datatype=\"Variant@LInt\" Direction=\"InOut\" Expect=\"-222222222\" Range=\"9999999\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"q\" Datatype=\"Variant@Time\" Direction=\"InOut\" Expect=\"T#40s\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"r\" Datatype=\"Variant@LTime\" Direction=\"InOut\" Expect=\"LT#400d9ns\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"s\" Datatype=\"Variant@Date\" Direction=\"InOut\" Expect=\"D#2018-08-22\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t\t");
        _builder_1.append("</Elements>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("</Element>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testSignedInt() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[int a = -1; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Int\" Direction=\"Input\" Value=\"-1\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testReal() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("real a = -1.0000000000000009; //another decimal and the real rounds the digit");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[\t]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Real\" Direction=\"Input\" Value=\"-1.0000000000000009\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testChar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("input[char a = \'9\'; ]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("teststep(0, \"\"){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"0\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Char\" Direction=\"Input\" Value=\"9\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testByte() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[byte a ; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ a = 16#aa; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Byte\" Direction=\"Input\" Value=\"16#AA\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testWord() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[word a; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ a = 16#AAAA; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Word\" Direction=\"Input\" Value=\"16#AAAA\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testDWord() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[dword a; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ a = 16#AAAA_AAAA; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"DWord\" Direction=\"Input\" Value=\"16#AAAA_AAAA\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testLWord() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[lword a; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[ a = 16#Abcd_ef01_AAAA_AAAA; ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"LWord\" Direction=\"Input\" Value=\"16#ABCD_EF01_AAAA_AAAA\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testUDInt() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("inout udint a; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("inout ulint b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"UDInt\" Direction=\"InOut\" Value=\"0\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"b\" Datatype=\"ULInt\" Direction=\"InOut\" Expect=\"0\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
  
  @Test
  public void testTimes() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("define{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("input[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("inout time a = T#5d12M2s; ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("output[");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("inout ltime b = LT#99ms456us239ns;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("teststep(1, \"\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("set[]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("assert[]");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String _plus = (this.beginning + _builder);
    String _plus_1 = (_plus + this.ending);
    final Procedure1<String> _function = (String it) -> {
      try {
        this._validationTestHelper.assertNoErrors(this._parseHelper.parse(it));
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
        _builder_1.newLine();
        _builder_1.append("<TestFixture xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TiaProjectName>project</TiaProjectName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<PlcName>plcname</PlcName>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<Author>author</Author>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("<TestCases>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("<TestCase ID=\"0\" TestActive=\"false\" Blockname=\"Testcase\" Blocktype=\"FC\" Description=\"description\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("<Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("<Teststep PlcCycle =\"1\" Description=\"\">");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Input\" Name=\"a\" Datatype=\"Time\" Direction=\"InOut\" Value=\"T#5d12m2s\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Inputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("<Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t\t");
        _builder_1.append("<Element xsi:type=\"Output\" Name=\"b\" Datatype=\"LTime\" Direction=\"InOut\" Expect=\"LT#99ms456us239ns\" Range=\"\" />");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t\t");
        _builder_1.append("</Outputs>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t\t");
        _builder_1.append("</Teststep>");
        _builder_1.newLine();
        _builder_1.append("\t\t\t");
        _builder_1.append("</Teststeps>");
        _builder_1.newLine();
        _builder_1.append("\t\t");
        _builder_1.append("</TestCase>");
        _builder_1.newLine();
        _builder_1.append("\t");
        _builder_1.append("</TestCases>");
        _builder_1.newLine();
        _builder_1.append("</TestFixture>");
        _builder_1.newLine();
        this._compilationTestHelper.assertCompilesTo(it, _builder_1);
      } catch (Throwable _e) {
        throw Exceptions.sneakyThrow(_e);
      }
    };
    ObjectExtensions.<String>operator_doubleArrow(_plus_1, _function);
  }
}
