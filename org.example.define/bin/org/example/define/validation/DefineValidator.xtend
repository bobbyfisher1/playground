/*
 * generated by Xtext 2.12.0
 */
package org.example.define.validation

import com.google.common.collect.HashMultimap
import org.eclipse.xtext.validation.Check
import org.example.define.define.DefinePackage
import org.example.define.define.DirectionBlock
import org.example.define.define.Variable

class DefineValidator extends AbstractDefineValidator {
	protected static val ISSUE_CODE_PREFIX = "org.example.entities.";
	public static val MULTIPLE_VARIABLE = ISSUE_CODE_PREFIX + "MultipleVariable"
	public static val MULTIPLE_VARIANT = ISSUE_CODE_PREFIX + "MultipleVariant"
	public static val MULTIPLE_UDT = ISSUE_CODE_PREFIX + "MultipleUdt"

//
// checks -----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
	@Check def void checkNoDuplicateVariablesInputOutput(DirectionBlock directionblock) {
		val in = directionblock.input.inputVariables
		val out = directionblock.output.outputVariables
		checkNoDuplicateElements(in, out, "variable name")
	}

	@Check def void checkNoDuplicateVariablesInputOutputInout(DirectionBlock directionblock) {
		val in = directionblock.input.inputVariables
		val out = directionblock.output.outputVariables
		val inout = directionblock.inout.inoutVariables
		checkNoDuplicateElements(in, out, inout, "variable name")
	}

//
// methods -----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
	def private checkVariableTypeAndAddToMap(Variable d, HashMultimap<String, Variable> multiMap) {
		if (d.udt !== null)
			multiMap.put(d.udt.udtName, d)
		if (d.variant !== null)
			multiMap.put(d.variant.variantName, d)
		if (d.variableDefinition !== null)
			multiMap.put(d.variableDefinition.variableName, d)
	}

	def private checkVariableTypeAndCallError(Variable d, String text) {
		if (d.variant !== null)
			error(
				"Multiple " + text + " '" + d.variant.variantName + "'",
				d,
				DefinePackage.eINSTANCE.variable_Variant,
				org.example.define.validation.DefineValidator.MULTIPLE_VARIANT
			)
		if (d.udt !== null)
			error(
				"Multiple " + text + " '" + d.udt.udtName + "'",
				d,
				DefinePackage.eINSTANCE.variable_Udt,
				org.example.define.validation.DefineValidator.MULTIPLE_UDT
			)
		if (d.variableDefinition !== null)
			error(
				"Multiple " + text + " '" + d.variableDefinition.variableName + "'",
				d,
				DefinePackage.eINSTANCE.variable_VariableDefinition,
				org.example.define.validation.DefineValidator.MULTIPLE_VARIABLE
			)
	}

	def private void checkNoDuplicateElements(
		Iterable<? extends Variable> inputVariables,
		Iterable<? extends Variable> outputVariables,
		Iterable<? extends Variable> inoutVariables,
		String text
	) {
		val multiMap = HashMultimap.create()

		// add all variables to the multimap
		for (e : inputVariables)
			e.checkVariableTypeAndAddToMap(multiMap)

		for (e : outputVariables)
			e.checkVariableTypeAndAddToMap(multiMap)

		for (e : inoutVariables)
			e.checkVariableTypeAndAddToMap(multiMap)

		// check for duplicates
		for (entry : multiMap.asMap.entrySet) {
			val duplicates = entry.value
			if (duplicates.size > 1) {
				for (d : duplicates)
					d.checkVariableTypeAndCallError(text)
			}
		}
	}

	def private void checkNoDuplicateElements(
		Iterable<? extends Variable> inputVariables,
		Iterable<? extends Variable> outputVariables,
		String text
	) {
		val multiMap = HashMultimap.create()

		// add all variables to the map
		for (e : inputVariables)
			e.checkVariableTypeAndAddToMap(multiMap)

		for (e : outputVariables)
			e.checkVariableTypeAndAddToMap(multiMap)

		// check for duplicates
		for (entry : multiMap.asMap.entrySet) {
			val duplicates = entry.value
			if (duplicates.size > 1) {
				for (d : duplicates)
					d.checkVariableTypeAndCallError(text)
			}
		}
	}

//
// yet unimplemented -----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
	/*@Todo:	
	 * Forbid during validation the occurance of multiple type definitions
	 * Yet a single type definition must be at the beginning
	 * AND MOST IMPORTANTLY don't forget to assign variableType to the rest of the variables after the ','	 */
	@Check
	def void checkForMultipleDeclaredTypesInSingleLine() {
	}

	@Check
	def void checkMatchBetweenTypeAndExpression() {}

	@Check
	def void checkSemicolonsOnlyAtEndOfLine() {}

	@Check
	def void checkNoCommasAtEndOfLine() {}

	@Check
	def void checkVariantsNotDefinedInTheSameLineWithVariables() {}

	@Check
	def void checkUdtsNotDefinedInTheSameLineWithVariables() {}

	@Check
	def void checkOnlyBeginningVariantHasKeyword() {}

	@Check
	def void checkUppercaseVariantName() {}

	@Check
	def void checkUppercaseUdtName() {}

	@Check
	def void checkLowercaseUdtType() {}

	@Check
	def void checkUdtScope() {}

}
