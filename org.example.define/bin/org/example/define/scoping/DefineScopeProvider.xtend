/*
 * generated by Xtext 2.14.0
 */
package org.example.define.scoping

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.example.define.DefineModelUtil
import org.example.define.define.DefinePackage
import org.example.define.define.Idiom
import org.example.define.define.UdtRef
import org.example.define.define.Variable

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DefineScopeProvider extends AbstractDefineScopeProvider {

	@Inject extension DefineModelUtil

	override getScope(EObject context, EReference reference) {
		if (reference == DefinePackage.eINSTANCE.udtRef_UdtType) {
			return scopeForUdtType(context)
		} else if (reference == DefinePackage.eINSTANCE.variableRef_Variable) {
			return scopeForVariableRef(context)
		} else
			return super.getScope(context, reference)
	}

	def protected IScope scopeForVariableRef(EObject context) {
		if (context instanceof Variable)
			return Scopes.scopeFor(context.variablesDefinedBefore)
		if (context instanceof Idiom) {
			return Scopes.scopeFor((context.eContainer as Variable).variablesDefinedBefore)
		}
	}

	def protected IScope scopeForUdtType(EObject context) {
		return Scopes.scopeFor((context as UdtRef).udtTypesDefinedBefore)
	}
}
