/*
 * generated by Xtext 2.13.0
 */
grammar InternalDefine;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.example.define.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.define.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.define.services.DefineGrammarAccess;

}

@parser::members {

 	private DefineGrammarAccess grammarAccess;

    public InternalDefineParser(TokenStream input, DefineGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DefineBlock";
   	}

   	@Override
   	protected DefineGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDefineBlock
entryRuleDefineBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefineBlockRule()); }
	iv_ruleDefineBlock=ruleDefineBlock
	{ $current=$iv_ruleDefineBlock.current; }
	EOF;

// Rule DefineBlock
ruleDefineBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='define'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefineBlockAccess().getDefineKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefineBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineBlockAccess().getDirectionDirectionBlockParserRuleCall_2_0());
				}
				lv_direction_2_0=ruleDirectionBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineBlockRule());
					}
					set(
						$current,
						"direction",
						lv_direction_2_0,
						"org.example.define.Define.DirectionBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getDefineBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleDirectionBlock
entryRuleDirectionBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDirectionBlockRule()); }
	iv_ruleDirectionBlock=ruleDirectionBlock
	{ $current=$iv_ruleDirectionBlock.current; }
	EOF;

// Rule DirectionBlock
ruleDirectionBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getDirectionBlockAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getDirectionBlockAccess().getInputInputParserRuleCall_0_0());
								}
								lv_input_1_0=ruleInput
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getDirectionBlockRule());
									}
									set(
										$current,
										"input",
										lv_input_1_0,
										"org.example.define.Define.Input");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDirectionBlockAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getDirectionBlockAccess().getInoutInoutParserRuleCall_1_0());
								}
								lv_inout_2_0=ruleInout
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getDirectionBlockRule());
									}
									set(
										$current,
										"inout",
										lv_inout_2_0,
										"org.example.define.Define.Inout");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDirectionBlockAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getDirectionBlockAccess().getOutputOutputParserRuleCall_2_0());
								}
								lv_output_3_0=ruleOutput
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getDirectionBlockRule());
									}
									set(
										$current,
										"output",
										lv_output_3_0,
										"org.example.define.Define.Output");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getDirectionBlockAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getDirectionBlockAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getDirectionBlockAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='input'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputAccess().getInputKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputAccess().getInputAction_1(),
					$current);
			}
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getInputAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getInputVariablesVariableParserRuleCall_3_0());
				}
				lv_inputVariables_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					add(
						$current,
						"inputVariables",
						lv_inputVariables_3_0,
						"org.example.define.Define.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInout
entryRuleInout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInoutRule()); }
	iv_ruleInout=ruleInout
	{ $current=$iv_ruleInout.current; }
	EOF;

// Rule Inout
ruleInout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inout'
		{
			newLeafNode(otherlv_0, grammarAccess.getInoutAccess().getInoutKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInoutAccess().getInoutAction_1(),
					$current);
			}
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getInoutAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInoutAccess().getInoutVariablesVariableParserRuleCall_3_0());
				}
				lv_inoutVariables_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInoutRule());
					}
					add(
						$current,
						"inoutVariables",
						lv_inoutVariables_3_0,
						"org.example.define.Define.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getInoutAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputAccess().getOutputKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputAccess().getOutputAction_1(),
					$current);
			}
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getOutputAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputAccess().getOutputVariablesVariableParserRuleCall_3_0());
				}
				lv_outputVariables_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputRule());
					}
					add(
						$current,
						"outputVariables",
						lv_outputVariables_3_0,
						"org.example.define.Define.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getOutputAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getVariableTypeVariableTypeParserRuleCall_0_0_0());
					}
					lv_variableType_0_0=ruleVariableType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						set(
							$current,
							"variableType",
							lv_variableType_0_0,
							"org.example.define.Define.VariableType");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getVariableDefinitionVariableDefinitionParserRuleCall_0_1_0());
					}
					lv_variableDefinition_1_0=ruleVariableDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						set(
							$current,
							"variableDefinition",
							lv_variableDefinition_1_0,
							"org.example.define.Define.VariableDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getUdtUdtParserRuleCall_1_0());
				}
				lv_udt_2_0=ruleUdt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"udt",
						lv_udt_2_0,
						"org.example.define.Define.Udt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				otherlv_3='variant'
				{
					newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getVariantKeyword_2_0());
				}
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getVariantVariantParserRuleCall_2_1_0());
					}
					lv_variant_4_0=ruleVariant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						set(
							$current,
							"variant",
							lv_variant_4_0,
							"org.example.define.Define.Variant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVariableDefinition
entryRuleVariableDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDefinitionRule()); }
	iv_ruleVariableDefinition=ruleVariableDefinition
	{ $current=$iv_ruleVariableDefinition.current; }
	EOF;

// Rule VariableDefinition
ruleVariableDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variableName_0_0=RULE_ID
				{
					newLeafNode(lv_variableName_0_0, grammarAccess.getVariableDefinitionAccess().getVariableNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"variableName",
						lv_variableName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableDefinitionAccess().getEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDefinitionAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"org.example.define.Define.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3='+/-'
				{
					newLeafNode(otherlv_3, grammarAccess.getVariableDefinitionAccess().getPlusSignSolidusHyphenMinusKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableDefinitionAccess().getRangeExpressionParserRuleCall_1_2_1_0());
						}
						lv_range_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableDefinitionRule());
							}
							set(
								$current,
								"range",
								lv_range_4_0,
								"org.example.define.Define.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)?
		(
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getVariableDefinitionAccess().getSemicolonKeyword_2_0());
			}
			    |
			(
				(
					lv_nextVariable_6_0=','
					{
						newLeafNode(lv_nextVariable_6_0, grammarAccess.getVariableDefinitionAccess().getNextVariableCommaKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDefinitionRule());
						}
						setWithLastConsumed($current, "nextVariable", true, ",");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleUdt
entryRuleUdt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUdtRule()); }
	iv_ruleUdt=ruleUdt
	{ $current=$iv_ruleUdt.current; }
	EOF;

// Rule Udt
ruleUdt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='udt'
		{
			newLeafNode(otherlv_0, grammarAccess.getUdtAccess().getUdtKeyword_0());
		}
		(
			(
				lv_udtName_1_0=RULE_ID
				{
					newLeafNode(lv_udtName_1_0, grammarAccess.getUdtAccess().getUdtNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUdtRule());
					}
					setWithLastConsumed(
						$current,
						"udtName",
						lv_udtName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getUdtAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_udtType_3_0=RULE_ID
				{
					newLeafNode(lv_udtType_3_0, grammarAccess.getUdtAccess().getUdtTypeIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUdtRule());
					}
					setWithLastConsumed(
						$current,
						"udtType",
						lv_udtType_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getUdtAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getUdtAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUdtAccess().getUdtVariablesVariableParserRuleCall_6_0());
				}
				lv_udtVariables_6_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUdtRule());
					}
					add(
						$current,
						"udtVariables",
						lv_udtVariables_6_0,
						"org.example.define.Define.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getUdtAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleVariant
entryRuleVariant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariantRule()); }
	iv_ruleVariant=ruleVariant
	{ $current=$iv_ruleVariant.current; }
	EOF;

// Rule Variant
ruleVariant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variantName_0_0=RULE_ID
				{
					newLeafNode(lv_variantName_0_0, grammarAccess.getVariantAccess().getVariantNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariantRule());
					}
					setWithLastConsumed(
						$current,
						"variantName",
						lv_variantName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getVariantAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariantAccess().getVariantTypeVariableTypeParserRuleCall_2_0());
				}
				lv_variantType_2_0=ruleVariableType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariantRule());
					}
					set(
						$current,
						"variantType",
						lv_variantType_2_0,
						"org.example.define.Define.VariableType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getVariantAccess().getRightParenthesisKeyword_3());
		}
		(
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getVariantAccess().getSemicolonKeyword_4_0());
			}
			    |
			(
				(
					lv_nextVariant_5_0=','
					{
						newLeafNode(lv_nextVariant_5_0, grammarAccess.getVariantAccess().getNextVariantCommaKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariantRule());
						}
						setWithLastConsumed($current, "nextVariant", true, ",");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVariableType
entryRuleVariableType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVariableTypeRule()); }
	iv_ruleVariableType=ruleVariableType
	{ $current=$iv_ruleVariableType.current.getText(); }
	EOF;

// Rule VariableType
ruleVariableType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeAccess().getIntKeyword_0());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeAccess().getBoolKeyword_1());
		}
		    |
		kw='float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVariableTypeAccess().getFloatKeyword_2());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getIntConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getExpressionAccess().getValueINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getStringConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getBoolConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_5_1='true'
						{
							newLeafNode(lv_value_5_1, grammarAccess.getExpressionAccess().getValueTrueKeyword_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_5_1, null);
						}
						    |
						lv_value_5_2='false'
						{
							newLeafNode(lv_value_5_2, grammarAccess.getExpressionAccess().getValueFalseKeyword_2_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_5_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getExpressionAccess().getVariableRefAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getVariableVariableCrossReference_3_1_0());
					}
				)
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
