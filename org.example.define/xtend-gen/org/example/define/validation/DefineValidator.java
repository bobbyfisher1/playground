/**
 * generated by Xtext 2.12.0
 */
package org.example.define.validation;

import com.google.common.collect.HashMultimap;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;
import org.example.define.define.DefinePackage;
import org.example.define.define.DirectionBlock;
import org.example.define.define.Udt;
import org.example.define.define.Variable;
import org.example.define.define.VariableDefinition;
import org.example.define.define.Variant;
import org.example.define.validation.AbstractDefineValidator;

@SuppressWarnings("all")
public class DefineValidator extends AbstractDefineValidator {
  protected final static String ISSUE_CODE_PREFIX = "org.example.entities.";
  
  public final static String MULTIPLE_VARIABLE = (DefineValidator.ISSUE_CODE_PREFIX + "MultipleVariable");
  
  public final static String MULTIPLE_VARIANT = (DefineValidator.ISSUE_CODE_PREFIX + "MultipleVariant");
  
  public final static String MULTIPLE_UDT = (DefineValidator.ISSUE_CODE_PREFIX + "MultipleUdt");
  
  @Check
  public void checkNoDuplicateVariablesInputOutput(final DirectionBlock directionblock) {
    final EList<Variable> in = directionblock.getInput().getInputVariables();
    final EList<Variable> out = directionblock.getOutput().getOutputVariables();
    this.checkNoDuplicateElements(in, out, "variable name");
  }
  
  @Check
  public void checkNoDuplicateVariablesInputOutputInout(final DirectionBlock directionblock) {
    final EList<Variable> in = directionblock.getInput().getInputVariables();
    final EList<Variable> out = directionblock.getOutput().getOutputVariables();
    final EList<Variable> inout = directionblock.getInout().getInoutVariables();
    this.checkNoDuplicateElements(in, out, inout, "variable name");
  }
  
  private boolean checkVariableTypeAndAddToMap(final Variable d, final HashMultimap<String, Variable> multiMap) {
    boolean _xblockexpression = false;
    {
      Udt _udt = d.getUdt();
      boolean _tripleNotEquals = (_udt != null);
      if (_tripleNotEquals) {
        multiMap.put(d.getUdt().getUdtName(), d);
      }
      Variant _variant = d.getVariant();
      boolean _tripleNotEquals_1 = (_variant != null);
      if (_tripleNotEquals_1) {
        multiMap.put(d.getVariant().getVariantName(), d);
      }
      boolean _xifexpression = false;
      VariableDefinition _variableDefinition = d.getVariableDefinition();
      boolean _tripleNotEquals_2 = (_variableDefinition != null);
      if (_tripleNotEquals_2) {
        _xifexpression = multiMap.put(d.getVariableDefinition().getVariableName(), d);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  private void checkVariableTypeAndCallError(final Variable d, final String text) {
    Variant _variant = d.getVariant();
    boolean _tripleNotEquals = (_variant != null);
    if (_tripleNotEquals) {
      String _variantName = d.getVariant().getVariantName();
      String _plus = ((("Multiple " + text) + " \'") + _variantName);
      String _plus_1 = (_plus + "\'");
      this.error(_plus_1, d, 
        DefinePackage.eINSTANCE.getVariable_Variant(), 
        DefineValidator.MULTIPLE_VARIANT);
    }
    Udt _udt = d.getUdt();
    boolean _tripleNotEquals_1 = (_udt != null);
    if (_tripleNotEquals_1) {
      String _udtName = d.getUdt().getUdtName();
      String _plus_2 = ((("Multiple " + text) + " \'") + _udtName);
      String _plus_3 = (_plus_2 + "\'");
      this.error(_plus_3, d, 
        DefinePackage.eINSTANCE.getVariable_Udt(), 
        DefineValidator.MULTIPLE_UDT);
    }
    VariableDefinition _variableDefinition = d.getVariableDefinition();
    boolean _tripleNotEquals_2 = (_variableDefinition != null);
    if (_tripleNotEquals_2) {
      String _variableName = d.getVariableDefinition().getVariableName();
      String _plus_4 = ((("Multiple " + text) + " \'") + _variableName);
      String _plus_5 = (_plus_4 + "\'");
      this.error(_plus_5, d, 
        DefinePackage.eINSTANCE.getVariable_VariableDefinition(), 
        DefineValidator.MULTIPLE_VARIABLE);
    }
  }
  
  private void checkNoDuplicateElements(final Iterable<? extends Variable> inputVariables, final Iterable<? extends Variable> outputVariables, final Iterable<? extends Variable> inoutVariables, final String text) {
    final HashMultimap<String, Variable> multiMap = HashMultimap.<String, Variable>create();
    for (final Variable e : inputVariables) {
      this.checkVariableTypeAndAddToMap(e, multiMap);
    }
    for (final Variable e_1 : outputVariables) {
      this.checkVariableTypeAndAddToMap(e_1, multiMap);
    }
    for (final Variable e_2 : inoutVariables) {
      this.checkVariableTypeAndAddToMap(e_2, multiMap);
    }
    Set<Map.Entry<String, Collection<Variable>>> _entrySet = multiMap.asMap().entrySet();
    for (final Map.Entry<String, Collection<Variable>> entry : _entrySet) {
      {
        final Collection<Variable> duplicates = entry.getValue();
        int _size = duplicates.size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          for (final Variable d : duplicates) {
            this.checkVariableTypeAndCallError(d, text);
          }
        }
      }
    }
  }
  
  private void checkNoDuplicateElements(final Iterable<? extends Variable> inputVariables, final Iterable<? extends Variable> outputVariables, final String text) {
    final HashMultimap<String, Variable> multiMap = HashMultimap.<String, Variable>create();
    for (final Variable e : inputVariables) {
      this.checkVariableTypeAndAddToMap(e, multiMap);
    }
    for (final Variable e_1 : outputVariables) {
      this.checkVariableTypeAndAddToMap(e_1, multiMap);
    }
    Set<Map.Entry<String, Collection<Variable>>> _entrySet = multiMap.asMap().entrySet();
    for (final Map.Entry<String, Collection<Variable>> entry : _entrySet) {
      {
        final Collection<Variable> duplicates = entry.getValue();
        int _size = duplicates.size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          for (final Variable d : duplicates) {
            this.checkVariableTypeAndCallError(d, text);
          }
        }
      }
    }
  }
  
  /**
   * @Todo:
   * Forbid during validation the occurance of multiple type definitions
   * Yet a single type definition must be at the beginning
   * AND MOST IMPORTANTLY don't forget to assign variableType to the rest of the variables after the ','
   */
  @Check
  public void checkForMultipleDeclaredTypesInSingleLine() {
  }
  
  @Check
  public void checkMatchBetweenTypeAndExpression() {
  }
  
  @Check
  public void checkSemicolonsOnlyAtEndOfLine() {
  }
  
  @Check
  public void checkNoCommasAtEndOfLine() {
  }
  
  @Check
  public void checkVariantsNotDefinedInTheSameLineWithVariables() {
  }
  
  @Check
  public void checkUdtsNotDefinedInTheSameLineWithVariables() {
  }
  
  @Check
  public void checkOnlyBeginningVariantHasKeyword() {
  }
  
  @Check
  public void checkUppercaseVariantName() {
  }
  
  @Check
  public void checkUppercaseUdtName() {
  }
  
  @Check
  public void checkLowercaseUdtType() {
  }
  
  @Check
  public void checkUdtScope() {
  }
}
