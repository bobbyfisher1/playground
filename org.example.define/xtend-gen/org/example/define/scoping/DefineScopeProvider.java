/**
 * generated by Xtext 2.14.0
 */
package org.example.define.scoping;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Extension;
import org.example.define.DefineModelUtil;
import org.example.define.define.DefinePackage;
import org.example.define.define.Idiom;
import org.example.define.define.UdtRef;
import org.example.define.define.Variable;
import org.example.define.scoping.AbstractDefineScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DefineScopeProvider extends AbstractDefineScopeProvider {
  @Inject
  @Extension
  private DefineModelUtil _defineModelUtil;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _udtRef_UdtType = DefinePackage.eINSTANCE.getUdtRef_UdtType();
    boolean _equals = Objects.equal(reference, _udtRef_UdtType);
    if (_equals) {
      return this.scopeForUdtType(context);
    } else {
      EReference _variableRef_Variable = DefinePackage.eINSTANCE.getVariableRef_Variable();
      boolean _equals_1 = Objects.equal(reference, _variableRef_Variable);
      if (_equals_1) {
        return this.scopeForVariableRef(context);
      } else {
        return super.getScope(context, reference);
      }
    }
  }
  
  protected IScope scopeForVariableRef(final EObject context) {
    if ((context instanceof Variable)) {
      return Scopes.scopeFor(this._defineModelUtil.variablesDefinedBefore(((Variable)context)));
    }
    if ((context instanceof Idiom)) {
      EObject _eContainer = ((Idiom)context).eContainer();
      return Scopes.scopeFor(this._defineModelUtil.variablesDefinedBefore(((Variable) _eContainer)));
    }
    return null;
  }
  
  protected IScope scopeForUdtType(final EObject context) {
    return Scopes.scopeFor(this._defineModelUtil.udtTypesDefinedBefore(((UdtRef) context)));
  }
}
