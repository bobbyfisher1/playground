/**
 * generated by Xtext 2.13.0
 */
package org.example.define.define.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.example.define.define.DefinePackage;
import org.example.define.define.VariableType;
import org.example.define.define.Variant;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.example.define.define.impl.VariantImpl#getVariantName <em>Variant Name</em>}</li>
 *   <li>{@link org.example.define.define.impl.VariantImpl#getVariantType <em>Variant Type</em>}</li>
 *   <li>{@link org.example.define.define.impl.VariantImpl#isNextVariant <em>Next Variant</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariantImpl extends MinimalEObjectImpl.Container implements Variant
{
  /**
   * The default value of the '{@link #getVariantName() <em>Variant Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariantName()
   * @generated
   * @ordered
   */
  protected static final String VARIANT_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVariantName() <em>Variant Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariantName()
   * @generated
   * @ordered
   */
  protected String variantName = VARIANT_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariantType() <em>Variant Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariantType()
   * @generated
   * @ordered
   */
  protected VariableType variantType;

  /**
   * The default value of the '{@link #isNextVariant() <em>Next Variant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNextVariant()
   * @generated
   * @ordered
   */
  protected static final boolean NEXT_VARIANT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNextVariant() <em>Next Variant</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNextVariant()
   * @generated
   * @ordered
   */
  protected boolean nextVariant = NEXT_VARIANT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DefinePackage.Literals.VARIANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getVariantName()
  {
    return variantName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariantName(String newVariantName)
  {
    String oldVariantName = variantName;
    variantName = newVariantName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DefinePackage.VARIANT__VARIANT_NAME, oldVariantName, variantName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableType getVariantType()
  {
    return variantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariantType(VariableType newVariantType, NotificationChain msgs)
  {
    VariableType oldVariantType = variantType;
    variantType = newVariantType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DefinePackage.VARIANT__VARIANT_TYPE, oldVariantType, newVariantType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariantType(VariableType newVariantType)
  {
    if (newVariantType != variantType)
    {
      NotificationChain msgs = null;
      if (variantType != null)
        msgs = ((InternalEObject)variantType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DefinePackage.VARIANT__VARIANT_TYPE, null, msgs);
      if (newVariantType != null)
        msgs = ((InternalEObject)newVariantType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DefinePackage.VARIANT__VARIANT_TYPE, null, msgs);
      msgs = basicSetVariantType(newVariantType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DefinePackage.VARIANT__VARIANT_TYPE, newVariantType, newVariantType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNextVariant()
  {
    return nextVariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNextVariant(boolean newNextVariant)
  {
    boolean oldNextVariant = nextVariant;
    nextVariant = newNextVariant;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DefinePackage.VARIANT__NEXT_VARIANT, oldNextVariant, nextVariant));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DefinePackage.VARIANT__VARIANT_TYPE:
        return basicSetVariantType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DefinePackage.VARIANT__VARIANT_NAME:
        return getVariantName();
      case DefinePackage.VARIANT__VARIANT_TYPE:
        return getVariantType();
      case DefinePackage.VARIANT__NEXT_VARIANT:
        return isNextVariant();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DefinePackage.VARIANT__VARIANT_NAME:
        setVariantName((String)newValue);
        return;
      case DefinePackage.VARIANT__VARIANT_TYPE:
        setVariantType((VariableType)newValue);
        return;
      case DefinePackage.VARIANT__NEXT_VARIANT:
        setNextVariant((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DefinePackage.VARIANT__VARIANT_NAME:
        setVariantName(VARIANT_NAME_EDEFAULT);
        return;
      case DefinePackage.VARIANT__VARIANT_TYPE:
        setVariantType((VariableType)null);
        return;
      case DefinePackage.VARIANT__NEXT_VARIANT:
        setNextVariant(NEXT_VARIANT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DefinePackage.VARIANT__VARIANT_NAME:
        return VARIANT_NAME_EDEFAULT == null ? variantName != null : !VARIANT_NAME_EDEFAULT.equals(variantName);
      case DefinePackage.VARIANT__VARIANT_TYPE:
        return variantType != null;
      case DefinePackage.VARIANT__NEXT_VARIANT:
        return nextVariant != NEXT_VARIANT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (variantName: ");
    result.append(variantName);
    result.append(", nextVariant: ");
    result.append(nextVariant);
    result.append(')');
    return result.toString();
  }

} //VariantImpl
