/*
 * generated by Xtext 2.13.0
 */
package org.example.define.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DefineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DefineBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.DefineBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDirectionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDirectionDirectionBlockParserRuleCall_2_0 = (RuleCall)cDirectionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefineBlock:
		//	'define' '{' direction=DirectionBlock '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'define' '{' direction=DirectionBlock '}'
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//direction=DirectionBlock
		public Assignment getDirectionAssignment_2() { return cDirectionAssignment_2; }
		
		//DirectionBlock
		public RuleCall getDirectionDirectionBlockParserRuleCall_2_0() { return cDirectionDirectionBlockParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DirectionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.DirectionBlock");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cInputInputParserRuleCall_0_0 = (RuleCall)cInputAssignment_0.eContents().get(0);
		private final Assignment cInoutAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cInoutInoutParserRuleCall_1_0 = (RuleCall)cInoutAssignment_1.eContents().get(0);
		private final Assignment cOutputAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cOutputOutputParserRuleCall_2_0 = (RuleCall)cOutputAssignment_2.eContents().get(0);
		
		//DirectionBlock:
		//	input=Input & inout=Inout? & output=Output;
		@Override public ParserRule getRule() { return rule; }
		
		//input=Input & inout=Inout? & output=Output
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//input=Input
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }
		
		//Input
		public RuleCall getInputInputParserRuleCall_0_0() { return cInputInputParserRuleCall_0_0; }
		
		//inout=Inout?
		public Assignment getInoutAssignment_1() { return cInoutAssignment_1; }
		
		//Inout
		public RuleCall getInoutInoutParserRuleCall_1_0() { return cInoutInoutParserRuleCall_1_0; }
		
		//output=Output
		public Assignment getOutputAssignment_2() { return cOutputAssignment_2; }
		
		//Output
		public RuleCall getOutputOutputParserRuleCall_2_0() { return cOutputOutputParserRuleCall_2_0; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInputAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputVariablesVariableParserRuleCall_3_0 = (RuleCall)cInputVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Input:
		//	'input' {Input} '[' inputVariables+=Variable* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'input' {Input} '[' inputVariables+=Variable* ']'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//{Input}
		public Action getInputAction_1() { return cInputAction_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//inputVariables+=Variable*
		public Assignment getInputVariablesAssignment_3() { return cInputVariablesAssignment_3; }
		
		//Variable
		public RuleCall getInputVariablesVariableParserRuleCall_3_0() { return cInputVariablesVariableParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class InoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Inout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cInoutAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInoutVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInoutVariablesVariableParserRuleCall_3_0 = (RuleCall)cInoutVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Inout:
		//	'inout' {Inout} '[' inoutVariables+=Variable* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'inout' {Inout} '[' inoutVariables+=Variable* ']'
		public Group getGroup() { return cGroup; }
		
		//'inout'
		public Keyword getInoutKeyword_0() { return cInoutKeyword_0; }
		
		//{Inout}
		public Action getInoutAction_1() { return cInoutAction_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//inoutVariables+=Variable*
		public Assignment getInoutVariablesAssignment_3() { return cInoutVariablesAssignment_3; }
		
		//Variable
		public RuleCall getInoutVariablesVariableParserRuleCall_3_0() { return cInoutVariablesVariableParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cOutputAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOutputVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutputVariablesVariableParserRuleCall_3_0 = (RuleCall)cOutputVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Output:
		//	'output' {Output} '[' outputVariables+=Variable* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'output' {Output} '[' outputVariables+=Variable* ']'
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//{Output}
		public Action getOutputAction_1() { return cOutputAction_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//outputVariables+=Variable*
		public Assignment getOutputVariablesAssignment_3() { return cOutputVariablesAssignment_3; }
		
		//Variable
		public RuleCall getOutputVariablesVariableParserRuleCall_3_0() { return cOutputVariablesVariableParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVariableTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableTypeVariableTypeParserRuleCall_0_0_0 = (RuleCall)cVariableTypeAssignment_0_0.eContents().get(0);
		private final Assignment cVariableDefinitionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVariableDefinitionVariableDefinitionParserRuleCall_0_1_0 = (RuleCall)cVariableDefinitionAssignment_0_1.eContents().get(0);
		private final Assignment cUdtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUdtUdtParserRuleCall_1_0 = (RuleCall)cUdtAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cVariantKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantVariantParserRuleCall_2_1_0 = (RuleCall)cVariantAssignment_2_1.eContents().get(0);
		
		///*@Todo:	Forbid during validation the occurance of multiple type definitions
		//	 				  	Yet a single type definition must be at the beginning
		//	 				  	AND MOST IMPORTANTLY don't forget to assign variableType*/
		//Variable:
		//	variableType=VariableType? variableDefinition=VariableDefinition | udt=Udt | 'variant'? variant=Variant;
		@Override public ParserRule getRule() { return rule; }
		
		//variableType=VariableType? variableDefinition=VariableDefinition | udt=Udt | 'variant'? variant=Variant
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//variableType=VariableType? variableDefinition=VariableDefinition
		public Group getGroup_0() { return cGroup_0; }
		
		//variableType=VariableType?
		public Assignment getVariableTypeAssignment_0_0() { return cVariableTypeAssignment_0_0; }
		
		//VariableType
		public RuleCall getVariableTypeVariableTypeParserRuleCall_0_0_0() { return cVariableTypeVariableTypeParserRuleCall_0_0_0; }
		
		//variableDefinition=VariableDefinition
		public Assignment getVariableDefinitionAssignment_0_1() { return cVariableDefinitionAssignment_0_1; }
		
		//VariableDefinition
		public RuleCall getVariableDefinitionVariableDefinitionParserRuleCall_0_1_0() { return cVariableDefinitionVariableDefinitionParserRuleCall_0_1_0; }
		
		//udt=Udt
		public Assignment getUdtAssignment_1() { return cUdtAssignment_1; }
		
		//Udt
		public RuleCall getUdtUdtParserRuleCall_1_0() { return cUdtUdtParserRuleCall_1_0; }
		
		//'variant'? variant=Variant
		public Group getGroup_2() { return cGroup_2; }
		
		//'variant'?
		public Keyword getVariantKeyword_2_0() { return cVariantKeyword_2_0; }
		
		//variant=Variant
		public Assignment getVariantAssignment_2_1() { return cVariantAssignment_2_1; }
		
		//Variant
		public RuleCall getVariantVariantParserRuleCall_2_1_0() { return cVariantVariantParserRuleCall_2_1_0; }
	}
	public class VariableDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.VariableDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableNameIDTerminalRuleCall_0_0 = (RuleCall)cVariableNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cPlusSignSolidusHyphenMinusKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRangeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRangeExpressionParserRuleCall_1_2_1_0 = (RuleCall)cRangeAssignment_1_2_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Assignment cNextVariableAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNextVariableCommaKeyword_2_1_0 = (Keyword)cNextVariableAssignment_2_1.eContents().get(0);
		
		///*@Todo:	Check that only a single ';' is at the end */ VariableDefinition:
		//	variableName=ID ('=' expression=Expression ('+/-' range=Expression)?)? (';' | nextVariable?=',');
		@Override public ParserRule getRule() { return rule; }
		
		//variableName=ID ('=' expression=Expression ('+/-' range=Expression)?)? (';' | nextVariable?=',')
		public Group getGroup() { return cGroup; }
		
		//variableName=ID
		public Assignment getVariableNameAssignment_0() { return cVariableNameAssignment_0; }
		
		//ID
		public RuleCall getVariableNameIDTerminalRuleCall_0_0() { return cVariableNameIDTerminalRuleCall_0_0; }
		
		//('=' expression=Expression ('+/-' range=Expression)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
		
		//('+/-' range=Expression)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'+/-'
		public Keyword getPlusSignSolidusHyphenMinusKeyword_1_2_0() { return cPlusSignSolidusHyphenMinusKeyword_1_2_0; }
		
		//range=Expression
		public Assignment getRangeAssignment_1_2_1() { return cRangeAssignment_1_2_1; }
		
		//Expression
		public RuleCall getRangeExpressionParserRuleCall_1_2_1_0() { return cRangeExpressionParserRuleCall_1_2_1_0; }
		
		//';' | nextVariable?=','
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }
		
		//nextVariable?=','
		public Assignment getNextVariableAssignment_2_1() { return cNextVariableAssignment_2_1; }
		
		//','
		public Keyword getNextVariableCommaKeyword_2_1_0() { return cNextVariableCommaKeyword_2_1_0; }
	}
	public class UdtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Udt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUdtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUdtNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUdtNameIDTerminalRuleCall_1_0 = (RuleCall)cUdtNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUdtTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUdtTypeIDTerminalRuleCall_3_0 = (RuleCall)cUdtTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUdtVariablesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUdtVariablesVariableParserRuleCall_6_0 = (RuleCall)cUdtVariablesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Udt:
		//	'udt' udtName=ID '(' udtType=ID ')' '{' udtVariables+=Variable* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'udt' udtName=ID '(' udtType=ID ')' '{' udtVariables+=Variable* '}'
		public Group getGroup() { return cGroup; }
		
		//'udt'
		public Keyword getUdtKeyword_0() { return cUdtKeyword_0; }
		
		//udtName=ID
		public Assignment getUdtNameAssignment_1() { return cUdtNameAssignment_1; }
		
		//ID
		public RuleCall getUdtNameIDTerminalRuleCall_1_0() { return cUdtNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//udtType=ID
		public Assignment getUdtTypeAssignment_3() { return cUdtTypeAssignment_3; }
		
		//ID
		public RuleCall getUdtTypeIDTerminalRuleCall_3_0() { return cUdtTypeIDTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//udtVariables+=Variable*
		public Assignment getUdtVariablesAssignment_6() { return cUdtVariablesAssignment_6; }
		
		//Variable
		public RuleCall getUdtVariablesVariableParserRuleCall_6_0() { return cUdtVariablesVariableParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariantNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariantNameIDTerminalRuleCall_0_0 = (RuleCall)cVariantNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariantTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariantTypeVariableTypeParserRuleCall_2_0 = (RuleCall)cVariantTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Assignment cNextVariantAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cNextVariantCommaKeyword_4_1_0 = (Keyword)cNextVariantAssignment_4_1.eContents().get(0);
		
		//Variant:
		//	variantName=ID '(' variantType=VariableType ')' (';' | nextVariant?=',');
		@Override public ParserRule getRule() { return rule; }
		
		//variantName=ID '(' variantType=VariableType ')' (';' | nextVariant?=',')
		public Group getGroup() { return cGroup; }
		
		//variantName=ID
		public Assignment getVariantNameAssignment_0() { return cVariantNameAssignment_0; }
		
		//ID
		public RuleCall getVariantNameIDTerminalRuleCall_0_0() { return cVariantNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//variantType=VariableType
		public Assignment getVariantTypeAssignment_2() { return cVariantTypeAssignment_2; }
		
		//VariableType
		public RuleCall getVariantTypeVariableTypeParserRuleCall_2_0() { return cVariantTypeVariableTypeParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';' | nextVariant?=','
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//';'
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }
		
		//nextVariant?=','
		public Assignment getNextVariantAssignment_4_1() { return cNextVariantAssignment_4_1; }
		
		//','
		public Keyword getNextVariantCommaKeyword_4_1_0() { return cNextVariantCommaKeyword_4_1_0; }
	}
	public class VariableTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.VariableType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//VariableType:
		//	'int' | 'bool' | 'float';
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'bool' | 'float'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//'float'
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.example.define.Define.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cVariableRefAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVariableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_3_1_0 = (CrossReference)cVariableAssignment_3_1.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cVariableVariableCrossReference_3_1_0.eContents().get(1);
		
		//Expression:
		//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {VariableRef}
		//	variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {VariableRef}
		//variable=[Variable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{StringConstant} value=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringConstant}
		public Action getStringConstantAction_1_0() { return cStringConstantAction_1_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_1_0() { return cValueSTRINGTerminalRuleCall_1_1_0; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_2() { return cGroup_2; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }
		
		//{VariableRef} variable=[Variable]
		public Group getGroup_3() { return cGroup_3; }
		
		//{VariableRef}
		public Action getVariableRefAction_3_0() { return cVariableRefAction_3_0; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment_3_1() { return cVariableAssignment_3_1; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_3_1_0() { return cVariableVariableCrossReference_3_1_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_3_1_0_1() { return cVariableVariableIDTerminalRuleCall_3_1_0_1; }
	}
	
	
	private final DefineBlockElements pDefineBlock;
	private final DirectionBlockElements pDirectionBlock;
	private final InputElements pInput;
	private final InoutElements pInout;
	private final OutputElements pOutput;
	private final VariableElements pVariable;
	private final VariableDefinitionElements pVariableDefinition;
	private final UdtElements pUdt;
	private final VariantElements pVariant;
	private final VariableTypeElements pVariableType;
	private final ExpressionElements pExpression;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DefineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDefineBlock = new DefineBlockElements();
		this.pDirectionBlock = new DirectionBlockElements();
		this.pInput = new InputElements();
		this.pInout = new InoutElements();
		this.pOutput = new OutputElements();
		this.pVariable = new VariableElements();
		this.pVariableDefinition = new VariableDefinitionElements();
		this.pUdt = new UdtElements();
		this.pVariant = new VariantElements();
		this.pVariableType = new VariableTypeElements();
		this.pExpression = new ExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.example.define.Define".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DefineBlock:
	//	'define' '{' direction=DirectionBlock '}';
	public DefineBlockElements getDefineBlockAccess() {
		return pDefineBlock;
	}
	
	public ParserRule getDefineBlockRule() {
		return getDefineBlockAccess().getRule();
	}
	
	//DirectionBlock:
	//	input=Input & inout=Inout? & output=Output;
	public DirectionBlockElements getDirectionBlockAccess() {
		return pDirectionBlock;
	}
	
	public ParserRule getDirectionBlockRule() {
		return getDirectionBlockAccess().getRule();
	}
	
	//Input:
	//	'input' {Input} '[' inputVariables+=Variable* ']';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Inout:
	//	'inout' {Inout} '[' inoutVariables+=Variable* ']';
	public InoutElements getInoutAccess() {
		return pInout;
	}
	
	public ParserRule getInoutRule() {
		return getInoutAccess().getRule();
	}
	
	//Output:
	//	'output' {Output} '[' outputVariables+=Variable* ']';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	///*@Todo:	Forbid during validation the occurance of multiple type definitions
	//	 				  	Yet a single type definition must be at the beginning
	//	 				  	AND MOST IMPORTANTLY don't forget to assign variableType*/
	//Variable:
	//	variableType=VariableType? variableDefinition=VariableDefinition | udt=Udt | 'variant'? variant=Variant;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///*@Todo:	Check that only a single ';' is at the end */ VariableDefinition:
	//	variableName=ID ('=' expression=Expression ('+/-' range=Expression)?)? (';' | nextVariable?=',');
	public VariableDefinitionElements getVariableDefinitionAccess() {
		return pVariableDefinition;
	}
	
	public ParserRule getVariableDefinitionRule() {
		return getVariableDefinitionAccess().getRule();
	}
	
	//Udt:
	//	'udt' udtName=ID '(' udtType=ID ')' '{' udtVariables+=Variable* '}';
	public UdtElements getUdtAccess() {
		return pUdt;
	}
	
	public ParserRule getUdtRule() {
		return getUdtAccess().getRule();
	}
	
	//Variant:
	//	variantName=ID '(' variantType=VariableType ')' (';' | nextVariant?=',');
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//VariableType:
	//	'int' | 'bool' | 'float';
	public VariableTypeElements getVariableTypeAccess() {
		return pVariableType;
	}
	
	public ParserRule getVariableTypeRule() {
		return getVariableTypeAccess().getRule();
	}
	
	//Expression:
	//	{IntConstant} value=INT | {StringConstant} value=STRING | {BoolConstant} value=('true' | 'false') | {VariableRef}
	//	variable=[Variable];
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
