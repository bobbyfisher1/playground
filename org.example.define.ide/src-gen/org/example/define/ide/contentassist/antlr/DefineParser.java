/*
 * generated by Xtext 2.13.0
 */
package org.example.define.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.define.ide.contentassist.antlr.internal.InternalDefineParser;
import org.example.define.services.DefineGrammarAccess;

public class DefineParser extends AbstractContentAssistParser {

	@Inject
	private DefineGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDefineParser createParser() {
		InternalDefineParser result = new InternalDefineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getTypesAccess().getAlternatives(), "rule__Types__Alternatives");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
					put(grammarAccess.getFloatConstantAccess().getAlternatives_1(), "rule__FloatConstant__Alternatives_1");
					put(grammarAccess.getDefineBlockAccess().getGroup(), "rule__DefineBlock__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getInoutAccess().getGroup(), "rule__Inout__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_0(), "rule__Variable__Group_0__0");
					put(grammarAccess.getVariableAccess().getGroup_0_4(), "rule__Variable__Group_0_4__0");
					put(grammarAccess.getVariableAccess().getGroup_0_4_2(), "rule__Variable__Group_0_4_2__0");
					put(grammarAccess.getUdtAccess().getGroup(), "rule__Udt__Group__0");
					put(grammarAccess.getTypesAccess().getGroup_0(), "rule__Types__Group_0__0");
					put(grammarAccess.getTypesAccess().getGroup_1(), "rule__Types__Group_1__0");
					put(grammarAccess.getTypesAccess().getGroup_2(), "rule__Types__Group_2__0");
					put(grammarAccess.getTypesAccess().getGroup_3(), "rule__Types__Group_3__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getFloatConstantAccess().getGroup(), "rule__FloatConstant__Group__0");
					put(grammarAccess.getFloatConstantAccess().getGroup_1_0(), "rule__FloatConstant__Group_1_0__0");
					put(grammarAccess.getFloatConstantAccess().getGroup_1_1(), "rule__FloatConstant__Group_1_1__0");
					put(grammarAccess.getFloatConstantAccess().getGroup_1_2(), "rule__FloatConstant__Group_1_2__0");
					put(grammarAccess.getDefineBlockAccess().getDirectionAssignment_2(), "rule__DefineBlock__DirectionAssignment_2");
					put(grammarAccess.getDirectionBlockAccess().getInputAssignment_0(), "rule__DirectionBlock__InputAssignment_0");
					put(grammarAccess.getDirectionBlockAccess().getInoutAssignment_1(), "rule__DirectionBlock__InoutAssignment_1");
					put(grammarAccess.getDirectionBlockAccess().getOutputAssignment_2(), "rule__DirectionBlock__OutputAssignment_2");
					put(grammarAccess.getInputAccess().getInputVariablesAssignment_3(), "rule__Input__InputVariablesAssignment_3");
					put(grammarAccess.getOutputAccess().getOutputVariablesAssignment_3(), "rule__Output__OutputVariablesAssignment_3");
					put(grammarAccess.getInoutAccess().getInoutVariablesAssignment_3(), "rule__Inout__InoutVariablesAssignment_3");
					put(grammarAccess.getVariableAccess().getVariantKeywordAssignment_0_1(), "rule__Variable__VariantKeywordAssignment_0_1");
					put(grammarAccess.getVariableAccess().getVariableTypeAssignment_0_2(), "rule__Variable__VariableTypeAssignment_0_2");
					put(grammarAccess.getVariableAccess().getVariableNameAssignment_0_3(), "rule__Variable__VariableNameAssignment_0_3");
					put(grammarAccess.getVariableAccess().getExpressionAssignment_0_4_1(), "rule__Variable__ExpressionAssignment_0_4_1");
					put(grammarAccess.getVariableAccess().getRangeAssignment_0_4_2_1(), "rule__Variable__RangeAssignment_0_4_2_1");
					put(grammarAccess.getVariableAccess().getUdtAssignment_1(), "rule__Variable__UdtAssignment_1");
					put(grammarAccess.getUdtAccess().getUdtNameAssignment_1(), "rule__Udt__UdtNameAssignment_1");
					put(grammarAccess.getUdtAccess().getUdtTypesAssignment_3(), "rule__Udt__UdtTypesAssignment_3");
					put(grammarAccess.getUdtAccess().getUdtVariablesAssignment_6(), "rule__Udt__UdtVariablesAssignment_6");
					put(grammarAccess.getUdtTypeAccess().getUdtTypeNameAssignment(), "rule__UdtType__UdtTypeNameAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getVariableAssignment_3_1(), "rule__Atomic__VariableAssignment_3_1");
					put(grammarAccess.getFloatConstantAccess().getValueAssignment_1_0_0(), "rule__FloatConstant__ValueAssignment_1_0_0");
					put(grammarAccess.getFloatConstantAccess().getValueOfDecimalAssignment_1_0_2(), "rule__FloatConstant__ValueOfDecimalAssignment_1_0_2");
					put(grammarAccess.getFloatConstantAccess().getValueAssignment_1_1_0(), "rule__FloatConstant__ValueAssignment_1_1_0");
					put(grammarAccess.getFloatConstantAccess().getValueOfDecimalAssignment_1_1_2(), "rule__FloatConstant__ValueOfDecimalAssignment_1_1_2");
					put(grammarAccess.getFloatConstantAccess().getValueAssignment_1_2_0(), "rule__FloatConstant__ValueAssignment_1_2_0");
					put(grammarAccess.getFloatConstantAccess().getValueOfDecimalAssignment_1_2_2(), "rule__FloatConstant__ValueOfDecimalAssignment_1_2_2");
					put(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), "rule__DirectionBlock__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DefineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DefineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
