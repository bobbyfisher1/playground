/*
 * generated by Xtext 2.13.0
 */
package org.example.define.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.example.define.ide.contentassist.antlr.internal.InternalDefineParser;
import org.example.define.services.DefineGrammarAccess;

public class DefineParser extends AbstractContentAssistParser {

	@Inject
	private DefineGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDefineParser createParser() {
		InternalDefineParser result = new InternalDefineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getVariableDefinitionAccess().getAlternatives_2(), "rule__VariableDefinition__Alternatives_2");
					put(grammarAccess.getVariantAccess().getAlternatives_4(), "rule__Variant__Alternatives_4");
					put(grammarAccess.getVariableTypeAccess().getAlternatives(), "rule__VariableType__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getExpressionAccess().getValueAlternatives_2_1_0(), "rule__Expression__ValueAlternatives_2_1_0");
					put(grammarAccess.getDefineBlockAccess().getGroup(), "rule__DefineBlock__Group__0");
					put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
					put(grammarAccess.getInoutAccess().getGroup(), "rule__Inout__Group__0");
					put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_0(), "rule__Variable__Group_0__0");
					put(grammarAccess.getVariableAccess().getGroup_2(), "rule__Variable__Group_2__0");
					put(grammarAccess.getVariableDefinitionAccess().getGroup(), "rule__VariableDefinition__Group__0");
					put(grammarAccess.getVariableDefinitionAccess().getGroup_1(), "rule__VariableDefinition__Group_1__0");
					put(grammarAccess.getVariableDefinitionAccess().getGroup_1_2(), "rule__VariableDefinition__Group_1_2__0");
					put(grammarAccess.getUdtAccess().getGroup(), "rule__Udt__Group__0");
					put(grammarAccess.getVariantAccess().getGroup(), "rule__Variant__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_2(), "rule__Expression__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup_3(), "rule__Expression__Group_3__0");
					put(grammarAccess.getDefineBlockAccess().getDirectionAssignment_2(), "rule__DefineBlock__DirectionAssignment_2");
					put(grammarAccess.getDirectionBlockAccess().getInputAssignment_0(), "rule__DirectionBlock__InputAssignment_0");
					put(grammarAccess.getDirectionBlockAccess().getInoutAssignment_1(), "rule__DirectionBlock__InoutAssignment_1");
					put(grammarAccess.getDirectionBlockAccess().getOutputAssignment_2(), "rule__DirectionBlock__OutputAssignment_2");
					put(grammarAccess.getInputAccess().getInputVariablesAssignment_3(), "rule__Input__InputVariablesAssignment_3");
					put(grammarAccess.getInoutAccess().getInoutVariablesAssignment_3(), "rule__Inout__InoutVariablesAssignment_3");
					put(grammarAccess.getOutputAccess().getOutputVariablesAssignment_3(), "rule__Output__OutputVariablesAssignment_3");
					put(grammarAccess.getVariableAccess().getVariableTypeAssignment_0_0(), "rule__Variable__VariableTypeAssignment_0_0");
					put(grammarAccess.getVariableAccess().getVariableDefinitionAssignment_0_1(), "rule__Variable__VariableDefinitionAssignment_0_1");
					put(grammarAccess.getVariableAccess().getUdtAssignment_1(), "rule__Variable__UdtAssignment_1");
					put(grammarAccess.getVariableAccess().getVariantAssignment_2_1(), "rule__Variable__VariantAssignment_2_1");
					put(grammarAccess.getVariableDefinitionAccess().getVariableNameAssignment_0(), "rule__VariableDefinition__VariableNameAssignment_0");
					put(grammarAccess.getVariableDefinitionAccess().getExpressionAssignment_1_1(), "rule__VariableDefinition__ExpressionAssignment_1_1");
					put(grammarAccess.getVariableDefinitionAccess().getRangeAssignment_1_2_1(), "rule__VariableDefinition__RangeAssignment_1_2_1");
					put(grammarAccess.getVariableDefinitionAccess().getNextVariableAssignment_2_1(), "rule__VariableDefinition__NextVariableAssignment_2_1");
					put(grammarAccess.getUdtAccess().getUdtNameAssignment_1(), "rule__Udt__UdtNameAssignment_1");
					put(grammarAccess.getUdtAccess().getUdtTypeAssignment_3(), "rule__Udt__UdtTypeAssignment_3");
					put(grammarAccess.getUdtAccess().getUdtVariablesAssignment_6(), "rule__Udt__UdtVariablesAssignment_6");
					put(grammarAccess.getVariantAccess().getVariantNameAssignment_0(), "rule__Variant__VariantNameAssignment_0");
					put(grammarAccess.getVariantAccess().getVariantTypeAssignment_2(), "rule__Variant__VariantTypeAssignment_2");
					put(grammarAccess.getVariantAccess().getNextVariantAssignment_4_1(), "rule__Variant__NextVariantAssignment_4_1");
					put(grammarAccess.getExpressionAccess().getValueAssignment_0_1(), "rule__Expression__ValueAssignment_0_1");
					put(grammarAccess.getExpressionAccess().getValueAssignment_1_1(), "rule__Expression__ValueAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getValueAssignment_2_1(), "rule__Expression__ValueAssignment_2_1");
					put(grammarAccess.getExpressionAccess().getVariableAssignment_3_1(), "rule__Expression__VariableAssignment_3_1");
					put(grammarAccess.getDirectionBlockAccess().getUnorderedGroup(), "rule__DirectionBlock__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DefineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DefineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
