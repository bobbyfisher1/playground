/*
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.xtext.eis.eis.InOut
import org.xtext.eis.eis.Input
import org.xtext.eis.eis.Output
import org.xtext.eis.eis.Udt

class EisProposalProvider extends AbstractEisProposalProvider {
	override completeVariable_VariableType(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {

		super.completeVariable_VariableType(model, assignment, context, acceptor)

		// As added proposals udtTypes are shown as well 
		// Here model is either input, inout or output
		val udtTypes = if (model instanceof Input)
				model.inputVariables.filter(Udt).map[udtType]
			else if (model instanceof Output)
				model.outputVariables.filter(Udt).map[udtType]
			else if (model instanceof InOut)
				model.inoutVariables.filter(Udt).map[udtType]
			else if (model instanceof Udt)
				model.udtVariables.filter(Udt).map[udtType]

		for (e : udtTypes)
			acceptor.accept(createCompletionProposal(e.name, e.name + " - UdtType", null, context))
	}

	override completeBoolConstant_Value(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeBoolConstant_Value(model, assignment, context, acceptor)

		acceptor.accept(createCompletionProposal("true", "true", null, context))
		acceptor.accept(createCompletionProposal("false", "false", null, context))

	}

	override completeBlockConstant_Value(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeBlockConstant_Value(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal("FC", "FC", null, context))
		acceptor.accept(createCompletionProposal("FB", "FB", null, context))
	}

	override completeEisModel_ProjectName(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeEisModel_ProjectName(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal('"project_name"', "project_name", null, context))
	}

	override completeEisModel_PlcName(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeEisModel_PlcName(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal('"plc_name"', "plc_name", null, context))
	}

	override completeEisModel_AuthorName(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeEisModel_AuthorName(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal('"author_name"', 'author_name', null, context))
	}

	override completeTestcase_TestcaseName(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeTestcase_TestcaseName(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal("testcase_name", 'testcase_name', null, context))
	}

	override completeTestblock_Description(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeTestblock_Description(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal('"description"', 'description', null, context))
	}

	override completeTeststepBlock_PlcCycle(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeTeststepBlock_PlcCycle(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal('0', '0', null, context))
	}

	override completeTeststepBlock_Description(EObject model, Assignment assignment, ContentAssistContext context,
		ICompletionProposalAcceptor acceptor) {
		super.completeTeststepBlock_Description(model, assignment, context, acceptor)
		acceptor.accept(createCompletionProposal('"description"', 'description', null, context))
	}
}
