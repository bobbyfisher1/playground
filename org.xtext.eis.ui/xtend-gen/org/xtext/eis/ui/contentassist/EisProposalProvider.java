/**
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.ui.contentassist;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.eis.eis.Input;
import org.xtext.eis.eis.Output;
import org.xtext.eis.eis.Udt;
import org.xtext.eis.eis.UdtType;
import org.xtext.eis.ui.contentassist.AbstractEisProposalProvider;

@SuppressWarnings("all")
public class EisProposalProvider extends AbstractEisProposalProvider {
  @Override
  public void completeVariable_VariableType(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeVariable_VariableType(model, assignment, context, acceptor);
    Iterable<UdtType> _xifexpression = null;
    if ((model instanceof Input)) {
      final Function1<Udt, UdtType> _function = (Udt it) -> {
        return it.getUdtType();
      };
      _xifexpression = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((Input)model).getInputVariables(), Udt.class), _function);
    } else {
      Iterable<UdtType> _xifexpression_1 = null;
      if ((model instanceof Output)) {
        final Function1<Udt, UdtType> _function_1 = (Udt it) -> {
          return it.getUdtType();
        };
        _xifexpression_1 = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((Output)model).getOutputVariables(), Udt.class), _function_1);
      } else {
        Iterable<UdtType> _xifexpression_2 = null;
        if ((model instanceof Udt)) {
          final Function1<Udt, UdtType> _function_2 = (Udt it) -> {
            return it.getUdtType();
          };
          _xifexpression_2 = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((Udt)model).getUdtVariables(), Udt.class), _function_2);
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    final Iterable<UdtType> udtTypes = _xifexpression;
    for (final UdtType e : udtTypes) {
      String _name = e.getName();
      String _name_1 = e.getName();
      String _plus = (_name_1 + " - UdtType");
      acceptor.accept(this.createCompletionProposal(_name, _plus, null, context));
    }
  }
  
  @Override
  public void completeBoolConstant_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeBoolConstant_Value(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("true", "true", null, context));
    acceptor.accept(this.createCompletionProposal("false", "false", null, context));
  }
  
  @Override
  public void completeBlockConstant_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeBlockConstant_Value(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("FC", "FC", null, context));
    acceptor.accept(this.createCompletionProposal("FB", "FB", null, context));
  }
  
  @Override
  public void completeEisModel_Project_name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeEisModel_Project_name(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("\"project_name\"", "project_name", null, context));
  }
  
  @Override
  public void completeEisModel_Plc_name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeEisModel_Plc_name(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("\"plc_name\"", "plc_name", null, context));
  }
  
  @Override
  public void completeEisModel_Author_name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeEisModel_Author_name(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("\"author_name\"", "author_name", null, context));
  }
  
  @Override
  public void completeTestcase_Testcase_name(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTestcase_Testcase_name(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("testcase_name", "testcase_name", null, context));
  }
  
  @Override
  public void completeTestblock_Description(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTestblock_Description(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("\"description\"", "description", null, context));
  }
  
  @Override
  public void completeTeststepBlock_PlcCycle(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTeststepBlock_PlcCycle(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("0", "0", null, context));
  }
  
  @Override
  public void completeTeststepBlock_Description(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTeststepBlock_Description(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("\"description\"", "description", null, context));
  }
}
