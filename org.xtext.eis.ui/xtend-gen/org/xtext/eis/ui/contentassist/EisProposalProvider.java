/**
 * generated by Xtext 2.14.0
 */
package org.xtext.eis.ui.contentassist;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.eis.eis.InOut;
import org.xtext.eis.eis.Input;
import org.xtext.eis.eis.Output;
import org.xtext.eis.eis.Udt;
import org.xtext.eis.eis.UdtType;
import org.xtext.eis.ui.contentassist.AbstractEisProposalProvider;

@SuppressWarnings("all")
public class EisProposalProvider extends AbstractEisProposalProvider {
  @Override
  public void completeVariable_VariableType(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeVariable_VariableType(model, assignment, context, acceptor);
    Iterable<UdtType> _xifexpression = null;
    if ((model instanceof Input)) {
      final Function1<Udt, UdtType> _function = (Udt it) -> {
        return it.getUdtType();
      };
      _xifexpression = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((Input)model).getInputVariables(), Udt.class), _function);
    } else {
      Iterable<UdtType> _xifexpression_1 = null;
      if ((model instanceof Output)) {
        final Function1<Udt, UdtType> _function_1 = (Udt it) -> {
          return it.getUdtType();
        };
        _xifexpression_1 = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((Output)model).getOutputVariables(), Udt.class), _function_1);
      } else {
        Iterable<UdtType> _xifexpression_2 = null;
        if ((model instanceof InOut)) {
          final Function1<Udt, UdtType> _function_2 = (Udt it) -> {
            return it.getUdtType();
          };
          _xifexpression_2 = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((InOut)model).getInoutVariables(), Udt.class), _function_2);
        } else {
          Iterable<UdtType> _xifexpression_3 = null;
          if ((model instanceof Udt)) {
            final Function1<Udt, UdtType> _function_3 = (Udt it) -> {
              return it.getUdtType();
            };
            _xifexpression_3 = IterableExtensions.<Udt, UdtType>map(Iterables.<Udt>filter(((Udt)model).getUdtVariables(), Udt.class), _function_3);
          }
          _xifexpression_2 = _xifexpression_3;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    final Iterable<UdtType> udtTypes = _xifexpression;
    for (final UdtType e : udtTypes) {
      String _name = e.getName();
      String _name_1 = e.getName();
      String _plus = (_name_1 + " - UdtType");
      acceptor.accept(this.createCompletionProposal(_name, _plus, null, context));
    }
  }
  
  @Override
  public void completeBoolConstant_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeBoolConstant_Value(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("", "testActive (bool)", null, context));
  }
  
  @Override
  public void completeBlockConstant_Value(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeBlockConstant_Value(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("", "blocktype (FB|FC)", null, context));
  }
  
  @Override
  public void complete_EisModel(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_EisModel(model, ruleCall, context, acceptor);
    acceptor.accept(this.createCompletionProposal("author = ", "author", null, context));
  }
  
  @Override
  public void completeEisModel_ProjectName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeEisModel_ProjectName(model, assignment, context, acceptor);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"projectName\";");
    _builder.newLine();
    acceptor.accept(this.createCompletionProposal(_builder.toString(), "projectName (string)", null, context));
  }
  
  @Override
  public void completeEisModel_PlcName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeEisModel_PlcName(model, assignment, context, acceptor);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"plcName\";");
    _builder.newLine();
    acceptor.accept(this.createCompletionProposal(_builder.toString(), "plcName (string)", null, context));
  }
  
  @Override
  public void completeEisModel_AuthorName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeEisModel_AuthorName(model, assignment, context, acceptor);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"authorName\";");
    _builder.newLine();
    acceptor.accept(this.createCompletionProposal(_builder.toString(), "authorName (string)", null, context));
  }
  
  @Override
  public void complete_Testcase(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_Testcase(model, ruleCall, context, acceptor);
    acceptor.accept(this.createCompletionProposal("testcase ", "testcase", null, context));
  }
  
  @Override
  public void completeTestcase_TestcaseName(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTestcase_TestcaseName(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("testcaseName(", "testcaseName (ID)", null, context));
  }
  
  @Override
  public void completeTestcase_Description(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTestcase_Description(model, assignment, context, acceptor);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"description\"){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("define {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("input[ ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("output[ ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("inout[ ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("teststep(0, \"description\") {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("set[ ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assert[ ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    acceptor.accept(
      this.createCompletionProposal(_builder.toString(), "description (string)", null, context));
  }
  
  @Override
  public void completeTeststepBlock_PlcCycle(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTeststepBlock_PlcCycle(model, assignment, context, acceptor);
    acceptor.accept(this.createCompletionProposal("0, ", "plcCycle (int)", null, context));
  }
  
  @Override
  public void completeTeststepBlock_Description(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.completeTeststepBlock_Description(model, assignment, context, acceptor);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"description\"){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("set[ ]");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("assert[ ]");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    acceptor.accept(
      this.createCompletionProposal(_builder.toString(), "description (string)", null, context));
  }
}
